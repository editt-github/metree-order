[{"D:\\프로젝트\\react\\react-order\\src\\index.js":"1","D:\\프로젝트\\react\\react-order\\src\\reportWebVitals.js":"2","D:\\프로젝트\\react\\react-order\\src\\App.js":"3","D:\\프로젝트\\react\\react-order\\src\\redux\\reducers\\index.js":"4","D:\\프로젝트\\react\\react-order\\src\\firebase.js":"5","D:\\프로젝트\\react\\react-order\\src\\component\\Login.js":"6","D:\\프로젝트\\react\\react-order\\src\\component\\Nav.js":"7","D:\\프로젝트\\react\\react-order\\src\\component\\Loading.js":"8","D:\\프로젝트\\react\\react-order\\src\\component\\MyOrder.js":"9","D:\\프로젝트\\react\\react-order\\src\\component\\Join.js":"10","D:\\프로젝트\\react\\react-order\\src\\component\\CommonFunc.js":"11","D:\\프로젝트\\react\\react-order\\src\\component\\Menu.js":"12","D:\\프로젝트\\react\\react-order\\src\\component\\MyMenu.js":"13","D:\\프로젝트\\react\\react-order\\src\\component\\Test.js":"14","D:\\프로젝트\\react\\react-order\\src\\component\\LunchCheck.js":"15","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminProd.js":"16","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminOrderList.js":"17","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminOrder.js":"18","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\LunchAdmin.js":"19","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminProdCount.js":"20","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\Research.js":"21","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\UserAdmin.js":"22","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\HairAdmin.js":"23","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchWrite.js":"24","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchView.js":"25","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchModify.js":"26","D:\\프로젝트\\react\\react-order\\src\\redux\\actions\\user_action.js":"27","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchTemp.js":"28","D:\\프로젝트\\react\\react-order\\src\\component\\hair\\Hair.js":"29","D:\\프로젝트\\react\\react-order\\src\\redux\\reducers\\user_reducer.js":"30","D:\\프로젝트\\react\\react-order\\src\\firebaseConfig.js":"31","D:\\프로젝트\\react\\react-order\\src\\component\\OrderModal.js":"32","D:\\프로젝트\\react\\react-order\\src\\component\\Timer.js":"33","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\ModifyModal.js":"34","D:\\프로젝트\\react\\react-order\\src\\redux\\actions\\types.js":"35","D:\\프로젝트\\react\\react-order\\src\\component\\Signature.js":"36","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\ImgUpload.js":"37","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\Chair.js":"38","D:\\프로젝트\\react\\react-order\\src\\component\\GuestHome.js":"39","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\ChairAdmin.js":"40","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\StylerAdmin.js":"41","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\Styler.js":"42","D:\\프로젝트\\react\\react-order\\src\\component\\inven\\Inventory.js":"43","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\InvenAdmin.js":"44"},{"size":930,"mtime":1611531749725,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1611275425240,"results":"47","hashOfConfig":"46"},{"size":7557,"mtime":1639359718555,"results":"48","hashOfConfig":"46"},{"size":155,"mtime":1611635073174,"results":"49","hashOfConfig":"46"},{"size":655,"mtime":1632878682384,"results":"50","hashOfConfig":"46"},{"size":4028,"mtime":1613612222173,"results":"51","hashOfConfig":"46"},{"size":17893,"mtime":1638495185738,"results":"52","hashOfConfig":"46"},{"size":200,"mtime":1616652225620,"results":"53","hashOfConfig":"46"},{"size":7016,"mtime":1632373669271,"results":"54","hashOfConfig":"46"},{"size":8379,"mtime":1638759476218,"results":"55","hashOfConfig":"46"},{"size":2177,"mtime":1638424872563,"results":"56","hashOfConfig":"46"},{"size":16410,"mtime":1639359808473,"results":"57","hashOfConfig":"46"},{"size":12771,"mtime":1629785864910,"results":"58","hashOfConfig":"46"},{"size":614,"mtime":1623717698005,"results":"59","hashOfConfig":"46"},{"size":11681,"mtime":1631846804836,"results":"60","hashOfConfig":"46"},{"size":20890,"mtime":1632793580668,"results":"61","hashOfConfig":"46"},{"size":9406,"mtime":1637042944052,"results":"62","hashOfConfig":"46"},{"size":10201,"mtime":1632373715781,"results":"63","hashOfConfig":"46"},{"size":13458,"mtime":1631767150211,"results":"64","hashOfConfig":"46"},{"size":1943,"mtime":1629785864901,"results":"65","hashOfConfig":"46"},{"size":4589,"mtime":1630395345206,"results":"66","hashOfConfig":"46"},{"size":3819,"mtime":1630045931079,"results":"67","hashOfConfig":"46"},{"size":19687,"mtime":1637624810467,"results":"68","hashOfConfig":"46"},{"size":15999,"mtime":1630396437036,"results":"69","hashOfConfig":"46"},{"size":10803,"mtime":1630370299131,"results":"70","hashOfConfig":"46"},{"size":15038,"mtime":1630395050685,"results":"71","hashOfConfig":"46"},{"size":221,"mtime":1631669204134,"results":"72","hashOfConfig":"46"},{"size":15149,"mtime":1630395120116,"results":"73","hashOfConfig":"46"},{"size":11561,"mtime":1635317232916,"results":"74","hashOfConfig":"46"},{"size":530,"mtime":1611531749735,"results":"75","hashOfConfig":"46"},{"size":367,"mtime":1611648126707,"results":"76","hashOfConfig":"46"},{"size":14125,"mtime":1636951643078,"results":"77","hashOfConfig":"46"},{"size":958,"mtime":1623300325967,"results":"78","hashOfConfig":"46"},{"size":12333,"mtime":1629185070747,"results":"79","hashOfConfig":"46"},{"size":89,"mtime":1611635065557,"results":"80","hashOfConfig":"46"},{"size":1313,"mtime":1634539449815,"results":"81","hashOfConfig":"46"},{"size":1164,"mtime":1611618005976,"results":"82","hashOfConfig":"46"},{"size":13102,"mtime":1634601635343,"results":"83","hashOfConfig":"46"},{"size":1989,"mtime":1639373767085,"results":"84","hashOfConfig":"46"},{"size":3848,"mtime":1634001797183,"results":"85","hashOfConfig":"46"},{"size":4289,"mtime":1634601526886,"results":"86","hashOfConfig":"46"},{"size":13204,"mtime":1635212601226,"results":"87","hashOfConfig":"46"},{"size":10310,"mtime":1639029625705,"results":"88","hashOfConfig":"46"},{"size":28623,"mtime":1638943855689,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sm3y83",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"103"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"103"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"103"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"103"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"103"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"103"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"103"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"103"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"103"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"103"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"103"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"103"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"103"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"103"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"103"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"103"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"103"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"103"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"103"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"103"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"103"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"103"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"103"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"103"},"D:\\프로젝트\\react\\react-order\\src\\index.js",[],"D:\\프로젝트\\react\\react-order\\src\\reportWebVitals.js",[],"D:\\프로젝트\\react\\react-order\\src\\App.js",["208"],"D:\\프로젝트\\react\\react-order\\src\\redux\\reducers\\index.js",[],"D:\\프로젝트\\react\\react-order\\src\\firebase.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\Login.js",["209","210"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport firebase from \"../firebase\";\nimport { Button, Input } from \"antd\";\nimport {ModalPopup} from \"./Admin/ModifyModal\"\n\nfunction Login() {\n  const { register, errors, handleSubmit } = useForm({\n    mode: \"onChange\",\n  });\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true);\n      await firebase\n        .auth()\n        .signInWithEmailAndPassword(data.email, data.password);\n      setLoading(false);\n    } catch (error) {\n      setErrorFromSubmit(error.message);\n      setLoading(false);\n      setTimeout(() => {\n        setErrorFromSubmit(\"\");\n      }, 5000);\n    }\n  };\n  const [errorFromSubmit, setErrorFromSubmit] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [InputEmail, setInputEmail] = useState(false);\n  const [InputPw, setInputPw] = useState(false);\n  const onInputEmail = (e) => {\n    setInputEmail(e.target.value);\n  };\n  const onInputPw = (e) => {\n    setInputPw(e.target.value);\n  };\n\n  const [PwChangeInput, setPwChangeInput] = useState('')\n  const OnPwChangeInput = (e) => {\n    setPwChangeInput(e.target.value)\n  }\n  const onPwChange = () => {\n    const auth = firebase.auth();\n    const emailAddress = PwChangeInput\n    console.log(emailAddress)\n    auth.sendPasswordResetEmail(emailAddress).then(function() {\n      alert('이메일로 비밀번호 변경 링크를 발송했습니다.')\n      onPwModal();\n    }).catch(function(error) {\n      alert('해당 이메일로 가입된 유저가 없습니다.')\n    });    \n  }\n\n  const [PwModal, setPwModal] = useState(false)\n  const onPwModal = () => {\n    setPwModal(!PwModal)\n  }\n\n  return (\n    <>\n      <div className=\"join-form-wrap\">\n        <form className=\"join-form\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"input-box\">\n            <input\n              name=\"email\"\n              type=\"email\"\n              id=\"email\"\n              onChange={onInputEmail}\n              ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\n            />\n            <label\n              htmlFor=\"email\"\n              className={\"place-holder \" + (InputEmail && \"on\")}\n            >\n              <span>이메일</span>\n            </label>          \n          </div>\n          <div className=\"input-box\">\n            <input\n              type=\"password\"\n              onChange={onInputPw}\n              name=\"password\"\n              id=\"password\"\n              ref={register({ required: true, minLength: 6 })}\n            />\n            <label\n              htmlFor=\"password\"\n              className={\"place-holder \" + (InputPw && \"on\")}\n            >\n              <span>비밀번호</span>\n            </label>\n            {errors.password && errors.password.type === \"required\" && (\n              <p>비밀번호를 입력해 주세요</p>\n            )}\n            {errors.password && errors.password.type === \"minLength\" && (\n              <p>비밀번호는 6글자 이상이어야 합니다.</p>\n            )}\n            {errorFromSubmit && <p>{errorFromSubmit}</p>}\n          </div>\n          <input type=\"submit\" value=\"로그인\" disabled={loading} />\n        </form>\n        <div style={{position:\"relative\",marginTop:\"10px\"}}>\n          <a href=\"javascript:;\" onClick={onPwModal}>비밀번호를 잊어버렸을때</a>\n          {\n            PwModal &&\n            <ModalPopup>\n              <h3 style={{fontWeight:\"bold\",textAlign:\"center\"}}>비밀번호 재설정</h3>\n              <Input placeholder=\"가입했던 이메일을 입력해 주세요\" type=\"text\" value={PwChangeInput} onChange={OnPwChangeInput} />\n              <div className=\"flex-box j-center\" style={{marginTop:\"10px\"}}>\n                <Button type=\"primary\" style={{marginRight:\"5px\"}} onClick={onPwChange}>이메일로 전송</Button>\n                <Button onClick={onPwModal}>닫기</Button>\n              </div>\n            </ModalPopup>\n          }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n",["211","212"],"D:\\프로젝트\\react\\react-order\\src\\component\\Nav.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { clearUser } from \"../redux/actions/user_action\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Input, Button } from \"antd\";\nimport * as bsIcon from \"react-icons/bs\";\nimport * as antIcon from \"react-icons/ai\";\nimport * as mdIcon from \"react-icons/md\";\nimport * as rmIcon from \"react-icons/ri\";\nimport firebase from \"../firebase\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport { OderModalPopup } from \"./OrderModal\";\nconst { SubMenu } = Menu;\nexport const BlackBg = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 50;\n  display: none;\n  @media all and (max-width: 760px) {\n    &.on {\n      display: block;\n    }\n  }\n`;\nfunction Nav() { \n  let dispatch = useDispatch();\n\n\n  const firebaseUserInfo = firebase.auth().currentUser;\n  let name, email, photoUrl, uid, emailVerified;\n  if (firebaseUserInfo != null) {\n    name = firebaseUserInfo.displayName;\n    email = firebaseUserInfo.email;\n    photoUrl = firebaseUserInfo.photoURL;\n    emailVerified = firebaseUserInfo.emailVerified;\n    uid = firebaseUserInfo.uid; \n  }\n\n  const currentUser = useSelector((state) => state.user.currentUser);\n\n  const [current, setCurrent] = useState(\"1\");\n\n  const handleClick = (e) => {\n    setCurrent(e.key);\n    setLeftMenu(!LeftMenu);\n  };\n\n  const [InfoPop, setInfoPop] = useState(false)\n  const onChangeInfo = () => {\n    setInfoPop(!InfoPop);\n  }\n\n  const [LeftMenu, setLeftMenu] = useState(false);\n  const onMenuHandler = () => {\n    setInfoPop(false);\n    setLeftMenu(!LeftMenu);\n  };\n\n  const onLogout = () => {\n    firebase.auth().signOut();\n  };\n  \n  \n  const timeDiff = (time) => {\n    let hour = parseInt(time.split(':')[0] * 60);\n    let min = parseInt(time.split(':')[1]);\n    return hour + min;\n  }\n\n  \n  const [AbleTime, setAbleTime] = useState();\n  const [CurAbleTime, setCurAbleTime] = useState(0);\n  const [TimeChange, setTimeChange] = useState(false);\n  const timeRef = useRef(false);\n\n  useEffect(() => {              \n    setTimeout(() => {\n      timeRef.current = !timeRef.current;      \n      setTimeChange(timeRef.current);\n    }, 2000);\n    const currentDay = moment().format('dddd');\n    const currentTime = moment().format('HH:mm');\n    const currentTimeNum = timeDiff(currentTime);\n    let mounted = true;\n    if (mounted) {   \n\n      firebase\n      .database()\n      .ref(\"time\")\n      .on(\"value\", (snapshot) => {\n        setAbleTime(snapshot.val());\n        let able = snapshot.val();\n        let ableKeys = Object.keys(able);\n        let newAble = {}\n        for (let i = 0; i < ableKeys.length; i++) {\n          const key = ableKeys[i]\n          const value = able[key]\n          newAble[key] = timeDiff(value);\n        }\n        if(currentTimeNum >= newAble.ableTimeStart && currentTimeNum < newAble.ableTimeEnd){\n          setCurAbleTime(1);\n          \n          if(currentTimeNum >= newAble.lunchTimeStart && currentTimeNum < newAble.lunchTimeEnd){\n            setCurAbleTime(2);\n          }\n          if(currentTimeNum >= newAble.breakTimeStart && currentTimeNum < newAble.breakTimeEnd){\n            setCurAbleTime(3);\n          }\n        }else{\n          setCurAbleTime(5)\n        }    \n        if(currentDay == '토요일' || currentDay == '일요일'){\n          setCurAbleTime(5)\n        }    \n      });\n\n    }\n    return function cleanup() {\n      firebase.database().ref(\"users\").off();\n      firebase.database().ref(\"time\").off();\n      mounted = false;\n    };\n  }, [TimeChange])\n\n  const [submitLoading, setsubmitLoading] = useState(false);\n  const onSubmitInfo = async (e) => {\n    e.preventDefault();\n    let sosok = e.target.sosok.value;\n    let part = e.target.part.value;\n    firebaseUserInfo.updateProfile({\n      photoURL:part\n    })\n    let call_num = e.target.call_number.value;\n    if(isNaN(call_num)){\n      alert('숫자만 입력해 주세요');\n      return;\n    }\n    if(call_num.length != 11){\n      alert('올바른 번호가 아닙니다');\n      return;\n    }\n    setsubmitLoading(true);\n    try{\n      let user = firebase.auth().currentUser;\n      user.updateProfile({\n        phoneNumber: \"01055278712\"\n      }).then(function() {\n        alert('업데이트 되었습니다.');\n      }).catch(function(error) {\n        console.error(error);\n      });  \n      await firebase\n      .database()\n      .ref(\"users\")\n      .child(currentUser.uid)\n      .update({\n        call_number: call_num,\n        part: part,\n        sosok: sosok\n      })\n      setInfoPop(false)\n    }catch (error) {\n      console.error(error);\n    }\n    setsubmitLoading(false);\n  }\n\n  if (currentUser) {\n    return (\n      <>\n        {!LeftMenu && (\n          <bsIcon.BsList className=\"btn-m-menu\" onClick={onMenuHandler} />\n        )}\n        {LeftMenu && (\n          <bsIcon.BsX className=\"btn-m-close\" onClick={onMenuHandler} />\n        )}\n        <div className={\"left-nav-menu \" + (LeftMenu && \"on\")}>\n          <div className=\"nav-top-box\">\n            {!currentUser && (\n              <>\n                <Link to=\"/login\" onClick={onMenuHandler}>\n                  login\n                </Link>\n                <Link to=\"/join\" onClick={onMenuHandler}>\n                  join\n                </Link>\n              </>\n            )}\n            {currentUser && (\n              <>\n                {InfoPop &&\n                  <OderModalPopup className=\"call_modify\" style={{\n                    top:\"180px\",\n                    left:\"155px\",\n                    position:\"absolute\",\n                  }}>\n                    <form className=\"order-form-box\" onSubmit={onSubmitInfo}>\n                      <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\n                        <span className=\"tit\">이메일</span>\n                        <span>{currentUser.email}</span>\n                      </div>\n                      <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\n                        <span className=\"tit\">소속</span>\n                        <select\n                          name=\"sosok\"\n                          defaultValue={currentUser.sosok}\n                        >\n                          <option value=\"\">\n                            소속선택\n                          </option>\n                          <option value=\"1\">미트리</option>\n                          <option value=\"2\">푸드킹</option>\n                          <option value=\"3\">계약직</option>\n                        </select>\n                      </div>\n                      <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\n                        <span className=\"tit\">부서</span>\n                        <select\n                          name=\"part\"\n                          defaultValue={photoUrl}\n                        >\n                          <option value=\"photoUrl\" disabled hidden>\n                            부서\n                          </option>\n                          <option value=\"R&D\">R&D</option>\n                          <option value=\"전략기획부\">전략기획부</option>\n                          <option value=\"영업지원부\">영업지원부</option>\n                          <option value=\"인사재경부\">인사재경부</option>\n                          <option value=\"IT개발부\">IT개발부</option>\n                          <option value=\"푸드킹\">푸드킹</option>\n                          <option value=\"물류부\">물류부</option>\n                          <option value=\"카페부\">카페부</option>\n                        </select>\n                      </div>\n                      <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\n                      <span className=\"tit\">휴대전화</span>\n                        <Input name=\"call_number\" defaultValue={currentUser.call_number} style={{marginRight:\"5px\"}}></Input>\n                        <Button\n                          disabled={submitLoading}\n                          htmlType=\"submit\"\n                          type=\"primary\"\n                        >수정</Button>\n                      </div>\n                      <span>'-'이나 공백없이 숫자만 입력해 주세요.</span>\n                    </form>\n                  </OderModalPopup>\n                }\n                <div className=\"flex-box j-center\">\n                  <span className=\"p-color-l\"\n                    onClick={onChangeInfo}\n                    style={{\n                      cursor: \"pointer\",\n                      fontWeight: \"500\",\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    {currentUser.displayName}\n                  </span>\n                  님 반갑습니다.                  \n                  <span\n                    onClick={onLogout}\n                    className=\"p-color-l\"\n                    style={{\n                      cursor: \"pointer\",\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    logout\n                  </span>\n                </div>\n              </>\n            )}\n          </div>\n          <Menu\n            theme={\"light\"}\n            onClick={handleClick}\n            defaultOpenKeys={[\"sub1\"]}\n            selectedKeys={[current]}\n            mode=\"inline\"\n          >\n            <Menu.Item key=\"1\">\n              <Link to=\"/\">\n                <antIcon.AiOutlineCoffee />\n                메뉴판\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Link to=\"/myorder\">\n                <antIcon.AiOutlineOrderedList />\n                주문내역\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Link to=\"/mymenu\">\n                <antIcon.AiOutlineStar />\n                마이메뉴\n              </Link>\n            </Menu.Item>\n            {(currentUser && currentUser.role >= 0) &&\n            <Menu.Item key=\"7\">\n              <Link to=\"/lunch\">\n                <antIcon.AiOutlineDownSquare />\n                식단체크\n              </Link>\n            </Menu.Item>\n            }\n            {(currentUser?.auth && currentUser.auth.includes('insa') || currentUser.uid === \"HWC2atFlYZfThocHHF7SH4a6MAt2\") && \n            <Menu.Item key=\"9\">\n              <Link to=\"/research\">\n                <antIcon.AiOutlineFileDone />\n                설문조사\n              </Link>\n            </Menu.Item>\n            }\n            {(currentUser?.auth && currentUser.auth.includes('intern')) ||\n            <Menu.Item key=\"10\">\n              <Link to=\"/hair\">\n                <antIcon.AiOutlineScissor />\n                헤어\n              </Link>\n            </Menu.Item>\n            }\n            {(currentUser?.auth && currentUser.auth.includes('wel') || currentUser && currentUser.role > 2) &&\n            <Menu.Item key=\"13\">\n              <Link to=\"/chair\">\n                <mdIcon.MdOutlineChair />\n                안마의자\n              </Link>\n            </Menu.Item>\n            }\n            {(currentUser?.auth && currentUser.auth.includes('wel') || currentUser && currentUser.role > 2) &&\n            <Menu.Item key=\"15\">\n              <Link to=\"/styler\">\n                <rmIcon.RiTShirtAirLine />\n                스타일러\n              </Link>\n            </Menu.Item>\n            }\n            {(currentUser?.auth && currentUser.auth.includes('insa') ||currentUser?.auth && currentUser.role > 2) &&\n            <Menu.Item key=\"17\">\n              <Link to=\"/inventory\">\n                <mdIcon.MdOutlineInventory />\n                재고체크\n              </Link>\n            </Menu.Item>\n            }\n            {currentUser.role > 0 &&\n            (\n              <SubMenu\n                key=\"sub1\"\n                title=\"관리자\"\n                icon={<antIcon.AiOutlineSetting />}\n              >       \n                {\n                  currentUser.auth && currentUser.auth.includes('hair') &&\n                  <Menu.Item key=\"11\">\n                    <Link to=\"/admin/hair\">\n                      <antIcon.AiOutlineScissor />\n                      헤어관리\n                    </Link>\n                  </Menu.Item>  \n                }\n                {(currentUser?.auth && currentUser.auth.includes('wel') || currentUser && currentUser.role > 2) &&\n                  <>\n                  <Menu.Item key=\"14\">\n                    <Link to=\"/chair_admin\">\n                      <mdIcon.MdOutlineChair />\n                      안마의자관리\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"16\">\n                  <Link to=\"/styler_admin\">\n                      <rmIcon.RiTShirtAirLine />\n                      스타일러관리\n                    </Link>\n                  </Menu.Item>\n                  </>\n                }          \n                {currentUser.role > 1 &&\n                  <>\n                    <Menu.Item key=\"8\">\n                      <Link to=\"/admin/lunch\">\n                        <antIcon.AiOutlineAppstoreAdd />\n                        식단관리\n                      </Link>\n                    </Menu.Item>                \n                    <Menu.Item key=\"4\">\n                      <Link to=\"/admin/prod\">\n                        <antIcon.AiOutlineAppstoreAdd />\n                        상품관리\n                      </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"12\">\n                      <Link to=\"/admin/prod_count\">\n                        <antIcon.AiOutlineAppstoreAdd />\n                        카페 재고관리\n                      </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"5\">\n                      <Link to=\"/admin/order\">\n                        <antIcon.AiOutlineAlert />\n                        주문관리\n                      </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"6\">\n                      <Link to=\"/admin/order_list\">\n                        <antIcon.AiOutlineFileDone />\n                        완료내역\n                      </Link>\n                    </Menu.Item>\n                  </>\n                }\n                {(currentUser?.auth && currentUser.auth.includes('insa') ||currentUser?.auth && currentUser.role > 2) &&\n                <>\n                  <Menu.Item key=\"18\">\n                    <Link to=\"/admin/inventory\">\n                      <mdIcon.MdOutlineInventory2 />\n                      비품관리\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"0\">\n                    <Link to=\"/admin/user_admin\">\n                      <antIcon.AiOutlineTeam />\n                      회원관리\n                    </Link>\n                  </Menu.Item>\n                </>\n                }\n              </SubMenu>\n            )}\n          </Menu>          \n          {AbleTime && CurAbleTime && (\n          <div className=\"nav-time\">\n              <span className={\"current\"+\" state_\"+CurAbleTime}>\n                <span>Now</span>\n              </span>\n              <ul>\n                {AbleTime.ableTimeStart &&\n                <li className={CurAbleTime === 1 ? \"cur\" : \"\"}><span>운영시간</span> - {AbleTime.ableTimeStart}~{AbleTime.ableTimeEnd}</li>\n                }\n                {AbleTime.lunchTimeStart &&\n                <li className={CurAbleTime === 2 ? \"cur\" : \"\"}><span>점심시간</span> - {AbleTime.lunchTimeStart}~{AbleTime.lunchTimeEnd}</li>\n                }\n                {AbleTime.breakTimeStart &&\n                <li className={CurAbleTime === 3 ? \"cur\" : \"\"}><span>브레이크</span> - {AbleTime.breakTimeStart}~{AbleTime.breakTimeEnd}</li>\n                }\n              </ul>\n          </div>\n          )}\n        </div>\n        <BlackBg className={LeftMenu && \"on\"} onClick={onMenuHandler} />\n      </>\n    );\n  } else {\n    return (\n      <>        \n        {!LeftMenu && (\n          <bsIcon.BsList className=\"btn-m-menu\" onClick={onMenuHandler} />\n        )}\n        {LeftMenu && (\n          <bsIcon.BsX className=\"btn-m-close\" onClick={onMenuHandler} />\n        )}\n        <div className={\"left-nav-menu \" + (LeftMenu && \"on\")}>\n          <div className=\"nav-top-box\">\n            {!currentUser && (\n              <>\n                <Link to=\"/login\" onClick={onMenuHandler}>\n                  login\n                </Link>\n                <Link to=\"/join\" onClick={onMenuHandler}>\n                  join\n                </Link>\n              </>\n            )}\n            {currentUser && (\n              <>\n                <div className=\"flex-box j-center\">                  \n                  {currentUser.displayName}님 반갑습니다.\n                  <span \n                    class=\"p-color-l\"\n                    onClick={onLogout}\n                    style={{\n                      cursor: \"pointer\",\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    logout\n                  </span>\n                </div>\n              </>\n            )}\n          </div>\n          <Menu\n            theme={\"light\"}\n            onClick={handleClick}\n            defaultOpenKeys={[\"sub1\"]}\n            selectedKeys={[current]}\n            mode=\"inline\"\n          >\n            <div\n              style={{\n                height: \"100%\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              비회원 사용불가\n            </div>\n          </Menu>\n          <BlackBg className={LeftMenu && \"on\"} onClick={onMenuHandler} />\n        </div>\n      </>\n    );\n  }\n}\nexport default Nav;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Loading.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\MyOrder.js",["245","246","247"],"import { Button } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport firebase, {old} from \"../firebase\";\r\nimport { Popover,message } from \"antd\";\r\nimport { commaNumber,notify,getFormatDate } from \"./CommonFunc\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { OrderBox } from \"./Admin/AdminOrder\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport Loading from \"./Loading\";\r\nimport { Empty,DatePicker } from \"antd\";\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction MyOrder() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [OrderList, setOrderList] = useState([]);\r\n  const [Nodata, setNodata] = useState(false);\r\n\r\n  const [StartDate, setStartDate] = useState(20210101);\r\n  const [EndDate, setEndDate] = useState(21210101);\r\n\r\n  const [ReRender, setReRender] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n        .database()\r\n        .ref(\"order\")\r\n        .orderByChild(\"order_uid\")\r\n        .equalTo(userInfo.uid)\r\n        .on(\"value\", (snapshot) => {\r\n          let array = [];\r\n          snapshot.forEach(function (item) {\r\n            let date =  item.val().order_time.split('-')\r\n            date = parseInt(date[0]+ '' + date[1] + date[2].split(' ')[0]);\r\n            let date2 =  item.val().order_time.split(' ');            \r\n            date2 = new Date(date2[0]+'T'+date2[1].split('|')[0]).getTime()\r\n            array.push({\r\n              ...item.val(),\r\n              key: item.key,\r\n              order_date: date,\r\n              timestamp: date2\r\n            });\r\n          });\r\n          // eslint-disable-next-line array-callback-return\r\n          array.sort((a, b) => {\r\n            if (a.timestamp < b.timestamp) {\r\n              return 1;\r\n            }\r\n            if (a.timestamp > b.timestamp) {\r\n              return -1;\r\n            }\r\n          });\r\n          array = array.filter(el => {\r\n            return StartDate <= el.order_date && el.order_date <= EndDate;\r\n          })\r\n          array = array.slice(0,30)\r\n          setOrderList(array);\r\n          if (array.length === 0) {\r\n            setNodata(true);\r\n          }\r\n          notify('주문상태가 변경되었습니다.')\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      firebase.database().ref(\"order\").off();\r\n      mounted = false;\r\n    };\r\n  }, [ReRender]);\r\n\r\n  const orderCancel = (key,uid) => {\r\n    if (window.confirm(\"주문 취소 하시겠습니까?\")) {\r\n      firebase.database().ref(\"order\").child(key).remove()\r\n      firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .child(uid)\r\n        .transaction((pre) => {\r\n          if(pre.jaego >= 0){\r\n            pre.jaego++;\r\n            return pre;\r\n          }\r\n        });\r\n        message.success('주문이 취소되었습니다.');\r\n    }\r\n  }\r\n\r\n  const onDateChange = (e) => {\r\n    if(e){\r\n      setStartDate(getFormatDate(e[0]._d).full)\r\n      setEndDate(getFormatDate(e[1]._d).full)\r\n      setReRender(!ReRender)\r\n    }\r\n  }\r\n\r\n\r\n  const dbDel = () => {\r\n    firebase.database().ref('order')\r\n    .once(\"value\",data=>{\r\n      data.forEach(el=>{                                \r\n        if(el.val().timestamp < (new Date().getTime() - 2592000000)){\r\n          firebase.database().ref(`order/${el.key}`).remove()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  if (OrderList.length) {\r\n    return (\r\n      <> \r\n        {userInfo && userInfo.role > 2 &&\r\n          <Button onClick={dbDel}>old delete</Button>\r\n        }\r\n        <div className=\"flex-box a-center\">\r\n          <RangePicker onChange={onDateChange} />\r\n          <span style={{color:\"#999\",fontSize:\"12px\",marginLeft:\"5px\"}}>*최근 한달안의 데이터만 검색 가능합니다.</span>\r\n        </div>\r\n        <OrderBox className=\"order-list-box\">\r\n          {OrderList.map((list, index) => (\r\n            <div className={`user list state_${list.order_state}`} key={index}>\r\n              {list.prod_img ? (\r\n                <div className=\"order-prod-img\">\r\n                  <img src={list.prod_img} /> \r\n                </div>\r\n              ):(\r\n                <div className=\"order-prod-img no-img\">\r\n                  <antIcon.AiOutlineCoffee />\r\n                </div>\r\n              )\r\n              }\r\n              <div className=\"prod\">\r\n                <div className=\"info-box\">\r\n                  <span className=\"info\">\r\n                    {list.prod_name}{list.prod_option ? `-${list.prod_option}`:\"\"}\r\n                  </span>\r\n                  {list.hot === \"hot\" ? (\r\n                    <span className=\"ic-hot shrink-0\"></span>\r\n                  ) : list.hot === \"ice\" ? (\r\n                    <span className=\"ic-ice shrink-0\"></span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {/* <span className=\"info shrink-0\">{list.amount}개</span> */}\r\n                  <div>\r\n                    {list.add && (\r\n                      <span className=\"info shrink-0\">{list.add}</span>\r\n                    )}\r\n                    {list.add2 && (\r\n                      <span className=\"info shrink-0\">{list.add2}</span>\r\n                    )}\r\n                    {list.milk && (\r\n                      <span className=\"info shrink-0\">{list.milk}</span>\r\n                    )}\r\n                  </div>\r\n                  {list.order_etc && (\r\n                    <Popover content={list.order_etc} trigger=\"click\">\r\n                      <Button type=\"default\">기타</Button>\r\n                    </Popover>\r\n                  )}\r\n                </div>\r\n                <span className=\"shrink-0\">{commaNumber(parseInt(list.price))}원</span>\r\n              </div>\r\n              <div className=\"state\">\r\n                <span className=\"date\">\r\n                  {list.order_time.split(\"|\")[0]}&nbsp; (\r\n                  {list.order_time.split(\"|\")[1]})\r\n                </span>\r\n                <span className=\"setting\">\r\n                  {list.order_state === 0 &&\r\n                  <>\r\n                    <Button\r\n                      className=\"btn-cancel\"\r\n                      style={{marginRight:\"5px\"}}\r\n                      onClick={() => {\r\n                        orderCancel(list.key,list.prod_uid);\r\n                      }}\r\n                    >\r\n                      주문취소\r\n                    </Button>\r\n                    대기중\r\n                    </>\r\n                    }\r\n                  {list.order_state === 1 && \"주문접수\"}\r\n                  {list.order_state === 2 && \"완료\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </OrderBox>\r\n      </>\r\n    );\r\n  } else if (Nodata) {\r\n    return (\r\n      <>\r\n        <Empty\r\n          description=\"주문내역이 없습니다.\"\r\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n        ></Empty>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Loading />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyOrder;\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Join.js",["248","249"],"import { message } from \"antd\";\nimport React, { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport firebase from \"../firebase\";\n\nfunction Join() {\n  const { register, handleSubmit, watch, errors } = useForm({\n    mode: \"onChange\",\n  });\n  const [errorFromSubmit, setErrorFromSubmit] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const password = useRef();\n  password.current = watch(\"password\");\n  const onSubmit = async (data) => {\n    \n    data.part == 1 && alert('부서를 선택해 주세요')\n    try {\n      setLoading(true);\n      let createdUser = await firebase\n        .auth()\n        .createUserWithEmailAndPassword(data.email, data.password);\n\n      await createdUser.user.updateProfile({\n        displayName: data.name,\n        photoURL: data.part,\n      });\n\n      //Firebase 데이터베이스에 저장해주기\n      await firebase.database().ref(\"users\").child(createdUser.user.uid).set({\n        name: createdUser.user.displayName,\n        part: createdUser.user.photoURL,\n        call_number: data.call_number,\n        email: data.email,\n        role: 0,\n        auth: \"intern\",\n      });\n      setLoading(false);\n      \n      window.location.reload();\n    } catch (error) {\n      setErrorFromSubmit(error.message);\n      setTimeout(() => {\n        setErrorFromSubmit(\"\");\n        setLoading(false);\n      }, 3000);\n    }\n  };\n\n  watch(\"name\");\n  watch(\"email\");\n  watch(\"call_number\");\n  watch(\"password\");\n  watch(\"password2\");\n\n  const [InputName, setInputName] = useState(false);\n  const [InputEmail, setInputEmail] = useState(false);\n  const [InputPhone, setInputPhone] = useState(false);\n  const [InputPw, setInputPw] = useState(false);\n  const [InputPw2, setInputPw2] = useState(false);\n\n  const onInputName = (e) => {\n    setInputName(e.target.value);\n  };\n  const onInputEmail = (e) => {\n    setInputEmail(e.target.value);\n  };\n  const onInputPhone = (e) => {\n    setInputPhone(e.target.value);\n  };\n  const onInputPw = (e) => {\n    setInputPw(e.target.value);\n  };\n  const onInputPw2 = (e) => {\n    setInputPw2(e.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"join-form-wrap\">\n        <form className=\"join-form\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"input-box\">\n            <input\n              type=\"text\"\n              onChange={onInputName}\n              name=\"name\"\n              id=\"name\"\n              ref={register({ required: true })}\n            />\n            <label\n              htmlFor=\"name\"\n              className={\"place-holder \" + (InputName && \"on\")}\n            >\n              <span>이름</span>\n            </label>\n            {errors.name && errors.name.type === \"required\" && (\n              <p>이름을 입력해 주세요</p>\n            )}\n          </div>\n          <div className=\"input-box\">\n            <input\n              name=\"email\"\n              type=\"email\"\n              id=\"email\"\n              onChange={onInputEmail}\n              ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\n            />\n            <label\n              htmlFor=\"email\"\n              className={\"place-holder \" + (InputEmail && \"on\")}\n            >\n              <span>이메일</span>\n            </label>\n            <span style={{color:\"#888\",fontSize:\"12px\",display:\"block\",paddingLeft:\"10px\",marginTop:\"3px\"}}>※ 실제 사용중인 이메일로 가입 바랍니다(비밀번호 재설정 시 필요)</span>\n            {errors.email && errors.email.type === \"required\" && (\n              <p>이메일을 입력해 주세요</p>\n            )}\n            {errors.email && errors.email.type === \"pattern\" && (\n              <p>이메일 형식이 맞지 않습니다.</p>\n            )}\n          </div>\n          <div className=\"input-box\">\n            <input\n              name=\"call_number\"\n              type=\"number\"\n              id=\"call_number\"\n              onChange={onInputPhone}\n              ref={register({ required: true, minLength: 11, maxLength:11 })}\n            />\n            <label\n              htmlFor=\"call_number\"\n              className={\"place-holder \" + (InputPhone && \"on\")}\n            >\n              <span>휴대전화</span>\n            </label>\n            <span style={{color:\"#888\",fontSize:\"12px\",display:\"block\",paddingLeft:\"10px\",marginTop:\"3px\"}}>※ 실제 사용중인 휴대전화로 가입 바랍니다.(카카오톡 연동기능에 필요)</span>\n            {errors.call_number && errors.call_number.type === \"required\" && (\n              <p>휴대전화 번호를 입력해 주세요</p>\n            )}\n            {errors.call_number && errors.call_number.type === \"minLength\" && (\n              <p>자리수를 확인해 주세요</p>\n            )}\n            {errors.call_number && errors.call_number.type === \"maxLength\" && (\n              <p>자리수를 확인해 주세요</p>\n            )}\n          </div>\n          <div className=\"input-box radio\">\n            <div className=\"flex-box\">\n              <input type=\"radio\" className=\"custom-radio\" name=\"sosok\" id=\"sosok1\" value=\"1\" ref={register({ required: true })} />\n              <label for=\"sosok1\">미트리</label>\n              <input type=\"radio\" className=\"custom-radio\" name=\"sosok\" id=\"sosok2\" value=\"2\" ref={register({ required: true })} />\n              <label for=\"sosok2\">푸드킹</label>\n              <input type=\"radio\" className=\"custom-radio\" name=\"sosok\" id=\"sosok3\" value=\"3\" ref={register({ required: true })} />\n              <label for=\"sosok3\">계약직</label>\n            </div>\n            {errors.sosok && <p>소속을 선택해 주세요</p>}\n          </div>\n          <div className=\"input-box\">\n            <select\n              name=\"part\"\n              defaultValue=\"1\"\n              ref={register({ required: true })}\n            >\n              <option value=\"1\" disabled hidden>\n                부서\n              </option>\n              <option value=\"R&D\">R&D</option>\n              <option value=\"전략기획부\">전략기획부</option>\n              <option value=\"영업지원부\">영업지원부</option>\n              <option value=\"인사재경부\">인사재경부</option>\n              <option value=\"IT개발부\">IT개발부</option>\n              <option value=\"푸드킹\">푸드킹</option>\n              <option value=\"물류부\">물류부</option>\n              <option value=\"카페부\">카페부</option>\n            </select>\n            {errors.part && <p>부서를 선택해 주세요</p>}\n          </div>\n          <div className=\"input-box\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              onChange={onInputPw}\n              ref={register({ required: true, minLength: 6 })}\n            />\n            <label\n              htmlFor=\"password\"\n              className={\"place-holder \" + (InputPw && \"on\")}\n            >\n              <span>비밀번호</span>\n            </label>\n            {errors.password && errors.password.type === \"required\" && (\n              <p>비밀번호를 입력해 주세요</p>\n            )}\n            {errors.password && errors.password.type === \"minLength\" && (\n              <p>비밀번호는 최소 6글자이상 이어야 합니다.</p>\n            )}\n          </div>\n          <div className=\"input-box\">\n            <input\n              type=\"password\"\n              name=\"password2\"\n              id=\"password2\"\n              onChange={onInputPw2}\n              ref={register({\n                required: true,\n                validate: (value) => value === password.current,\n              })}\n            />\n            <label\n              htmlFor=\"password2\"\n              className={\"place-holder \" + (InputPw2 && \"on\")}\n            >\n              <span>비밀번호 확인</span>\n            </label>\n            {errors.password2 && errors.password2.type === \"required\" && (\n              <p>비밀번호 확인을 입력해 주세요</p>\n            )}\n            {errors.password2 && errors.password2.type === \"validate\" && (\n              <p>비밀번호가 일치하지 않습니다.</p>\n            )}\n            {errorFromSubmit && <p>{errorFromSubmit}</p>}\n          </div>\n          <input type=\"submit\" value=\"회원가입\" disabled={loading} />\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default Join;\n","D:\\프로젝트\\react\\react-order\\src\\component\\CommonFunc.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\Menu.js",["250","251","252","253","254","255","256","257"],"D:\\프로젝트\\react\\react-order\\src\\component\\MyMenu.js",["258","259","260","261","262","263","264","265","266"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"../firebase\";\nimport { ProdList } from \"./Admin/AdminProd\";\nimport OderModalPopup from \"./OrderModal\";\nimport * as antIcon from \"react-icons/ai\";\nimport { commaNumber,getFormatDate } from \"./CommonFunc\";\nimport { useSelector } from \"react-redux\";\nimport Loading from \"./Loading\";\n\nconst curDate = getFormatDate(new Date());\nfunction MyMenu() {\n  const userInfo = useSelector((state) => state.user.currentUser);\n\n  const [FavorItem, setFavorItem] = useState([]);\n  const [ProdItem, setProdItem] = useState([]);\n  const [AddFavorItem, setAddFavorItem] = useState([]);\n  const [SortItem, setSortItem] = useState(false);\n\n  const onToggleFavor = (e, name) => {\n    e.currentTarget.closest(\".list\").remove();\n    e.currentTarget.classList.toggle(\"true\");\n    firebase\n      .database()\n      .ref(\"users\")\n      .child(userInfo.uid)\n      .child(`favorite/${name}/add_favor`)\n      .transaction((pre) => {\n        return !pre;\n      });\n  };\n  let b_soldout;\n  let m_soldout;\n  let m_soldout2;\n\n  const [TodayLunchCheck, setTodayLunchCheck] = useState();\n\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n  \n\n      async function getProdItem() {\n        let favor = [];\n        let favorName = [];\n        await firebase\n          .database()\n          .ref(\"soldout\")\n          .once(\"value\")\n          .then((snapshot) => {            \n            b_soldout = snapshot.val().b_soldout;\n            m_soldout = snapshot.val().MilkSoldout;\n            m_soldout2 = snapshot.val().MilkSoldout2;\n          });\n        await firebase\n          .database()\n          .ref(`users/${userInfo.uid}/favorite`)\n          .orderByChild(\"count\")\n          .startAt(1)\n          .once(\"value\")\n          .then((snapshot) => {\n            snapshot.forEach(function (item) {\n              favorName.push(item.key);\n              favor.push({\n                name: item.key,\n                count: item.val().count,\n              });\n            });\n          });\n        setFavorItem(favor);\n        await firebase\n          .database()\n          .ref(\"products\")\n          .once(\"value\")\n          .then((snapshot) => {\n            let array = [];\n            snapshot.forEach(function (item) {\n              array.push({\n                uid: item.key,\n                name: item.val().name,\n                option: item.val().option,\n                kal: item.val().kal,\n                hot: item.val().hot,\n                milk: item.val().milk,                \n                category: item.val().category,\n                image: item.val().image,\n                price: parseInt(item.val().price),\n                add: item.val().add,\n                b_soldout: b_soldout,\n                m_soldout: m_soldout,\n                m_soldout2: m_soldout2,\n                soldout: item.val().soldout,\n                sort_num: item.val().sort_num ? item.val().sort_num : 9999,\n                jaego: item.val().jaego ? item.val().jaego : \n                       item.val().jaego === 0 ? 0 : \"\",\n              });\n            });\n            setProdItem(array);\n          });\n        setSortItem(true);\n        if (FavorItem && ProdItem) {\n          let array = ProdItem.concat();\n          array = array.filter((el) => {\n            return favorName.includes(el.name);\n          });\n          let assignArr = [];\n          array.map(el => {\n            favor.map((item) => {\n              item.name === el.name && assignArr.push(Object.assign(item, el));\n            });\n          });\n          assignArr.sort((a, b) => {\n            if (a.count > b.count) {\n              return -1;\n            }\n            if (a.count < b.count) {\n              return 1;\n            }\n            return 0;\n          });\n          assignArr = assignArr.slice(0, 10);\n          setProdItem(assignArr);\n        }\n\n      }\n      getProdItem();\n      //즐찾\n      async function getFavorItem() {\n        let addFavor = [];\n        let addFavorName = [];\n        let array = [];\n        await firebase\n          .database()\n          .ref(`users/${userInfo.uid}/favorite`)\n          .orderByChild(\"add_favor\")\n          .equalTo(true)\n          .once(\"value\")\n          .then((snapshot) => {\n            snapshot.forEach(function (item) {\n              addFavorName.push(item.key);\n              addFavor.push({\n                name: item.key,\n                add_favor: item.val().add_favor,\n              });\n            });\n          });\n        await firebase\n          .database()\n          .ref(\"products\")\n          .once(\"value\")\n          .then((snapshot) => {\n            snapshot.forEach(function (item) {\n              array.push({\n                uid: item.key,\n                name: item.val().name,\n                option: item.val().option,\n                kal: item.val().kal,\n                hot: item.val().hot,\n                milk: item.val().milk,                \n                category: item.val().category,\n                image: item.val().image,\n                price: parseInt(item.val().price),\n                add: item.val().add,\n                b_soldout: b_soldout,\n                m_soldout: m_soldout,\n                m_soldout2: m_soldout2,\n                soldout: item.val().soldout,\n                sort_num: item.val().sort_num ? item.val().sort_num : 9999,\n              });\n            });\n          });\n          \n        array = array.filter((el) => {\n          return addFavorName.includes(el.name);\n        });\n        array.map((el) => {\n          addFavor.map((favor) => {\n            favor.name === el.name && Object.assign(favor, el);\n          });\n          return addFavor;\n        });\n        array.sort((a, b) => {\n          return a.sort_num - b.sort_num;\n        });\n        setAddFavorItem(array);\n      }\n      getFavorItem();\n    }\n    return function cleanup() {\n      mounted = false;\n    };\n  }, [SortItem]);\n\n  const [PosX, setPosX] = useState(0);\n  const [PosY, setPosY] = useState(0);\n  const [OnModal, setOnModal] = useState(false);\n  const [OrderItem, setOrderItem] = useState();\n  const orderHandler = (e, item) => {\n    /*\n    if(TodayLunchCheck && !TodayLunchCheck.confirm){\n      alert('식단체크를 먼저 해야 주문이 가능합니다.');\n      return;\n    }\n    */\n    if (e.target.tagName !== \"svg\" && e.target.tagName !== \"path\") {\n      if (b_soldout === false) {\n        item.add = \"\";\n      }\n      setOrderItem(item);\n      setPosX(e.clientX);\n      setPosY(e.clientY);\n      setOnModal(true);\n    }\n  };\n  \n  const onFinished = () => {\n    setOnModal(false);\n  };\n\n  return (\n    <>\n      <h3 className=\"title\">즐겨찾기 메뉴</h3>\n      {AddFavorItem ? (\n        <ProdList>\n          {AddFavorItem.map((item, index) => (\n            <div\n              style={{ cursor: \"pointer\",position:\"relative\" }}\n              className={`ani-fadein list delay-${index}`}\n              key={index}              \n            >\n              {item.soldout === false && (\n                <div\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    position: \"absolute\",\n                    left: \"0\",\n                    top: \"0\",\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    color: \"#fff\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    background: \"rgba(0,0,0,0.5)\",\n                    zIndex: \"10\",\n                  }}\n                >\n                  sold out\n                </div>\n              )}\n              <div className=\"img\" onClick={(e) => orderHandler(e, item)}>\n                <span style={{ opacity: \"0.85\" }} className=\"kal\">\n                  {item.kal}kal\n                </span>\n                <img src={item.image} alt=\"\" />\n              </div>\n              <div className=\"user-box\" onClick={(e) => orderHandler(e, item)}>\n                <div className=\"txt\" style={{ padding: \"0 5px\" }}>\n                  <div className=\"flex-box between\">\n                    <span className=\"name\">\n                      {item.name}\n                      <span className=\"hidden\">{item.uid}</span>\n                      {(item.jaego > 0 && item.jaego < 6) && (\n                      <div style={{fontSize:\"12px\",color:\"red\"}}>품절임박 - 잔여수량 : {item.jaego}</div>\n                      )}\n                    </span>\n                    <span\n                      className=\"ic-favor true p-color\"\n                      onClick={(e) => {\n                        onToggleFavor(e, item.name);\n                      }}\n                    >\n                      <antIcon.AiFillStar className=\"favor\" />\n                    </span>\n                  </div>\n                  <div className=\"flex-box between a-center\">\n                    <span className=\"hot\">{item.hot}</span>\n                    <span\n                      style={{\n                        textDecoration: \"line-through\",\n                        color: \"#888\",\n                      }}\n                      className=\"price\"\n                    >\n                      {commaNumber(item.price)}원\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </ProdList>\n      ) : (\n        <>\n          <Loading />\n        </>\n      )}\n      <h3 className=\"title\" style={{ marginTop: \"30px\" }}>\n        내가 많이 주문한 메뉴 TOP 10\n      </h3>\n      {SortItem ? (\n        <ProdList>\n          {ProdItem.map((item, index) => (\n            <div\n              style={{ cursor: \"pointer\",position:\"relative\" }}\n              className={`ani-fadein list delay-${index}`}\n              key={index}              \n            >\n              {item.soldout === false && (\n                <div\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    position: \"absolute\",\n                    left: \"0\",\n                    top: \"0\",\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    color: \"#fff\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    background: \"rgba(0,0,0,0.5)\",\n                    zIndex: \"100\",\n                  }}\n                >\n                  sold out\n                </div>\n              )}\n              <div className=\"img\" onClick={(e) => orderHandler(e, item)}>\n                <span style={{ opacity: \"0.85\" }} className=\"kal\">\n                  {item.kal}kal\n                </span>\n                <span\n                  style={{\n                    position: \"absolute\",\n                    left: \"0\",\n                    top: \"0\",\n                    zIndex: \"10\",\n                    padding:\"0 7px\",\n                    height: \"26px\",\n                    background: \"#333\",\n                    textAlign: \"center\",\n                    lineHeight: \"26px\",\n                    fontSize: \"12px\",\n                    borderBottomRightRadius: \"6px\",\n                    color: \"#fff\",\n                  }}\n                >\n                  {index + 1}위  \n                  <span style={{fontSize:\"11px\"}}> ({item.count}회 주문)</span>\n                </span>\n                <img src={item.image} alt=\"\" />\n              </div>\n              <div className=\"user-box\" onClick={(e) => orderHandler(e, item)}>\n                <div className=\"txt\" style={{ padding: \"0 5px\" }}>\n                  <span className=\"name\">\n                    {item.name}\n                    <span className=\"hidden\">{item.uid}</span>\n                    {(item.jaego > 0 && item.jaego < 6) && (\n                    <div style={{fontSize:\"12px\",color:\"red\"}}>품절임박 - 잔여수량 : {item.jaego}</div>\n                    )}\n                  </span>\n                  <div className=\"flex-box between a-center\">\n                    <span className=\"hot\">{item.hot}</span>\n                    <span\n                      style={{\n                        textDecoration: \"line-through\",\n                        color: \"#888\",\n                      }}\n                      className=\"price\"\n                    >\n                      {commaNumber(item.price)}원\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </ProdList>\n      ) : (\n        <>\n          <Loading />\n        </>\n      )}\n      {OnModal && (\n        <OderModalPopup\n          onFinished={onFinished}\n          posx={PosX}\n          posy={PosY}\n          OrderItem={OrderItem}\n        />\n      )}\n    </>\n  );\n}\n\nexport default MyMenu;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Test.js",["267","268"],"import React, { useState, useEffect } from \"react\";\r\nimport SignaturePad from \"signature_pad\";\r\n\r\nfunction Test() {\r\n  useEffect(() => {\r\n    var canvas = document.getElementById(\"signature-pad\");\r\n    var signaturePad = new SignaturePad(canvas, {\r\n      backgroundColor: \"rgb(255, 255, 255)\" // necessary for saving image as JPEG; can be removed is only saving as PNG or SVG\r\n    });\r\n\r\n    return () => {};\r\n  }, []);  \r\n  return (\r\n    <>\r\n      <canvas\r\n        id=\"signature-pad\"\r\n        className=\"signature-pad\"\r\n        width={400}\r\n        height={200}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Test\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\LunchCheck.js",["269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { getFormatDate } from './CommonFunc';\r\nimport { Checkbox, Button, Modal, message } from \"antd\";\r\nimport firebase from \"../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as antIcon from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\nfunction LunchCheck() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const curDate = getFormatDate(new Date());\r\n  const weekNum = curDate.weekNum;\r\n  let date = new Date();\r\n  let hour = date.getHours();\r\n  new Date(date.setDate(date.getDate() - weekNum + 7));\r\n  let curWeekArr = [];\r\n  let i = 0;\r\n  while(i < 7){\r\n    curWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() - 1))));\r\n    i++;\r\n  }\r\n  curWeekArr = curWeekArr.sort((a,b) => {\r\n    if(a.full < b.full){\r\n      return -1;\r\n    }\r\n  });\r\n  curWeekArr.pop();\r\n  curWeekArr.shift();\r\n  \r\n  date = new Date();\r\n  new Date(date.setDate(date.getDate() - weekNum));\r\n  let prevWeekArr = [];\r\n  let n = 0;\r\n  while(n < 7){\r\n    prevWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() - 1))));\r\n    n++;\r\n  }\r\n  prevWeekArr = prevWeekArr.sort((a,b) => {\r\n    if(a.full < b.full){\r\n      return -1;\r\n    }\r\n  });\r\n  prevWeekArr.pop();\r\n  prevWeekArr.shift();\r\n  \r\n  date = new Date();\r\n  new Date(date.setDate(date.getDate() + (6-weekNum)));\r\n  let nextWeekArr = [];\r\n  let j = 0;\r\n  while(j < 14){\r\n    if(j==6){\r\n      nextWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() + 3))));\r\n    }else{\r\n      nextWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() + 1))));\r\n    }\r\n    \r\n    j++;\r\n  }\r\n  nextWeekArr.pop();\r\n  nextWeekArr.pop();\r\n  nextWeekArr.pop();\r\n  nextWeekArr.shift();\r\n\r\n  \r\n  const weekList = useRef();\r\n  const weekList2 = useRef();\r\n  const weekList3 = useRef();\r\n  \r\n  const [ItemList, setItemList] = useState();\r\n  const [UserList, setUserList] = useState();\r\n  const [ItemInfo, setItemInfo] = useState();\r\n  const [PrevState, setPrevState] = useState()\r\n  const [CurState, setCurState] = useState()\r\n  const [NextState, setNextState] = useState()\r\n\r\n  useEffect(() => {\r\n\r\n      firebase.database().ref('lunch/item')\r\n      .on('value', (snapshot) => {\r\n        let arr = [];\r\n        snapshot.forEach(el => {\r\n          arr.push(el.val())\r\n        })\r\n        setItemList(arr)\r\n      });\r\n      firebase.database().ref('lunch/info')\r\n      .on('value', (snapshot) => {\r\n        setItemInfo(snapshot.val())        \r\n      });\r\n      firebase.database().ref(`lunch/user/${userInfo.uid}/checkList`)\r\n      .on('value', (snapshot) => {\r\n        let arr = [];\r\n        snapshot.forEach(el => {\r\n          arr.push({\r\n            date: el.val().date,\r\n            item: el.val().item,\r\n            confirm: el.val().confirm ? el.val().confirm : ''\r\n          })\r\n        })\r\n        setUserList(arr);\r\n        prevWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n            }\r\n          })\r\n        })\r\n        curWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n            }\r\n          })\r\n        })\r\n        nextWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n            }\r\n          })\r\n        })\r\n        \r\n        \r\n        setPrevState(prevWeekArr);\r\n        setCurState(curWeekArr);\r\n        setNextState(nextWeekArr);\r\n      })\r\n      \r\n    \r\n  \r\n\r\n    return () => {\r\n      firebase.database().ref('lunch/item').off();\r\n      firebase.database().ref(`lunch/user/${userInfo.uid}/checkList`).off();\r\n    }\r\n  }, []);\r\n\r\n\r\n  const [LunchImg, setLunchImg] = useState()\r\n  const [LunchImgVisible, setLunchImgVisible] = useState(false)\r\n  useEffect(() => {\r\n    firebase.database().ref('lunch/img')\r\n    .on(\"value\",data => {\r\n      setLunchImg(data.val())\r\n    })\r\n    return () => {\r\n      firebase.database().ref('lunch/img').off()\r\n    }\r\n  }, [])\r\n  const onLunchImg = () => {\r\n    setLunchImgVisible(true)\r\n  }\r\n  const LunchImgCancel = () => {\r\n    setLunchImgVisible(false)\r\n  }\r\n\r\n  const onsubmit = () => {\r\n    let list = [...weekList.current.querySelectorAll('li'),...weekList2.current.querySelectorAll('li'),...weekList3.current.querySelectorAll('li')];    \r\n    let checkList = {};\r\n    list.map(el => {\r\n      let check = [...el.querySelectorAll('input[type=checkbox]:checked')];\r\n      let confirm = el.querySelector('input[type=hidden]');\r\n      \r\n      check = check.map(el=>el.dataset.value)\r\n      checkList[el.dataset.date] = {\r\n        item: check,\r\n        date:el.dataset.date,\r\n        confirm:confirm.value\r\n      }        \r\n    })\r\n    \r\n    firebase.database().ref(`lunch/user/${userInfo.uid}`)\r\n    .update({\r\n      checkList,\r\n      name : userInfo.displayName,\r\n      part : userInfo.photoURL\r\n    })\r\n    message.success('적용되었습니다 :)');\r\n    setModifyState(false)\r\n  }\r\n\r\n  const onTodayCheck = (date) => {\r\n    firebase.database().ref(`lunch/user/${userInfo.uid}/checkList/${date}`)\r\n    .update({\r\n      confirm:1\r\n    })\r\n  }\r\n\r\n  const [ModifyState, setModifyState] = useState(false)\r\n  const onModify = () => {\r\n    setModifyState(true)\r\n  }\r\n\r\n  const onCancel = () => {\r\n    setModifyState(false)\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"item-info-box\">\r\n        {ItemInfo && \r\n          <pre>{ItemInfo}</pre>\r\n        }\r\n      </div>\r\n      <ul className=\"week_list\" ref={weekList}>\r\n        {PrevState && PrevState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full}>\r\n            <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />\r\n              <span className=\"date\">\r\n                {`${el.month}.${el.day}(${el.week})`}\r\n              </span>\r\n              {!ModifyState &&\r\n                <>\r\n                  <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                  <div className=\"confirm-info\">\r\n                  {el.full != curDate.full &&\r\n                    <>\r\n                      {el.confirm ? <span>확인완료</span> : <span>미확인</span>} \r\n                    </>\r\n                  }\r\n                  </div>\r\n                </> \r\n              }\r\n            <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n              {ItemList && ModifyState && \r\n              ItemList.map((list,l_idx) => (\r\n                <>\r\n                {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                  <Checkbox key={l_idx} data-value={list} disabled defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>\r\n                )}\r\n                </>\r\n              ))                  \r\n              }\r\n            </div>  \r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <ul className=\"week_list\" ref={weekList2}>\r\n        {CurState && CurState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full} className={el.full == curDate.full ? 'today' : ''}>\r\n            <span className=\"date\">\r\n                {`${el.month}.${el.day}(${el.week})`}\r\n            </span>\r\n            {!ModifyState &&\r\n              <>\r\n              <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                \r\n              <div className=\"confirm-info\">\r\n              {el.confirm && <span>확인완료</span>}\r\n              {el.full != curDate.full && !el.confirm &&\r\n                <span>미확인</span>\r\n              }\r\n              </div>\r\n                \r\n              {el.full == curDate.full &&\r\n                <>\r\n                {!el.confirm && \r\n                <>\r\n                  <Button type=\"primary\" disabled={!el.item ? true : hour < 9 ? false : true}  onClick={()=>{onTodayCheck(el.full)}}>\r\n                    {el.item ? '식단확인' : '확인불가'}\r\n                  </Button>\r\n                </>\r\n                }\r\n                </>\r\n              }\r\n              </> \r\n            } \r\n            <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n              {ItemList && ModifyState && \r\n              ItemList.map((list,l_idx) => (\r\n                <>\r\n                  {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                  <Checkbox key={l_idx} data-value={list} disabled={\r\n                    el.full > curDate.full ? \r\n                    false : el.full == curDate.full && hour < 9 ? false : true\r\n                  } defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>\r\n                )}\r\n              </>\r\n              ))            \r\n              }\r\n            </div>\r\n            <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />            \r\n          </li>\r\n        ))}\r\n      </ul>  \r\n\r\n      <ul className=\"week_list next\" ref={weekList3}>\r\n        {NextState && NextState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full}>\r\n          <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />\r\n            <span className=\"date\">\r\n              {`${el.month}.${el.day}(${el.week})`}\r\n            </span>\r\n            {!ModifyState &&\r\n              <>\r\n                <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                <div className=\"confirm-info\">\r\n                {el.full != curDate.full &&\r\n                  <>\r\n                    {el.confirm ? <span>확인완료</span> : <span>미확인</span>} \r\n                  </>\r\n                }\r\n                </div>\r\n              </> \r\n            }\r\n          <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n            {ItemList && ModifyState && \r\n            ItemList.map((list,l_idx) => (\r\n              <>\r\n                {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                <Checkbox key={l_idx} data-value={list} defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>    \r\n                )}\r\n              </>\r\n            ))                  \r\n            }\r\n          </div>  \r\n        </li>\r\n        ))}\r\n      </ul>  \r\n     \r\n      <div className=\"lunch-btn-box\">\r\n        {LunchImg && \r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={onLunchImg}>\r\n              식단표\r\n            </Button>\r\n            <Modal title=\"식단표\" \r\n            visible={LunchImgVisible} \r\n            footer={null}\r\n            width=\"auto\"\r\n            centered\r\n            className=\"lunch-img-modal\"\r\n            onCancel={LunchImgCancel}>\r\n              <img src={LunchImg.img.url} />\r\n            </Modal>\r\n          </>\r\n        }\r\n        {!ModifyState &&\r\n          <Button type=\"primary\" onClick={onModify}>수정하기</Button>\r\n        }\r\n        {ModifyState &&\r\n          <>\r\n          <Button type=\"primary\" onClick={onsubmit}>적용하기</Button>\r\n          <Button style={{marginLeft:\"5px\"}} onClick={onCancel}>취소</Button>\r\n          </>\r\n        }\r\n      </div>\r\n\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default LunchCheck\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminProd.js",["298","299"],"import React, { useState, useEffect } from \"react\";\nimport ImgUpload from \"./ImgUpload\";\nimport {\n  Form,\n  Button,\n  Input,\n  Radio,\n  Checkbox,\n  Row,\n  Divider,\n  Switch,\n  TimePicker,InputNumber\n} from \"antd\";\nimport firebase from \"../../firebase\";\nimport styled from \"styled-components\";\nimport ModifyModal from \"./ModifyModal\";\nimport uuid from \"react-uuid\";\n\nexport const ProdList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  .list {\n    animation-delay: 1s;\n    margin: 12px 8px;\n    width: calc(20% - 16px);\n    display: flex;\n    flex-direction: column;\n    border-radius: 7px;    \n    overflow: hidden;\n    transition: all 0.2s;\n    &:hover {\n      img{\n        transform: translate(-50%, -50%) scale(1.07);\n      }\n      box-shadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.25);\n    }\n    .img {\n      height: 0;\n      border-top-left-radius: 7px;\n      border-top-right-radius: 7px;\n      overflow: hidden;\n      width: 100%;\n      padding-bottom: 100%;\n      overflow: hidden;\n      position: relative;\n    }\n    img {\n      height: 100%;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transition:all 0.2s;\n      transform: translate(-50%, -50%);\n    }\n    .kal {\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      background: rgba(255, 255, 255, 0.85);\n      display: inline-block;\n      z-index: 1;\n      padding: 3px 6px;\n      font-size: 12px;\n      border-top-left-radius: 5px;\n    }\n  }\n  .txt {\n    display: flex;\n    flex: 1;\n    width: 100%;\n    flex-direction: column;\n    justify-content: space-between;\n    margin-bottom: 4px;\n    .name {\n      font-weight: bold;\n      font-size: 14px;\n      margin: 3px 0 2px 0;\n      display: -webkit-box;\n      -webkit-line-clamp: 2; \n      -webkit-box-orient: vertical;\n      overflow:hidden;\n      max-height: 46px;\n    }\n    .ic-favor {\n      margin-top: 5px;\n      margin-left: 5px;\n      flex-shrink: 0;\n      z-index: 10;\n      width: 18px;\n      height: 18px;\n      opacity: 0.3;\n      transition: all 0.2s;\n      &:hover{opacity:1}\n      svg {\n        width: 100%;\n        height: 100%;\n        display: none;\n      }\n      .no-favor {\n        display: block;        \n      }\n      .favor {\n        display: none;\n      }\n      &.true {\n        opacity: 1;\n\n        .no-favor {\n          display: none;\n        }\n        .favor {\n          display: block;\n        }\n      }\n    }\n    .hot {\n      font-size: 13px;\n    }\n    .price {\n      font-size: 13px;\n      color: #1672c9;\n    }\n  }\n  .user-box {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    align-items: center;\n    padding: 7px 5px;\n  }\n  .admin {\n    display: flex;\n    button {\n      margin: 2px;\n    }\n  }\n  .admin-box {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    align-items: center;\n    padding: 7px;\n  }\n  @media all and (max-width: 1400px) {\n    .list {\n      width: calc(20% - 16px);\n    }\n  }\n  @media all and (max-width: 1024px) {\n    .list {\n      width: calc(33.33% - 16px);\n    }\n  }\n  @media all and (max-width: 500px) {\n    .list {\n      width: calc(50% - 16px);\n    }\n  }\n`;\n\nfunction AdminProd() {\n  const [ItemChange, setItemChange] = useState(0);\n  const [ProdItem, setProdItem] = useState([]);\n\n  //정렬 라디오버튼\n  const [CateRadio, setCateRadio] = useState(\"all\");\n  const itemSort = (e) => {\n    setCateRadio(e.target.value);\n  };\n\n  const [Soldout, setSoldout] = useState();\n  const SoldoutToggle = () => {\n    setSoldout(!Soldout);\n    firebase\n      .database()\n      .ref(\"soldout\")\n      .child(\"b_soldout\")\n      .transaction((pre) => {\n        return !pre;\n      });\n  };\n\n  const [MilkSoldout, setMilkSoldout] = useState();\n  const MilkSoldoutToggle = () => {\n    setMilkSoldout(!MilkSoldout);\n    firebase\n      .database()\n      .ref(\"soldout\")\n      .child(\"MilkSoldout\")\n      .transaction((pre) => {\n        return !pre;\n      });\n  };\n  const [MilkSoldout2, setMilkSoldout2] = useState();\n  const MilkSoldoutToggle2 = () => {\n    setMilkSoldout2(!MilkSoldout2);\n    firebase\n      .database()\n      .ref(\"soldout\")\n      .child(\"MilkSoldout2\")\n      .transaction((pre) => {\n        return !pre;\n      });\n  };  \n\n  const [AbleTime, setAbleTime] = useState()\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      firebase\n      .database()\n      .ref(\"time\")\n      .on(\"value\", (snapshot) => {\n        setAbleTime(snapshot.val());\n      });      \n    }\n    return () => {\n      mounted = false;\n    }\n  }, [])  \n\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      firebase\n        .database()\n        .ref(\"soldout\")\n        .once(\"value\")\n        .then((snapshot) => {    \n          let soldoutArr = [];      \n            soldoutArr.push({\n              b_soldout:snapshot.val().b_soldout,\n              MilkSoldout:snapshot.val().MilkSoldout,\n              MilkSoldout2:snapshot.val().MilkSoldout2\n            })\n            setSoldout(snapshot.val().b_soldout);            \n            setMilkSoldout(snapshot.val().MilkSoldout);            \n            setMilkSoldout2(snapshot.val().MilkSoldout2);            \n        });        \n      firebase\n        .database()\n        .ref(\"products\")\n        .once(\"value\")\n        .then((snapshot) => {\n          let array = [];\n          snapshot.forEach(function (item) {\n            array.push({\n              uid: item.key,\n              name: item.val().name,\n              kal: item.val().kal,\n              hot: item.val().hot,\n              limit: item.val().limit,\n              category: item.val().category,\n              image: item.val().image,\n              price: item.val().price,\n              soldout: true,\n            });\n          });\n          array = array.filter((el) => {\n            if (CateRadio === \"all\") {\n              return el;\n            }\n            return el.category === CateRadio;\n          });\n          setProdItem(array);\n        });\n    }\n    return function cleanup() {\n      mounted = false;\n    };\n  }, [ItemChange, CateRadio]);\n\n  const [ImgFile, setImgFile] = useState();\n  const onImgFile = (e) => {\n    setImgFile(e.target.files[0]);\n  };\n\n  // submit\n  const onSubmitProd = async (values) => {\n    \n    if (isNaN(values.price)) {\n      alert(\"가격은 숫자만 입력해 주세요\");\n      return;\n    }\n    if (!ImgFile) {\n      alert(\"이미지를 올려주세요\");\n      return;\n    }\n    const file = ImgFile;\n    const metadata = ImgFile.type;\n    try {\n      let uploadTaskSnapshot = await firebase\n        .storage()\n        .ref(\"products\")\n        .child(`prod_image/${uuid()}`)\n        .put(file, metadata);\n      let downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\n      if (!values.add) {\n        values.add = \"\";\n      }\n      if (!values.milk) {\n        values.milk = \"\";\n      }\n      if (!values.limit) {\n        values.limit = false;\n      }\n      if (!values.option) {\n        values.option = \"\";\n      }\n      values.sort_num = parseInt(values.sort_num);\n      values.sort_num >= 0 ? values.sort_num = values.sort_num : values.sort_num = 9999;\n      await firebase\n        .database()\n        .ref(\"products\")\n        .child(uuid())\n        .set({\n          ...values,\n          image: downloadURL,\n        });\n      setItemChange((pre) => pre + 1);\n      alert(\"상품을 등록했습니다.\");\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  // 모달팝업 호출\n  const [Puid, setPuid] = useState();\n  const [Pimg, setPimg] = useState();\n  const [OnModal, setOnModal] = useState(false);\n  const [PosX, setPosX] = useState(0);\n  const [PosY, setPosY] = useState(0);\n  const onProdModify = (e, uid, img) => {\n    setPosX(e.clientX);\n    setPosY(e.clientY);\n    setPuid(uid);\n    setPimg(img);\n    setOnModal(true);\n  };\n\n  const onProdDelete = async (uid) => {\n    const delConfirm = window.confirm(\"삭제하시겠습니까?\");\n    try {\n      if (delConfirm) {\n        await firebase.database().ref(\"products\").child(uid).remove();\n        setItemChange((pre) => pre + 1);\n        alert(\"상품을 삭제했습니다.\");\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const onFinished = () => {\n    setOnModal(false);\n    setItemChange((pre) => pre + 1);\n  };\n\n  const [ProdRegist, setProdRegist] = useState(false);\n  const ProdRegistToggle = () => {\n    setProdRegist(!ProdRegist);\n  };\n  const [TimeRegist, setTimeRegist] = useState(false);\n  const TimeRegistToggle = () => {\n    setTimeRegist(!TimeRegist);\n  };  \n\n  const format = 'HH:mm';\n  const onTimeSet = () => {\n    let time1_1 = document.querySelectorAll('.time1 input')[0].value;\n    let time1_2 = document.querySelectorAll('.time1 input')[1].value;\n    let time2_1 = document.querySelectorAll('.time2 input')[0].value;\n    let time2_2 = document.querySelectorAll('.time2 input')[1].value;\n    let time3_1 = document.querySelectorAll('.time3 input')[0].value;\n    let time3_2 = document.querySelectorAll('.time3 input')[1].value;\n    let time4_1 = document.querySelectorAll('.time4 input')[0].value;\n    let time4_2 = document.querySelectorAll('.time4 input')[1].value;\n    let body = {}\n    body.ableTimeStart = time1_1;\n    body.ableTimeEnd = time1_2;\n    body.disableTimeStart = time2_1;\n    body.disableTimeEnd = time2_2;\n    body.lunchTimeStart = time3_1;\n    body.lunchTimeEnd = time3_2;\n    body.breakTimeStart = time4_1;\n    body.breakTimeEnd = time4_2;\n    \n    firebase.database().ref('time').update(body)\n\n  }\n\n  return (\n    <>\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\n        운영시간 설정\n        </h3>\n        <Switch\n          onChange={TimeRegistToggle}\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n        />\n      </div> \n      {AbleTime && TimeRegist && (\n      <div style={{marginBottom:\"20px\"}}>\n        <div className=\"time-seting\">\n          <div className=\"tit\">\n            운영시간\n          </div>\n          <TimePicker.RangePicker className=\"time1\" format={format} />\n          <div className=\"tit\">\n            주문불가 시간\n          </div>\n          <TimePicker.RangePicker className=\"time2\" format={format} />     \n        </div>\n        <div className=\"time-seting\">\n          <div className=\"tit\">\n            점심시간\n          </div>\n          <TimePicker.RangePicker className=\"time3\" format={format} />\n          <div className=\"tit\">\n            브레이크 타임\n          </div>\n          <TimePicker.RangePicker className=\"time4\" format={format} />        \n        </div>\n        <Button\n              htmlType=\"button\"\n              style={{ width: \"100%\",maxWidth:\"250px\" }}\n              type=\"primary\"\n              size=\"large\"\n              onClick={onTimeSet}\n            >\n              시간설정 적용하기\n            </Button>\n      </div>\n      )}\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\n          상품등록\n        </h3>\n        <Switch\n          onChange={ProdRegistToggle}\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n        />\n      </div>            \n      {ProdRegist && (\n        <Form className=\"admin-prod-form\" onFinish={onSubmitProd}>\n          <div\n            className=\"ant-row ant-form-item ant-form-item-has-success\"\n            style={{ alignItems: \"center\" }}\n          >\n            <div className=\"ant-col ant-form-item-label\">\n              <label htmlFor=\"category\" className=\"ant-form-item-required\">\n                이미지\n              </label>\n            </div>\n            <ImgUpload onImgFile={onImgFile} />\n          </div>\n          <Form.Item\n            name=\"category\"\n            label=\"카테고리\"\n            rules={[{ required: true, message: \"카테고리를 선택해 주세요\" }]}\n          >\n            <Radio.Group>\n              <Radio.Button value=\"커피\">커피</Radio.Button>\n              <Radio.Button value=\"라떼\">라떼</Radio.Button>\n              <Radio.Button value=\"에이드\">에이드</Radio.Button>\n              <Radio.Button value=\"차\">차</Radio.Button>\n              <Radio.Button value=\"프로틴\">프로틴</Radio.Button>\n              <Radio.Button value=\"스낵\">스낵</Radio.Button>\n              <Radio.Button value=\"주스\">주스</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item\n            name=\"name\"\n            label=\"상품명\"\n            rules={[\n              {\n                required: true,\n                message: \"상품명을 입력해 주세요\",\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name=\"option\"\n            label=\"옵션\"    \n          >\n            <Input placeholder=\"옵션명을 ,(콤마)로 구분해서 적어주세요\" />\n          </Form.Item>\n          <Form.Item\n            name=\"hot\"\n            label=\"온도\"\n            rules={[{ required: true, message: \"온도를 선택해 주세요\" }]}\n          >\n            <Radio.Group>\n              <Radio.Button value=\"hot & ice\">hot & ice</Radio.Button>\n              <Radio.Button value=\"hot only\">hot only</Radio.Button>\n              <Radio.Button value=\"ice only\">ice only</Radio.Button>\n              <Radio.Button value=\"etc\">etc</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item\n            name=\"kal\"\n            label=\"칼로리\"\n            rules={[\n              {\n                required: true,\n                message: \"칼로리를 입력해 주세요\",\n              },\n            ]}\n          >\n            <Input className=\"sm-input\" />\n          </Form.Item>\n          <Form.Item\n            name=\"price\"\n            label=\"가격\"\n            rules={[\n              {\n                required: true,\n                message: \"가격을 입력해 주세요\",\n              },\n            ]}\n          >\n            <Input className=\"sm-input\" type=\"text\" />\n          </Form.Item>\n\n          <Form.Item name=\"add\" label=\"추가\">\n            <Checkbox.Group>\n              <Row>\n                <Checkbox value=\"버블\" style={{ lineHeight: \"32px\" }}>\n                  버블\n                </Checkbox>\n                <Checkbox value=\"샷\" style={{ lineHeight: \"32px\" }}>\n                  샷\n                </Checkbox>\n                <Checkbox value=\"연하게\" style={{ lineHeight: \"32px\" }}>\n                  연하게\n                </Checkbox>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item name=\"milk\" label=\"우유 유무\">\n            <Checkbox.Group>\n              <Row>\n                <Checkbox value=\"1\" style={{ lineHeight: \"32px\" }}>\n                  우유\n                </Checkbox>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item label=\"1개제한\" name=\"limit\" valuePropName=\"checked\"> \n              <Checkbox style={{ lineHeight: \"32px\" }} />                  \n          </Form.Item>\n          <Form.Item name=\"sort_num\" label=\"순서\">\n            <Input className=\"sm-input\" type=\"number\" />\n          </Form.Item>\n\n          <div className=\"ant-row ant-form-item soldout-switch\">\n            <div className=\"ant-col ant-form-item-label\">\n              <label htmlFor=\"price\">버블품절</label>\n            </div>\n            <div className=\"ant-col ant-form-item-control\">\n              <div className=\"ant-form-item-control-input\">\n                <div className=\"ant-form-item-control-input-content\">\n                  {Soldout === true && (\n                    <>\n                      <Switch\n                        onChange={SoldoutToggle}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                        defaultChecked\n                      />\n                    </>\n                  )}\n                  {Soldout === false && (\n                    <>\n                      <Switch\n                        onChange={SoldoutToggle}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                      />\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"ant-col ant-form-item-label\">\n              <label htmlFor=\"price\">무지방 품절</label>\n            </div>\n            <div className=\"ant-col ant-form-item-control\">\n              <div className=\"ant-form-item-control-input\">\n                <div className=\"ant-form-item-control-input-content\">\n                  {MilkSoldout === true && (\n                    <>\n                      <Switch\n                        onChange={MilkSoldoutToggle}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                        defaultChecked\n                      />\n                    </>\n                  )}\n                  {MilkSoldout === false && (\n                    <>\n                      <Switch\n                        onChange={MilkSoldoutToggle}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                      />\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"ant-col ant-form-item-label\">\n              <label htmlFor=\"price\">락토프리 품절</label>\n            </div>\n            <div className=\"ant-col ant-form-item-control\">\n              <div className=\"ant-form-item-control-input\">\n                <div className=\"ant-form-item-control-input-content\">\n                  {MilkSoldout2 === true && (\n                    <>\n                      <Switch\n                        onChange={MilkSoldoutToggle2}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                        defaultChecked\n                      />\n                    </>\n                  )}\n                  {MilkSoldout2 === false && (\n                    <>\n                      <Switch\n                        onChange={MilkSoldoutToggle2}\n                        checkedChildren=\"판매\"\n                        unCheckedChildren=\"품절\"\n                      />\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div\n            style={{ width: \"100%\", maxWidth: \"250px\", textAlign: \"center\" }}\n          >\n            <Button\n              htmlType=\"submit\"\n              style={{ width: \"100%\" }}\n              type=\"primary\"\n              size=\"large\"\n            >\n              등록하기\n            </Button>\n          </div>\n        </Form>\n      )}\n      <Divider />\n      <h3 className=\"title\">상품리스트</h3>\n      <div className=\"menuCategory\">\n        <Radio.Group\n          className=\"menuCategory\"\n          onChange={itemSort}\n          defaultValue=\"all\"\n          buttonStyle=\"solid\"\n        >\n          <Radio.Button value=\"all\">전체</Radio.Button>\n          <Radio.Button value=\"커피\">커피</Radio.Button>\n          <Radio.Button value=\"라떼\">라떼</Radio.Button>\n          <Radio.Button value=\"에이드\">에이드</Radio.Button>\n          <Radio.Button value=\"차\">차</Radio.Button>\n          <Radio.Button value=\"프로틴\">프로틴</Radio.Button>\n          <Radio.Button value=\"스낵\">스낵</Radio.Button>\n          <Radio.Button value=\"주스\">주스</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ProdList>\n        {ProdItem.map((item, index) => (\n          <div className=\"list\" key={index}>\n            <div className=\"img\">\n              <span className=\"kal\">{item.kal}kal</span>\n              <img src={item.image} alt=\"\" />\n            </div>\n            <div className=\"admin-box\">\n              <div className=\"txt\">\n                <span className=\"name\">{item.name}\n                  <span className=\"hidden\">{item.uid}</span>\n                </span>\n                <div className=\"flex-box between\">\n                  <span className=\"hot\">{item.hot}</span>\n                  <span className=\"price\">{item.price}원</span>\n                </div>\n              </div>\n              <div className=\"admin\">\n                <Button onClick={(e) => onProdModify(e, item.uid, item.image)}>\n                  수정\n                </Button>\n                <Button onClick={() => onProdDelete(item.uid)}>삭제</Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </ProdList>\n      {OnModal && (\n        <ModifyModal\n          puid={Puid}\n          pimg={Pimg}\n          onFinished={onFinished}\n          posx={PosX}\n          posy={PosY}\n        />\n      )}\n    </>\n  );\n}\n\nexport default AdminProd;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminOrderList.js",["300","301","302","303","304"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"../../firebase\";\nimport { Radio,Button,DatePicker } from \"antd\";\nimport * as antIcon from \"react-icons/ai\";\nimport { commaNumber,getFormatDate } from \"../CommonFunc\";\nimport { CSVLink } from \"react-csv\";\nimport moment from 'moment';\n\nconst curDate = getFormatDate(new Date());\nfunction AdminOrderList() {\n\n  const [OrderList, setOrderList] = useState([]);\n  const [SelectDay, setSelectDay] = useState();\n  const [LastDay, setLastDay] = useState()\n  const [PrevDay, setPrevDay] = useState()\n  const [SumAmount, setSumAmount] = useState()\n  const [SumPrice, setSumPrice] = useState()\n  const [Add1Count, setAdd1Count] = useState()\n  const [Add2Count, setAdd2Count] = useState()\n  const [SumAddAmount, setSumAddAmount] = useState()\n\n  const [SearchDate, setSearchDate] = useState(curDate);\n  const [Render, setRender] = useState(true);\n\n  const [excelData, setExcelData] = useState()\n  const excelHeaders = [\n    {label: \"주문자\", key:\"order_name\"},\n    {label: \"상품명\", key:\"prod_name\"},\n    {label: \"수량\", key:\"amount\"},\n    {label: \"추가\", key:\"add\"},\n    {label: \"추가2\", key:\"add2\"},\n    {label: \"코멘트\", key:\"order_etc\"},\n    {label: \"주문시간\", key:\"order_time\"},\n    {label: \"가격\", key:\"price\"}\n  ]\n\n  useEffect(() => {\n    let mounted = true;\n    let limitDateStart = SearchDate.timestamp - 36000000;\n    let limitDateEnd = SearchDate.timestamp + 36000000;\n    if (mounted) {     \n        firebase\n        .database()\n        .ref(\"order\")\n        .orderByChild(\"timestamp\")\n        .startAt(limitDateStart)\n        .endAt(limitDateEnd)\n        .on(\"value\", (snapshot) => {\n          let array = [];\n          snapshot.forEach(function (item) {\n            array.push({\n              ...item.val(),\n              key: item.key,\n            });\n          });\n          // eslint-disable-next-line array-callback-return          \n          array.sort((a, b) => {\n            if (a.timestamp > b.timestamp) {\n              return -1;\n            }\n            if (a.timestamp < b.timestamp) {\n              return 1;\n            }\n          });\n          array = array.filter(el=>{\n            var date = getFormatDate(new Date(el.timestamp)).full;\n            return date === SearchDate.full && el.order_state === 2\n          })  \n          \n          array.map(el=>{\n            if(el.hot === 'hot') el.prod_name = `따뜻한 ${el.prod_name}`\n            if(el.hot === 'ice') el.prod_name = `차가운 ${el.prod_name}`\n            if(el.prod_option) el.prod_name = el.prod_name +'-'+el.prod_option\n          })\n          const day = ['월요일','화요일','수요일','목요일','금요일']\n          setLastDay(array[0].order_time.split(\"|\")[1])\n          let prevDayIndex = day.indexOf(LastDay)-1          \n          if(prevDayIndex < 0){\n            prevDayIndex = 4;\n          }  \n          setPrevDay(day[prevDayIndex]);\n          if(SelectDay){           \n            array = array.filter(el => {\n              return el.order_time.includes(SelectDay)\n            })\n            let sumA = 0;\n            let sumP = 0;\n            let add1C = 0;\n            let add2C = 0;\n            array.map(el => {\n              sumA += parseInt(el.amount)\n              if(el.add && el.add.includes('버블')) {\n                el.price -= 500;\n                add1C += 1\n              }\n              if(el.add2 && el.add2.includes('샷1')) {\n                el.price -= 500;                \n                add2C += 1\n              }\n              if(el.add2 && el.add2.includes('샷2')) {\n                el.price -= 1000;\n                add2C += 2\n              }              \n            })\n            setSumAmount(sumA)\n            setAdd1Count(add1C)\n            setAdd2Count(add2C)\n            setSumAddAmount(add1C+add2C)  \n            array = array.reduce((a,c)=>{\n              let x = a.find(e=>(e.prod_name===c.prod_name && e.hot===c.hot))\n              if(!x) a.push(Object.assign({},c))\n              else {\n                x.og_price += c.og_price\n                x.amount += c.amount\n              };\n              return a\n            },[])                 \n            array.map(el => {\n              sumP += el.price * el.amount\n              el.price = el.price * el.amount\n            })     \n            setSumPrice(sumP)\n\n            array = array.sort((a,b) => {\n              if (a.category > b.category) {\n                return -1;\n              }\n              if (a.category < b.category) {\n                return 1;\n              }\n            })\n          }            \n          setExcelData(array);\n          setOrderList(array);          \n        });\n      }\n      return function cleanup() {\n        firebase.database().ref(\"order\").off();\n        mounted = false;\n      };\n    }, [SelectDay,Render]);\n    \n    const onSelectDay = (e) => {\n      if(e.target.value === '1'){\n        setSelectDay(\"\")\n      }\n      if(e.target.value === '2'){\n        setSelectDay(LastDay)\n      }\n      if(e.target.value === '3'){\n        setSelectDay(PrevDay)\n      }\n    }      \n    \n    const onSelectDate = (date, dateString) => {\n      setSearchDate(getFormatDate(date._d))\n      setRender(!Render)\n    }\n  \n    const disabledDate = (current) => {\n      return current < moment().subtract(30, 'days') || current > moment();\n    }    \n  return (\n    <>\n      <h3 className=\"title\">완료내역</h3>\n      \n      <Radio.Group onChange={onSelectDay} defaultValue=\"1\" buttonStyle=\"solid\">\n        <Radio.Button value=\"1\">전체</Radio.Button>\n        <Radio.Button value=\"2\">수량합계</Radio.Button>\n        {/* <Radio.Button value=\"3\">어제</Radio.Button> */}\n      </Radio.Group> \n      {/* <span style={{fontSize:\"13px\",marginLeft:\"5px\"}}>(영업일 기준)</span> */}\n     \n      <DatePicker \n        format=\"YYYY-MM-DD\"\n        defaultValue={moment()}\n        style={{marginLeft:\"10px\"}}\n        disabledDate={disabledDate} onChange={onSelectDate} \n      />\n      {excelData &&\n        <Button style={{marginLeft:\"10px\"}}>\n          <CSVLink \n            headers={excelHeaders} \n            data={excelData} \n            filename={`metree-cafe${curDate.full}.csv`} \n            target=\"_blank\"\n          >\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />엑셀 다운로드\n          </CSVLink>\n        </Button>\n      }\n      {!SelectDay && \n        <table className=\"fl-table\" style={{marginTop:\"12px\"}}>\n          <thead>\n            <tr>\n              <th scope=\"col\">주문자</th>\n              <th scope=\"col\">상품명</th>\n              <th scope=\"col\">수량</th>\n              <th scope=\"col\" colSpan=\"2\">추가</th>\n              <th scope=\"col\">코멘트</th>\n              <th scope=\"col\">주문시간</th>\n              <th scope=\"col\">가격</th>\n            </tr>\n          </thead>\n          <tbody>\n            {OrderList.map((list, index) => (\n              <tr key={index}>\n                <td>{list.order_name}</td>\n                <td>\n                  {list.prod_name}\n                </td>\n                <td>{list.amount}</td>\n                <td>{list.add}</td>\n                <td>{list.add2}</td>\n                <td>{list.order_etc}</td>\n                <td>{list.order_time}</td>\n                <td>{list.price}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      }\n      {SelectDay && \n        <>\n        <div style={{marginTop:\"12px\"}}>\n        {OrderList[0] && \n          <span>{OrderList[0].order_time}</span>\n        }        \n        </div>\n        <div style={{display:\"flex\"}}>\n        <table className=\"fl-table\" style={{marginTop:\"12px\",width:\"48%\"}}>\n          <thead>\n            <tr>\n              <th scope=\"col\">상품명</th>\n              <th scope=\"col\">수량</th>\n              <th scope=\"col\">가격</th>\n            </tr>\n          </thead>\n          <tbody>\n            {OrderList && OrderList.map((list, index) => (\n              <tr key={index}>\n                <td>\n                  {list.hot === \"ice\" && \"차가운 \"}\n                  {list.prod_name}\n                </td>\n                <td>{list.amount}</td>\n                <td>{list.price}</td>\n              </tr>\n            ))}\n            <tr>\n                <td>합계</td>\n                <td>\n                  {SumAmount}\n                </td>\n                <td>{commaNumber(parseInt(SumPrice))}</td>\n            </tr>\n          </tbody>\n        </table>\n        <table className=\"fl-table\" style={{marginTop:\"12px\",marginLeft:\"2%\",width:\"49%\",height:\"100px\"}}>\n        <thead>\n          <tr>            \n            <th scope=\"col\">상품명</th>\n            <th scope=\"col\">수량</th>\n            <th scope=\"col\">가격</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr>\n              <td>버블추가</td>\n              <td>{Add1Count}</td>\n              <td></td>\n            </tr>\n            <tr>\n              <td>샷추가</td>\n              <td>{Add2Count}</td>\n              <td></td>\n            </tr>\n          <tr>\n              <td>합계</td>\n              <td>\n                {SumAddAmount}\n              </td>\n              <td>{commaNumber(parseInt(SumAddAmount*500))}</td>\n          </tr>\n        </tbody>\n      </table>\n      </div>\n      </>\n      }\n    </>\n  );  \n}\n\nexport default AdminOrderList;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminOrder.js",["305","306"],"import React, { useState, useEffect } from \"react\";\nimport { Button,message } from \"antd\";\nimport styled from \"styled-components\";\nimport firebase, {old} from \"../../firebase\";\nimport { Radio } from \"antd\";\nimport { commaNumber,notify,getFormatDate } from \"../CommonFunc\";\nimport { Howl } from \"howler\";\nimport axios from \"axios\";\nimport src1 from \"../../jumun.mp3\";\nimport src2 from \"../../jumun2.mp3\";\nimport src3 from \"../../jumun3.mp3\";\nimport src4 from \"../../jumun4.mp3\";\nimport src5 from \"../../pling.mp3\";\nimport src6 from \"../../dding.mp3\";\nimport src7 from \"../../alert.mp3\";\n\nexport const OrderBox = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;  \n  .list {\n    &.user{\n        position:relative;\n        padding-left:80px;\n        .order-prod-img{\n          width:55px;height:55px;border-radius:50%;overflow:hidden;\n          position:absolute;left:15px;top:50%;transform:translateY(-50%);\n          &.no-img{border:1px solid #ededed}\n          img{\n            height:100%;\n            position:absolute;left:50%;\n            transform:translateX(-50%);\n          }\n        }\n        .btn-cancel{margin-right:5px}\n    }\n    .ic-hot,\n    .ic-ice {\n      display: inline-block;\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n      opacity: 0.4;\n      margin-right: 10px;\n      position: relative;\n      top: 1px;\n    }\n    .ic-hot {\n      background: #f02424;\n    }\n    .ic-ice {\n      background: #1890ff;\n    }\n    color: #888;    \n    &.state_0 {\n      .ic-hot,\n      .ic-ice {\n        opacity: 0.85;\n      }\n      color: #555;\n      border-color: #e6f7ff;\n      .info {\n        color: #111;\n        font-weight: 500;\n      }\n    }\n    &.state_1{\n      .ic-hot,\n      .ic-ice {\n        opacity: 1;\n      }\n      .info {\n        color: #111;\n        font-weight: 500;\n      }\n    }\n    .from {\n      border-bottom: 1px solid #ddd;\n      height: 30px;\n    }\n    .shrink-0{flex-shrink: 0;}\n    diplay: flex;\n    flex-direction: column;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 10px;\n    width: calc(50% - 10px);\n    margin: 5px;\n    .from {\n      margin-bottom: 5px;\n    }\n    .date {\n      font-size: 12px;\n    }\n    .info-box {\n      display: flex;\n      min-height:30px;\n      align-items: center;\n      .info {\n        margin-right: 7px;\n      }\n      .ant-btn {\n        height: 28px;\n        padding: 0 7px;\n        line-height: 1;\n        span {\n          height: 100%;\n          line-height: 28px;\n          font-size: 12px;\n        }\n      }\n    }\n    & > div {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      padding: 0 4px;\n    }\n    \n  }\n  @media all and (max-width: 1200px) {\n    .list {\n      width: 100%;\n      margin: 5px 0;\n      &.user{\n        padding-left:76px;\n        .order-prod-img{\n          width:52px;height:52px;border-radius:50%;overflow:hidden;\n          position:absolute;left:13px;\n        }\n        .btn-cancel{height:28px;font-size:12px;padding:0 10px}\n      }\n    }\n  }\n`;\n\n\nfunction AdminOrder() {\n  const [SoundSelect, setSoundSelect] = useState();\n  useEffect(() => {\n    firebase\n      .database()\n      .ref(\"order_sound\")\n      .child(\"sound\")\n      .once(\"value\")\n      .then((snapshot) => {\n        setSoundSelect(snapshot.val());\n      });\n  }, []);\n  const onSoundChange = (e) => {\n    setSoundSelect(e.target.value);\n    SoundSelect && Sound.play();\n    firebase.database().ref(\"order_sound\").update({ sound: e.target.value });\n  };\n\n  const Sound = new Howl({\n    src: [SoundSelect],\n  });\n\n  const [OrderList, setOrderList] = useState([]);\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n        firebase\n        .database()\n        .ref(\"order\")\n        .orderByChild(\"order_state\")\n        .endAt(1)\n        .on(\"value\", (snapshot) => {\n          let array = [];\n          snapshot.forEach(function (item) {\n            array.push({\n              ...item.val(),\n              key: item.key,\n            });\n          });\n          // eslint-disable-next-line array-callback-return\n          array.sort((a, b) => {\n            if (a.timestamp > b.timestamp) {\n              return 1;\n            }\n            if (a.timestamp < b.timestamp) {\n              return -1;\n            }\n          });\n          setOrderList(array);\n        });\n      }\n    return function cleanup() {\n      firebase.database().ref(\"order\").off();\n      mounted = false;\n    };\n  }, []);\n\n  const [OrderCount, setOrderCount] = useState()\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      firebase\n        .database()\n        .ref(\"order_count\")\n        .on(\"value\", (snapshot) => {\n          setOrderCount(snapshot.val())\n          if(OrderList.length > 0){\n            SoundSelect && Sound.play();\n            notify('새 주문이 들어왔습니다.');\n          }\n        });\n    }\n    \n    return function cleanup() {\n      firebase.database().ref(\"order_count\").off();\n      mounted = false;\n    };\n  }, [OrderCount]);\n\n  const stateChange = (key) => {\n      firebase.database().ref(`order/${key}`)\n      .child(\"order_state\")\n      .transaction((pre) => {\n        return pre + 1;\n      });\n  };\n  const stateChange2 = (key) => {\n      firebase.database().ref(`order/${key}`)\n      .child(\"order_state\")\n      .transaction((pre) => {\n        return pre + 1;\n      });\n  };\n\n  \n  const kakaoSend = (key) => { \n\n    // 올드DB에 추가\n    let newData = key;\n    newData.order_state = 2\n    firebase.database(old).ref(`order/${newData.key}`)\n    .update({\n      ...newData\n    })\n\n    /*\n    firebase.database().ref('order')\n    .once(\"value\",data=>{\n      data.forEach(el=>{                                \n        if(el.val().timestamp < (new Date().getTime() - 2592000000)){\n          firebase.database().ref(`order/${el.key}`).remove()\n        }\n      })\n    })  \n    */\n\n    let time = getFormatDate(new Date(key.order_time.split(\"|\")[0]));\n    time = time.full+time.hour+time.min+time.sec\n    let url = \"https://metree.co.kr/_sys/_xml/order_kakao.php?order_tel=\"+ key.order_phone +\"&goods_name=\"+ key.prod_name + \"&order_time=\" + time;\n    window.open(url,'kakao',\"height=1,width=1\");\n    return;\n  }\n  \n  const orderCancel = (key,uid) => {\n    if (window.confirm(\"주문 취소 하시겠습니까?\")) {\n      firebase.database().ref(\"order\").child(key).remove()\n      firebase\n        .database()\n        .ref(\"products\")\n        .child(uid)\n        .transaction((pre) => {\n          if(pre.jaego >= 0){\n            pre.jaego++;\n            return pre;\n          }\n        });\n        message.success('주문이 취소되었습니다.');\n    }\n  }\n\n\n  return (\n    <>\n      <h3 className=\"title\">주문관리</h3>\n      <div style={{ marginBottom: \"15px\" }}>\n        <Radio.Group onChange={onSoundChange} value={SoundSelect}>\n          <Radio.Button value=\"\">무음</Radio.Button>\n          <Radio.Button value={src1}>주문-여자</Radio.Button>\n          <Radio.Button value={src2}>주문-남자</Radio.Button>\n          <Radio.Button value={src3}>주문-여자아이</Radio.Button>\n          <Radio.Button value={src4}>주문-남자아이</Radio.Button>\n          <Radio.Button value={src5}>효과음1</Radio.Button>\n          <Radio.Button value={src6}>효과음2</Radio.Button>\n          <Radio.Button value={src7}>효과음3</Radio.Button>\n        </Radio.Group>\n      </div>\n      <OrderBox className=\"order-list-box\">\n        {OrderList.map((list, index) => (\n          <div className={`list state_${list.order_state}`} key={index}>\n            <span style={{ display: \"none\" }}>{list.key}</span>\n            <div className=\"from\">\n              <span>{list.order_name}</span>\n              <span>{list.order_part}</span>\n            </div>\n            <div className=\"prod\">\n              <div className=\"info-box\">\n                <span className=\"info\">\n                  {list.prod_name}{list.prod_option ? `-${list.prod_option}`:\"\"}\n                </span>\n                {list.hot === \"hot\" ? (\n                  <span className=\"ic-hot shrink-0\"></span>\n                ) : list.hot === \"ice\" ? (\n                  <span className=\"ic-ice shrink-0\"></span>\n                ) : (\n                  \"\"\n                )}\n                {/* <span className=\"info shrink-0\">{list.amount}개</span> */}\n                {list.add && (\n                      <span className=\"info shrink-0\">{list.add}</span>\n                    )}\n                {list.add2 && list.add2[0] && (\n                  <span className=\"info shrink-0\">{list.add2[0]}</span>\n                )}\n                {list.add2 && list.add2[1] && (\n                  <span className=\"info shrink-0\">{list.add2[1]}</span>\n                )}\n                {list.milk && (\n                  <span className=\"info shrink-0\">{list.milk}</span>\n                )}\n              </div>\n              <span className=\"shrink-0\">{commaNumber(parseInt(list.price))}원</span>\n            </div>\n            <div style={{color:\"red\",fontWeight:\"500\"}}>\n                {list.order_etc && list.order_etc}\n            </div>\n            <div className=\"state\">\n              <span className=\"date\">\n                {list.order_time}\n              </span>\n              <div>\n              \n              {list.order_state === 0 &&\n              <>\n                <Button style={{marginRight:\"5px\"}}\n                  onClick={() => {\n                    orderCancel(list.key,list.prod_uid);\n                  }}\n                >\n                  주문취소\n                </Button>\n                <Button\n                  onClick={() => {\n                    stateChange(list.key);\n                  }}\n                >\n                  주문접수\n                </Button>\n              </>\n              }\n              {list.order_state === 1 &&\n              <Button\n                onClick={() => {\n                  stateChange2(list.key);\n                  kakaoSend(list);\n                }}\n              >\n                완료처리\n              </Button>\n              }\n              </div>\n            </div>\n          </div>\n        ))}\n      </OrderBox>\n    </>\n  );\n}\n\nexport default AdminOrder;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\LunchAdmin.js",["307","308","309","310","311","312","313","314","315","316","317","318"],"import React, { useState, useEffect } from 'react';\r\nimport { Input,Button,DatePicker,Checkbox,Upload,message } from 'antd';\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport moment from 'moment';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport uuid from \"react-uuid\";\r\nconst { TextArea } = Input;\r\nconst curDate = getFormatDate(new Date());\r\n\r\nfunction LunchAdmin() {\r\n\r\n  const [ItemList, setItemList] = useState();\r\n  const [CheckInfoTxt, setCheckInfoTxt] = useState();\r\n  const [TblItem, setTblItem] = useState();\r\n  const [CheckList, setCheckList] = useState();\r\n  const [ItemSum, setItemSum] = useState();\r\n\r\n  const [SearchDate, setSearchDate] = useState(curDate);\r\n  const [CheckLength, setCheckLength] = useState();\r\n\r\n  const [Ruser, setRuser] = useState();\r\n  const [NonChecker, setNonChecker] = useState();\r\n\r\n  const [Render, setRender] = useState(true);\r\n\r\n  const [Filter, setFilter] = useState();\r\n  const onFilterChange = (e) => {\r\n    setFilter(e)\r\n    setRender(!Render)\r\n  }\r\n\r\n  const [DefaultImg, setDefaultImg] = useState()\r\n\r\n  useEffect(() => {\r\n    let r_user = []\r\n    firebase.database().ref('users')\r\n    .once('value', (snapshot) => {\r\n      snapshot.forEach(el => {\r\n        if(el.val().role == \"0\"){\r\n            r_user.push({\r\n            name: el.val().name,\r\n            part: el.val().part,\r\n            role: el.val().role,\r\n          })\r\n        }\r\n      });\r\n      \r\n      setRuser(r_user);\r\n    })\r\n    let itemArr = [];\r\n    let itemObj = {};\r\n    firebase.database().ref('lunch/item')\r\n    .once('value', (snapshot) => {\r\n      snapshot.forEach(el => {\r\n        itemArr.push(el.val())\r\n      });\r\n      itemArr.map(el=>{\r\n        itemObj[el] = 0;\r\n      })\r\n      setTblItem(itemArr);\r\n      itemArr = itemArr.join(',');      \r\n      setItemList(itemArr)\r\n    })\r\n    firebase.database().ref('lunch/info')\r\n      .on('value', (snapshot) => {\r\n        setCheckInfoTxt(snapshot.val())        \r\n    });\r\n    firebase.database().ref('lunch/user')\r\n    .once('value', (snapshot) => {\r\n      let arr = [];\r\n      let listDate = SearchDate.full ? SearchDate.full : curDate.full\r\n      snapshot.forEach(el => {\r\n        let elItemArr;\r\n        if(el.val().checkList && el.val().checkList[listDate]){\r\n          elItemArr = el.val().checkList[listDate].item;\r\n        }\r\n        if(elItemArr){\r\n          elItemArr.map(el=>{\r\n          itemObj[el] += 1;\r\n          })       \r\n          arr.push({\r\n            uid: el.key,\r\n            name: el.val().name,\r\n            part: el.val().part,\r\n            item: elItemArr,\r\n            confirm: el.val().checkList[listDate].confirm,\r\n          })\r\n        }\r\n      })\r\n      if(Filter && Filter.length > 0){\r\n        arr = arr.filter(el=>{\r\n          let res;\r\n          let count = 0;\r\n          Filter.map(item=>{\r\n            el.item.includes(item) ? count = count+1 : count = count;\r\n          })\r\n          return count > 0 ? el : \"\"\r\n        })\r\n      }\r\n      arr.sort((a,b)=>{\r\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\r\n      })\r\n      setCheckLength(arr.length)\r\n      setCheckList(arr);\r\n      setItemSum(itemObj);\r\n      let checker = [];\r\n      let allName = [];\r\n      let nonChecker = [];\r\n      Ruser && Ruser.map(el => {\r\n        allName.push(el.name);\r\n        arr.map(list => {\r\n          if(list.name.includes(el.name) && list.part.includes(el.part)){\r\n            checker.push(list.name)\r\n          }\r\n        })\r\n      })\r\n      nonChecker = allName.filter(el => {\r\n        return !checker.includes(el);\r\n      })\r\n      setNonChecker(nonChecker);\r\n    })\r\n\r\n    \r\n\r\n    return () => {\r\n    }\r\n  }, [Ruser,Render])\r\n\r\n  useEffect(() => {\r\n    firebase.database().ref('lunch/img')\r\n    .on(\"value\",data => {\r\n      setDefaultImg(data.val())\r\n    })\r\n    return () => {\r\n      firebase.database().ref('lunch/img').off()\r\n    }\r\n  }, [])\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if(uploadImg){\r\n        console.log(uploadImg)\r\n        let uploadTask = await firebase\r\n        .storage()\r\n        .ref(`lunch_img/lunchImg`)\r\n        .put(uploadImg.originFileObj, uploadImg.type);\r\n        uploadTask.ref.getDownloadURL()\r\n        .then(url => {\r\n          let uploadURL = {\r\n            name:uploadImg.originFileObj.name,\r\n            url:url\r\n          };\r\n          firebase.database().ref('lunch/img')\r\n          .update({\r\n            img:uploadURL\r\n          });                       \r\n        })\r\n      }\r\n\r\n      let arr;\r\n      arr = e.target.item.value.split(',');      \r\n      firebase.database().ref('lunch')\r\n      .update({\r\n        item:arr,\r\n        info:e.target.check_info_txt.value\r\n      })\r\n\r\n      message.success('설정이 저장되었습니다 :)');\r\n\r\n    }catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    setSearchDate(getFormatDate(date._d))\r\n    setRender(!Render)\r\n  }\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current > moment().add(14, 'days');\r\n  }\r\n\r\n  const onConfrim =(user) => {\r\n    let date = SearchDate.full;\r\n    try {\r\n      firebase.database().ref(`lunch/user/${user.uid}/checkList/${date}`)\r\n      .update({\r\n        confirm: 1\r\n      })\r\n      setRender(!Render)\r\n    }catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const [ModifyData, setModifyData] = useState()\r\n  const [ModifyCheck, setModifyCheck] = useState();\r\n  const onModifyCheck = (e) => {\r\n    setModifyCheck(e)\r\n  }\r\n  const onModify = (el) => {\r\n    setModifyData(el)\r\n  }\r\n\r\n  const onModifySubmit = (el) => {\r\n    let itemList = ModifyCheck ? ModifyCheck : el.item\r\n    console.log(itemList);\r\n    firebase.database().ref(`lunch/user/${el.uid}/checkList/${SearchDate.full}`)\r\n    .update({\r\n      item:itemList\r\n    });\r\n    setModifyData();\r\n    setModifyCheck();\r\n    setRender(!Render);\r\n  }\r\n\r\n  const onModifyClose = () => {\r\n    setModifyData();\r\n    setModifyCheck();\r\n  }\r\n\r\n  const [uploadImg, setuploadImg] = useState()\r\n  const onImgUpload = (e) => {\r\n\r\n      setuploadImg(e.file);\r\n\r\n  }\r\n\r\n  const onImgRemove = () => {\r\n\r\n    const ref = firebase.storage().ref(`lunch_img`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n          let path = el._location.path_;\r\n          firebase.storage().ref(`${path}`).delete()\r\n          .then(()=>{\r\n          }).catch(error=>console.error(error))\r\n        })\r\n      })\r\n\r\n      firebase.database().ref(`lunch/img`)\r\n      .remove()\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {ItemList && \r\n        <>          \r\n          <form onSubmit={onSubmit}>\r\n            <h3 className=\"title\" style={{ margin: \"0 0 5px 0\" }}>\r\n              식단 항목\r\n            </h3>\r\n            <div className=\"flex-box\">\r\n              <Input name=\"item\" defaultValue={ItemList} />\r\n            </div>\r\n            <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n              항목 설명글\r\n            </h3>\r\n            {CheckInfoTxt &&\r\n            <div className=\"flex-box\">\r\n              <TextArea name=\"check_info_txt\" defaultValue={CheckInfoTxt} />              \r\n            </div>\r\n            }\r\n            <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n              일반식 식단표\r\n            </h3>\r\n            <div className=\"flex-box\">\r\n              {DefaultImg ? (\r\n                <>\r\n                  <Upload \r\n                  \r\n                  fileList={[\r\n                      {\r\n                      uid:\"1\",\r\n                      name:DefaultImg.img.name,\r\n                      status:\"done\",\r\n                      url:DefaultImg.img.url,\r\n                      }\r\n                    ]}\r\n                    listType=\"picture\"\r\n                    name=\"uploadImg\"\r\n                    onChange={onImgUpload}\r\n                    onRemove={onImgRemove}\r\n                  >\r\n                    <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n                  </Upload>\r\n                </>\r\n              ):(\r\n                <>\r\n                  <Upload                     \r\n                    listType=\"picture\"\r\n                    name=\"uploadImg\"\r\n                    onChange={onImgUpload}\r\n                    onRemove={onImgRemove}\r\n                  >\r\n                    <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n                  </Upload>\r\n                </>\r\n              )}\r\n              \r\n            </div>\r\n            <div style={{textAlign:\"center\"}}>\r\n              <Button\r\n                      htmlType=\"submit\"\r\n                      type=\"primary\"\r\n                      size=\"large\" \r\n                      style={{marginTop:\"10px\"}}               \r\n                    >\r\n                      설정저장\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </>\r\n      }\r\n      <h3 className=\"title\" style={{ margin: \"20px 0 5px 0\" }}>\r\n        식단체크\r\n      </h3>\r\n      <div className=\"flex-box a-center\">\r\n        <DatePicker \r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          style={{marginRight:\"10px\"}}\r\n          disabledDate={disabledDate} onChange={onSelectDate} \r\n        />\r\n        <Checkbox.Group style={{ width: '100%' }} onChange={onFilterChange}>\r\n        {TblItem && TblItem.map((el,idx) => (\r\n          <Checkbox key={idx} value={el}>{el}</Checkbox>\r\n        ))}\r\n        </Checkbox.Group>\r\n      </div>\r\n\r\n      <table className=\"fl-table tbl-lunch-check\" style={{marginTop:\"12px\"}}>\r\n        <thead>\r\n          <tr key=\"0\">\r\n            <th scope=\"col\">날짜</th>\r\n            <th scope=\"col\">이름</th>\r\n            <th scope=\"col\">부서</th>\r\n            {TblItem && TblItem.map(el => (\r\n              <th scope=\"col\">{el}</th>\r\n            ))}\r\n            <th scope=\"col\">확인여부</th>\r\n            <th scope=\"col\">수정</th>\r\n          </tr>          \r\n        </thead>\r\n        <tbody>\r\n          {CheckList && CheckList.map((el,idx) => (\r\n            <tr key={idx+1}>\r\n              <td>{SearchDate.full_}</td>\r\n              <td>\r\n                {el.name}\r\n              </td>\r\n              <td>{el.part}</td>\r\n              {TblItem && TblItem.map((list,l_idx) => (\r\n                  <td>\r\n                    {el.item.includes(list) && 1}\r\n                  </td>\r\n              ))}\r\n              <td>\r\n              {el.confirm ? 'O' : <Button onClick={()=>{onConfrim(el)}}>확인</Button>}\r\n              </td>\r\n              <td style={{position:\"relative\"}}>\r\n                <Button className=\"sm\" style={{marginRight:\"5px\"}} onClick={()=>onModify(el)}>수정</Button>\r\n                {(ModifyData && el.uid === ModifyData.uid) &&\r\n                  <OderModalPopup\r\n                    className=\"lunch-check-modify\"\r\n                    style={{\r\n                      maxWidth:\"100px\",\r\n                      flexDirection:\"column\",\r\n                      position:\"absolute\",\r\n                      top:\"10px\",left:\"-130px\"\r\n                    }}\r\n                  >\r\n                    <h3>{ModifyData.name}({ModifyData.part})</h3>\r\n                    <Checkbox.Group                     \r\n                    defaultValue={el.item}\r\n                    style={{ width: '100%' }} \r\n                    onChange={onModifyCheck}>\r\n                      {TblItem && TblItem.map((el,idx)=>(\r\n                        <Checkbox key={idx} value={el}>\r\n                          {el}\r\n                        </Checkbox>\r\n                      ))}\r\n                    </Checkbox.Group>\r\n                    <div style={{marginTop:\"10px\"}}>\r\n                      <Button type=\"primary\" style={{marginRight:\"5px\"}} onClick={()=>onModifySubmit(el)}>수정</Button>\r\n                      <Button onClick={onModifyClose}>닫기</Button>\r\n                    </div>\r\n                  </OderModalPopup>\r\n                }\r\n              </td>\r\n            </tr>\r\n          ))}\r\n          {/* <tr>\r\n            <td>{SearchDate.full_}</td>\r\n            <td>합계</td>\r\n            <td>{CheckLength}</td>\r\n            {TblItem && TblItem.map((el,idx) => (\r\n              <td>\r\n                {ItemSum && ItemSum[el]}\r\n              </td>\r\n            ))}\r\n            <td></td>\r\n          </tr> */}\r\n        </tbody>\r\n      </table>\r\n      <table className=\"fl-table tbl-lunch-check\" style={{marginTop:\"10px\"}}>\r\n        <thead>\r\n          <tr key=\"0\">\r\n            <th scope=\"col\">날짜</th>\r\n            <th scope=\"col\">인원</th>\r\n            {TblItem && TblItem.map(el => (\r\n              <th scope=\"col\">{el}</th>\r\n            ))}\r\n          </tr>          \r\n        </thead>\r\n        <tbody>\r\n        <tr>\r\n            <td>{SearchDate.full_}</td>\r\n            <td>{CheckLength}</td>\r\n            {TblItem && TblItem.map((el,idx) => (\r\n              <td>\r\n                {ItemSum && ItemSum[el]}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      {NonChecker &&\r\n        <> \r\n          <div style={{marginTop:\"15px\",fontSize:\"12px\"}}>\r\n          <span>없는 사람 : </span>\r\n          {NonChecker.map((el,idx) => (\r\n            parseInt(NonChecker.length-1) == idx ? el : el+', '\r\n          ))}\r\n          </div>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LunchAdmin\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\AdminProdCount.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\Research\\Research.js",["319","320","321","322","323","324","325","326","327","328","329"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\"\r\nconst curDate = getFormatDate(new Date());\r\n\r\nfunction Research() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ResearchList, setResearchList] = useState()\r\n  const [ReRender, setReRender] = useState(false)\r\n  useEffect(() => {\r\n    let arr = [];\r\n    firebase.database().ref('research')\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        (\r\n          el.val().member_check && el.val().member_check.includes(userInfo.uid) || \r\n        el.val().alba && userInfo.auth && userInfo.auth.includes('alba') || \r\n        el.val().intern && userInfo.auth && userInfo.auth.includes('intern')\r\n        ) ? console.log() : \r\n        arr.push(el.val())\r\n      })\r\n      arr = arr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      setResearchList(arr)\r\n    })\r\n    return () => {\r\n      \r\n    }\r\n  }, [ReRender])\r\n  \r\n\r\n  const onDelete = (uid) => {\r\n    let a = window.confirm('이 게시물을 삭제 하시겠습니까?')\r\n    if(a){\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n          let path = el._location.path_;\r\n          firebase.storage().ref(`${path}`).delete()\r\n          .then(()=>{\r\n          }).catch(error=>console.error(error))\r\n        })\r\n      })\r\n      firebase.database().ref(`research/${uid}`)\r\n      .remove()\r\n      setReRender(!ReRender)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <ul className=\"board-basic research\">\r\n          <li key=\"0\" className=\"tit\">\r\n            <div className=\"info-box\">\r\n              <span className=\"date limit\">기한</span>\r\n              <span className=\"state\">상태</span>\r\n              <span className=\"subject\">제목</span>\r\n            </div>\r\n            <div className=\"right-box\">\r\n              <span className=\"date\">날짜</span>\r\n              {userInfo && userInfo.auth && userInfo.auth.includes('insa') &&\r\n                <span className=\"admin\"></span>\r\n              }\r\n            </div>\r\n          </li>        \r\n          {ResearchList && ResearchList.map((el,idx) => (\r\n            <li key={idx+1} >\r\n              <div className=\"info-box\">\r\n                <span className=\"date limit\">\r\n                  {el.limit_start == 0 && \r\n                    <>\r\n                    무기한\r\n                    </>\r\n                  }\r\n                  {el.limit_start != 0 && \r\n                    <>\r\n                    {getFormatDate(new Date(el.limit_start)).full_} ~ {getFormatDate(new Date(el.limit_end)).full_}\r\n                    </>\r\n                  }\r\n                </span>\r\n                {el.limit_start < new Date().getTime() && \r\n                 el.limit_end > new Date().getTime() && \r\n                 <span className=\"state con\"><span>진행</span></span>\r\n                }\r\n                {el.limit_start > new Date().getTime() && \r\n                  <span className=\"state con yet\"><span>예정</span></span>\r\n                }\r\n                {el.limit_end < new Date().getTime() && \r\n                  <span className=\"state con end\"><span>마감</span></span>\r\n                }\r\n                <span className={`subject`}>\r\n                  <Link to={{\r\n                    pathname: `/research_view`,\r\n                    state: {\r\n                      uid:el.uid\r\n                    }\r\n                  }}\r\n                    >{el.title}\r\n                  </Link>\r\n                </span>\r\n              </div>\r\n              <div className=\"right-box\">\r\n                <span className=\"date\">{el.date}</span>\r\n                {userInfo && userInfo.auth && userInfo.auth.includes('insa') && \r\n                  <span className=\"admin\">                    \r\n                    <Button onClick={()=>{onDelete(el.uid)}}>삭제</Button>\r\n                  </span>\r\n                }\r\n              </div>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {userInfo && userInfo.auth && userInfo.auth.includes('insa') &&\r\n      <div style={{textAlign:\"right\",marginTop:\"15px\"}}>\r\n        <Button style={{width:\"100px\"}} type=\"primary\">\r\n          <Link to=\"/research_write\">게시물 등록</Link>\r\n        </Button>\r\n      </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Research\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\UserAdmin.js",["330","331","332","333","334"],"import React, {useState, useEffect } from 'react'\r\nimport firebase from \"../../firebase\";\r\nimport { Table, Button, Space, Form } from 'antd';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\n\r\nfunction UserAdmin() {\r\n  const [TotalUser, setTotalUser] = useState();\r\n  const [ReRender, setReRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('click',(e)=>{\r\n      if(e.target.id == 'btnModify' || e.target.parentElement.id == 'btnModify'){        \r\n        \r\n      }else{\r\n\r\n        e.stopPropagation();\r\n      }\r\n    },true)\r\n\r\n\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          call_number:el.val().call_number,\r\n          email:el.val().email,\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      setTotalUser(userArr);\r\n    });\r\n    return () => {      \r\n    }\r\n  }, []);\r\n\r\n  const deleteUser = (uid) => {\r\n    const confirm = window.confirm('해당 유저를 DB에서 삭제하시겠습니까?');\r\n    if(confirm){\r\n      firebase.database().ref(`users/${uid}`)\r\n      .remove()\r\n      firebase.database().ref(`users/lunch/user/${uid}`)\r\n      .remove()\r\n      alert('삭제되었습니다.')\r\n      setReRender(!ReRender);\r\n    }\r\n  }\r\n\r\n  \r\n  const columns = [    \r\n    {\r\n      title: '이름',\r\n      dataIndex: 'name',\r\n      key: 'name'\r\n    },\r\n    {\r\n      title: '부서',\r\n      dataIndex: 'part',\r\n      key: 'part'\r\n    },\r\n    {\r\n      title: 'uid',\r\n      dataIndex: 'uid',\r\n      key: 'uid',\r\n    },\r\n    {\r\n      title: '이메일',\r\n      dataIndex: 'email'\r\n    },\r\n    {\r\n      title: '전화번호',\r\n      dataIndex: 'call_number',\r\n      key: 'call_number'\r\n    },\r\n    {\r\n      title: 'role',\r\n      dataIndex: 'role',\r\n      key: 'role',\r\n    },\r\n    {\r\n      title: 'auth',\r\n      dataIndex: 'auth',\r\n      key: 'auth',\r\n    },\r\n    {\r\n      title: '관리',\r\n      align:'center',\r\n      dataIndex: 'uid',\r\n      key: 'uid',\r\n      render: uid => (\r\n        <>\r\n          <Space>\r\n            {/* <Button className=\"sm\" id=\"btnModify\" onClick={(e)=>{modifyUser(e,uid)}}>수정</Button> */}\r\n            <Button className=\"sm\" onClick={()=>{deleteUser(uid)}}>삭제</Button>\r\n          </Space>\r\n        </>\r\n      )\r\n    }\r\n    \r\n  ]\r\n  \r\n  const data = TotalUser;\r\n\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const [PosX, setPosX] = useState(0);\r\n  const [PosY, setPosY] = useState(0);\r\n\r\n  const onClosePop = () => {\r\n    console.log(2);\r\n  }\r\n\r\n  const modifyUser = (e,uid) => {\r\n    setPosX(e.clientX);\r\n    setPosY(e.clientY);\r\n    setModifyPop(true);\r\n\r\n  }\r\n\r\n  const onSubmitInfo = () => {\r\n    console.log(1)\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <> \r\n      <Table \r\n        columns={columns} \r\n        dataSource={data} \r\n        pagination={{ pageSize: 100 }}\r\n        rowKey={ item => { return item.uid } }\r\n      />\r\n      {ModifyPop &&\r\n        <OderModalPopup className=\"call_modify\" style={{\r\n          top:`${PosY}px`,\r\n          left:`${PosX}px`,\r\n          transform:\"translate(-110%,-50%)\",\r\n          position:\"fixed\"\r\n        }}>\r\n          <form className=\"order-form-box\" onSubmit={onSubmitInfo}>\r\n            {ModifyData && (\r\n              <>\r\n                {ModifyData.name}\r\n              </>\r\n              )\r\n            }\r\n            <Button>확인</Button>\r\n          </form>\r\n          <div className=\"flex-box j-center\">\r\n            <Button type=\"primary\" onClick={onClosePop}>닫기</Button>\r\n          </div>\r\n        </OderModalPopup>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default UserAdmin\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\HairAdmin.js",["335","336","337","338","339","340","341","342","343","344"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Input, DatePicker, Button, Table, Radio, Select, message } from 'antd';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport { getFormatDate, commaNumber } from '../CommonFunc';\r\nimport moment from 'moment';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport _ from 'lodash';\r\nconst curDate = getFormatDate(new Date());\r\nconst { TextArea } = Input;\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nfunction HairAdmin() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [MyHairData, setMyHairData] = useState();\r\n  const [MetreeData, setMetreeData] = useState();\r\n  const [FoodkingData, setFoodkingData] = useState();\r\n  const [Rerender, setRerender] = useState(false);\r\n  const [SearchDate, setSearchDate] = useState([curDate,curDate]);\r\n\r\n  const [TotalPrice, setTotalPrice] = useState(0);\r\n  const [MeTotalPrice, setMeTotalPrice] = useState(0);\r\n  const [FdTotalPrice, setFdTotalPrice] = useState(0);\r\n  const [TypeTotalPrice, setTypeTotalPrice] = useState(0);\r\n\r\n  const [PersnalData, setPersnalData] = useState();\r\n  const [TotalPersnalData, setTotalPersnalData] = useState();\r\n  const [MePersonalData, setMePersonalData] = useState();\r\n  const [FdPersonalData, setFdPersonalData] = useState();\r\n\r\n  const [HairData, setHairData] = useState();\r\n\r\n  const [CheckInfoTxt, setCheckInfoTxt] = useState(null);\r\n  \r\n  const excelHeaders = [\r\n    {label: \"이용일\", key:\"date\"},\r\n    {label: \"작성일\", key:\"timestamp\"},\r\n    {label: \"소속\", key:\"sosok\"},\r\n    {label: \"부서\", key:\"part\"},\r\n    {label: \"이름\", key:\"name\"},\r\n    {label: \"이용자와의관계\", key:\"relation\"},\r\n    {label: \"서비스명\", key:\"service\"},\r\n    {label: \"가격\", key:\"price\"}\r\n  ]\r\n  const [excelData, setExcelData] = useState()\r\n  const [excelDataCopy, setExcelDataCopy] = useState()\r\n  useEffect(() => {\r\n    firebase.database().ref('hair/info')\r\n      .on('value', (snapshot) => {\r\n        setCheckInfoTxt(snapshot.val())        \r\n    });\r\n\r\n    let hairArr = [];\r\n    let totalPrice = 0;    \r\n    let meTotalPrice = 0;    \r\n    let fdTotalPrice = 0;    \r\n    let personalArr = [];\r\n    let startDate = SearchDate[0].full.substr(0,6);\r\n    let endDate = SearchDate[1].full.substr(0,6);\r\n    firebase\r\n    .database()\r\n    .ref(`hair/list`)\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        let obj = el.val();\r\n        let personalObj = {};\r\n        let personalPrice = 0;\r\n        let dateArr = [];\r\n        let relArr = [];\r\n        let serArr = [];\r\n        let priceArr = [];\r\n        for (let key in obj) {\r\n          let name = obj[key].name;\r\n          let str = obj[key].date.full.toString().substr(0,6);\r\n          if(startDate <= str && str <= endDate){\r\n            personalPrice += parseInt(obj[key].price);\r\n            totalPrice += parseInt(obj[key].price);\r\n            if(obj[key].sosok === '1'){\r\n              meTotalPrice += parseInt(obj[key].price);\r\n            }\r\n            if(obj[key].sosok === '2'){\r\n              fdTotalPrice += parseInt(obj[key].price);\r\n            }\r\n            obj[key].distance =  obj[key].timestamp - new Date(`${obj[key].date.full_} ${obj[key].date.hour}:${obj[key].date.min}`).getTime();\r\n            obj[key].distance = Math.floor(obj[key].distance/1000/60/60/24)\r\n            dateArr.push(obj[key].date)\r\n            dateArr.sort((a,b)=>{\r\n              return b.full - a.full\r\n            })\r\n            relArr.push(obj[key].relation)\r\n            serArr.push(obj[key].service)\r\n            priceArr.push(obj[key].price)            \r\n            personalObj = {\r\n              date : dateArr,\r\n              name : name,\r\n              part : obj[key].part,\r\n              sosok : obj[key].sosok,\r\n              timestamp : obj[key].timestamp,\r\n              relation : relArr, \r\n              service : serArr, \r\n              price : priceArr, \r\n              total_price: personalPrice,\r\n            }\r\n            hairArr.push(obj[key]);\r\n          }\r\n        }\r\n        personalArr.push(personalObj);\r\n        setPersnalData(personalArr);\r\n        setTotalPersnalData(personalArr);\r\n        let mePersnalArr = personalArr.concat().filter(el=>{\r\n          return el.sosok === '1';\r\n        });\r\n        let fdPersnalArr = personalArr.concat().filter(el=>{\r\n          return el.sosok === '2';\r\n        });\r\n        setMePersonalData(mePersnalArr);\r\n        setFdPersonalData(fdPersnalArr);        \r\n        setTotalPrice(totalPrice);\r\n        setTypeTotalPrice(totalPrice);\r\n        setMeTotalPrice(meTotalPrice);\r\n        setFdTotalPrice(fdTotalPrice);\r\n      })      \r\n      hairArr.sort((a,b)=>{\r\n        return b.date.full - a.date.full\r\n      })\r\n      setMyHairData(hairArr);\r\n      setHairData(hairArr);\r\n      let metreeArr = hairArr.concat().filter(el => {\r\n        return el.sosok === '1'\r\n      });\r\n      setMetreeData(metreeArr);\r\n      let foodkingArr = hairArr.concat().filter(el => {\r\n        return el.sosok === '2'\r\n      })\r\n      setFoodkingData(foodkingArr);\r\n\r\n      let excelArr = _.cloneDeep(hairArr).map(el => {\r\n        el.date = el.date.full_;\r\n        el.timestamp = getFormatDate(new Date(el.timestamp)).full_;\r\n        el.price = commaNumber(el.price);\r\n        el.sosok = el.sosok == 1 ? \"미트리\" : \"푸드킹\"\r\n        el.signature = \"\";\r\n        el.uid = \"\";\r\n        el.user_uid = \"\";\r\n        return el;\r\n      });      \r\n      setExcelData(excelArr)\r\n      setExcelDataCopy(excelArr)\r\n\r\n    });\r\n    return () => {\r\n      firebase.database().ref(`users/${userInfo.uid}`).off();\r\n      firebase.database().ref('hair/info').off();\r\n    }\r\n  }, [Rerender,SearchDate]);\r\n  \r\n\r\n  const onDelete = (uid,date,user_uid) => {\r\n    let curDate = getFormatDate(new Date());\r\n    let thisDate = getFormatDate(new Date(date));\r\n    let year = thisDate.year;\r\n    let month = thisDate.og_month;\r\n    let day = thisDate.og_day;\r\n    month++;\r\n    day = 15;\r\n    if(month === 12){\r\n      month = 0;\r\n      year++;\r\n    }\r\n    thisDate = getFormatDate(new Date(year,month,day));\r\n    if(curDate.full>thisDate.full){\r\n      window.alert('삭제는 작성일 기준 익월 15일까지 가능합니다.');\r\n      return;\r\n    }\r\n    let agree = window.confirm('삭제하면 복구가 불가능합니다. 삭제하시겠습니까?');\r\n    if(agree){\r\n      firebase.database().ref(`hair/list/${user_uid}/${uid}`).remove();\r\n      setRerender(!Rerender)\r\n    }\r\n  }\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const onModify = (uid,date,user_uid) => {\r\n    firebase.database().ref(`hair/list/${user_uid}/${uid}`)\r\n    .once(\"value\", (snapshot => {\r\n      setModifyData(snapshot.val());\r\n      return;\r\n    }))\r\n    let curDate = getFormatDate(new Date());\r\n    let thisDate = getFormatDate(new Date(date));\r\n    let year = thisDate.year;\r\n    let month = thisDate.og_month;\r\n    let day = thisDate.og_day;\r\n    month++;\r\n    day = 15;\r\n    if(month === 12){\r\n      month = 0;\r\n      year++;\r\n    }\r\n    thisDate = getFormatDate(new Date(year,month,day));\r\n    if(curDate.full>thisDate.full){\r\n      window.alert('수정은 작성일 기준 익월 15일까지 가능합니다.');\r\n      return;\r\n    }\r\n    setModifyPop(true)\r\n  }\r\n  const modifyOff = () => {\r\n    setModifyData('');\r\n    setModifyPop(false)\r\n  }\r\n\r\n  const onSubmitModify = (e) => {\r\n    e.preventDefault();\r\n    let date = e.target.date.value;\r\n    let year = date.substr(0,4);\r\n    let month = date.substr(5,2);\r\n    month = parseInt(month) - 1;\r\n    let day = date.substr(8,2);\r\n    date = getFormatDate(new Date(year,month,day))\r\n    firebase\r\n    .database()\r\n    .ref(\"hair/list\")\r\n    .child(`${ModifyData.user_uid}/${ModifyData.uid}`)\r\n    .update({\r\n      date:date,\r\n      price: e.target.price.value,\r\n      relation: e.target.querySelector('.ant-select-selection-item').title,\r\n      service: e.target.service.value,\r\n    });\r\n    setRerender(!Rerender)\r\n    modifyOff()\r\n  }\r\n\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    let arr = [];\r\n    arr.push(getFormatDate(date[0]._d))\r\n    arr.push(getFormatDate(date[1]._d))\r\n    setSearchDate(arr)\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current > moment();\r\n  }\r\n\r\n  const [sosokType, setsosokType] = useState('1')\r\n  const onSosokChange = (e) => {\r\n    let excelArr = excelDataCopy;\r\n    const type = e.target.value;\r\n    setsosokType(type);\r\n    if(type === '1'){      \r\n      setHairData(MyHairData);\r\n      setTypeTotalPrice(TotalPrice);\r\n      setPersnalData(TotalPersnalData);\r\n    }\r\n    if(type === '2'){\r\n      excelArr = excelArr.filter(el => el.sosok === '미트리');\r\n      setHairData(MetreeData);\r\n      setTypeTotalPrice(MeTotalPrice);\r\n      setPersnalData(MePersonalData);\r\n    }\r\n    if(type === '3'){\r\n      excelArr = excelArr.filter(el => el.sosok === '푸드킹');\r\n      setHairData(FoodkingData);\r\n      setTypeTotalPrice(FdTotalPrice);\r\n      setPersnalData(FdPersonalData);\r\n    }\r\n    setExcelData(excelArr);\r\n    \r\n\r\n\r\n  }\r\n  \r\n    const columns = [\r\n      {\r\n        title: '이용일',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.date.full - b.date.full,\r\n          multiple: 3,\r\n        },\r\n        render: data => data ? data.full_ : '',\r\n      },\r\n      {\r\n        title: '작성일',\r\n        dataIndex: 'date,timestamp',\r\n        key: 'timestamp',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.timestamp - b.timestamp,\r\n          multiple: 2,\r\n        },\r\n        render: (text,row) => row['distance'] > 4 ? <span style={{background:\"#e12424\",color:\"#fff\"}}>{getFormatDate(new Date(row['timestamp'])).full_}</span> : (\r\n          <>\r\n          {getFormatDate(new Date(row['timestamp'])).full_}\r\n          </>\r\n          ),\r\n      },\r\n      {\r\n        title: '소속',\r\n        dataIndex: 'sosok',\r\n        key: 'sosok',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.sosok - b.sosok,\r\n          multiple: 1,\r\n        },\r\n        render: data => {\r\n          let txt\r\n          if(data == 1){\r\n            txt = \"미트리\";\r\n          }\r\n          if(data == 2){\r\n            txt = \"푸드킹\";\r\n          }\r\n          if(data == 3){\r\n            txt = \"계약직\";\r\n          }\r\n          return txt\r\n        }\r\n      },\r\n      {\r\n        title: '부서',\r\n        dataIndex: 'part',\r\n        key: 'part',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '이름',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '이용자와의 관계',\r\n        dataIndex: 'relation',\r\n        key: 'relation',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '서비스명',\r\n        dataIndex: 'service',\r\n        key: 'service',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: '가격',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n        align: 'center',\r\n        render: data => data ? `${commaNumber(data)}원` : ''\r\n      },\r\n      {\r\n        title: '서명',\r\n        dataIndex: 'signature',\r\n        key: 'signature',\r\n        align: 'center',\r\n        render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n      },\r\n      {\r\n        title: '관리',\r\n        dataIndex: ['uid','timestamp','user_uid','date'],\r\n        key: 'uid',\r\n        align: 'center',\r\n        render: (text,row) => row['uid'] ? (\r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={()=>{onModify(row['uid'],row['timestamp'],row['user_uid'])}}>수정</Button>\r\n            <Button onClick={()=>{onDelete(row['uid'],row['timestamp'],row['user_uid'])}}>삭제</Button>            \r\n          </>\r\n          ) : '',\r\n      }\r\n      \r\n    ]\r\n\r\n   \r\n    const onSubmit = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n        firebase.database().ref('hair')\r\n        .update({\r\n          info:e.target.check_info_txt.value\r\n        })\r\n        .then(res => {\r\n          message.success(\"저장되었습니다.\")\r\n        })\r\n      }catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    \r\n    \r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n      <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n        공지사항\r\n      </h3>\r\n      <div className=\"flex-box\">\r\n        {CheckInfoTxt &&\r\n          <TextArea name=\"check_info_txt\" defaultValue={CheckInfoTxt} />  \r\n        }\r\n        {!CheckInfoTxt &&\r\n          <TextArea name=\"check_info_txt\" defaultValue=\"\" /> \r\n        }\r\n        <Button\r\n          htmlType=\"submit\"\r\n          type=\"primary\"\r\n          size=\"large\" \r\n          style={{flex:\"1\",marginLeft:\"10px\",height:\"auto\"}}               \r\n        >\r\n          저장\r\n        </Button>\r\n      </div>\r\n      </form>\r\n      \r\n      <RangePicker \r\n        picker=\"month\" \r\n        style={{marginTop:\"20px\"}}\r\n        defaultValue={[moment(),moment()]}\r\n        disabledDate={disabledDate} onChange={onSelectDate}\r\n      />\r\n      <Radio.Group value={sosokType} onChange={onSosokChange} style={{ marginBottom: 16,marginLeft:\"10px\" }}>\r\n        <Radio.Button value=\"1\">전체</Radio.Button>\r\n        <Radio.Button value=\"2\">미트리</Radio.Button>\r\n        <Radio.Button value=\"3\">푸드킹</Radio.Button>\r\n      </Radio.Group>\r\n      <h3 className=\"title\">개인별 합계</h3>\r\n      {PersnalData &&\r\n        <table className=\"fl-table\" style={{marginBottom:\"20px\",width:\"25%\"}}>\r\n          <thead>\r\n            <tr style={{borderBottom:'1px solid #ddd',borderTop:'2px solid #555'}}>\r\n              <th scope=\"col\">이름</th>\r\n              <th scope=\"col\">합계</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {PersnalData && PersnalData.map((el) => (\r\n            <>\r\n              {el.date && el.date.map((list,_idx) => (\r\n                <>                      \r\n                  <tr key={_idx} style={{borderBottom:'1px solid #ddd'}}>\r\n                    {_idx == 0 &&\r\n                    <th scope=\"row\" rowSpan={el.date.length} style={{background:'#f1f1f1'}}>\r\n                      {el.name}\r\n                    </th>\r\n                    }\r\n                    {_idx == 0 &&\r\n                    <>\r\n                      <th scope=\"row\" rowSpan={el.date.length}>\r\n                        {commaNumber(el.total_price)}\r\n                      </th>\r\n                    </>\r\n                    }\r\n                  </tr>\r\n                </>\r\n              ))}     \r\n            </>\r\n          ))\r\n          }\r\n          </tbody>\r\n        </table>\r\n      }\r\n\r\n      <h3 className=\"title\">개인별 내역</h3>\r\n      {PersnalData &&\r\n        <table className=\"fl-table\" style={{marginBottom:\"20px\"}}>\r\n          <thead>\r\n            <tr style={{borderBottom:'1px solid #ddd',borderTop:'2px solid #555'}}>\r\n              <th scope=\"col\">이름(소속/부서)</th>\r\n              <th scope=\"col\">이용일</th>\r\n              <th scope=\"col\">관계</th>\r\n              <th scope=\"col\">서비스</th>\r\n              <th scope=\"col\">가격</th>\r\n              <th scope=\"col\">총 이용횟수</th>\r\n              <th scope=\"col\">합계</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {PersnalData && PersnalData.map((el) => (\r\n            <>\r\n              {el.date && el.date.map((list,_idx) => (\r\n                <>                      \r\n                  <tr key={_idx} style={{borderBottom:'1px solid #ddd'}}>\r\n                    {_idx == 0 &&\r\n                    <th scope=\"row\" rowSpan={el.date.length} style={{background:'#f1f1f1'}}>\r\n                      {el.name}/\r\n                      {el.sosok === '1' ? \"미트리\" :\r\n                       el.sosok === '2' ? \"푸드킹\" : \"\" \r\n                      }/\r\n                      {el.part}\r\n                    </th>\r\n                    }\r\n                    <td>{list.full_}</td>\r\n                    <td>{el.relation[_idx]}</td>\r\n                    <td> {el.service[_idx]}</td>\r\n                    <td>{commaNumber(el.price[_idx])}</td>\r\n                    {_idx == 0 &&\r\n                    <>\r\n                      <td rowSpan={el.date.length}>{el.date.length}회</td>\r\n                      <th scope=\"row\" rowSpan={el.date.length}>\r\n                        {commaNumber(el.total_price)}\r\n                      </th>\r\n                    </>\r\n                    }\r\n                  </tr>\r\n                </>\r\n              ))}     \r\n            </>\r\n          ))\r\n          }\r\n          </tbody>\r\n        </table>\r\n      }\r\n      <div className=\"flex-box\" style={{marginBottom:\"8px\",marginTop:\"25px\"}}>\r\n      <h3 className=\"title\">전체 내역</h3>      \r\n      {excelData &&\r\n        <Button style={{marginLeft:\"10px\"}}>\r\n          <CSVLink \r\n            headers={excelHeaders} \r\n            data={excelData} \r\n            filename={`metree-hair${curDate.full}.csv`} \r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />전체내역 엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n        }\r\n      </div>\r\n      {MyHairData &&\r\n        <>          \r\n          <Table \r\n          size=\"small\"\r\n          pagination={{\r\n            pageSize:20\r\n          }}\r\n          align=\"center\" columns={columns} dataSource={HairData} \r\n          footer={() => (\r\n            <>\r\n              <div style={{textAlign:\"center\",fontWeight:\"600\"}}>가격 합계 : {commaNumber(TypeTotalPrice)}원</div>\r\n            </>\r\n          )}\r\n          /> \r\n\r\n        </>\r\n      }\r\n      {\r\n        ModifyPop && ModifyData &&\r\n        <>\r\n          <OderModalPopup className=\"call_modify\" style={{\r\n            top:\"50%\",\r\n            left:\"50%\",\r\n            transform:\"translate(-50%,-50%)\",\r\n            position:\"fixed\",\r\n          }}>\r\n            <form className=\"order-form-box\" onSubmit={onSubmitModify}>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">이용날짜</span>\r\n                <DatePicker name=\"date\" defaultValue={moment(ModifyData.date.full_)} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">관계</span>\r\n                <Select name=\"relation\" defaultValue={ModifyData.relation} style={{ width: 120 }}>\r\n                  <Option value=\"본인\">본인</Option>\r\n                  <Option value=\"배우자\">배우자</Option>\r\n                  <Option value=\"자녀\">자녀</Option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">서비스명</span>\r\n                <Input name=\"service\" defaultValue={ModifyData.service} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">가격</span>\r\n                <Input prefix=\"￦\" type=\"number\" name=\"price\" defaultValue={ModifyData.price} />\r\n              </div>\r\n              <div className=\"btn-box\">\r\n                <Button type=\"primary\" htmlType=\"submit\">수정하기</Button>\r\n                <Button onClick={modifyOff} style={{marginLeft:\"5px\"}}>닫기</Button>\r\n              </div>\r\n            </form>\r\n          </OderModalPopup>\r\n        </>\r\n      }\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HairAdmin\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchWrite.js",["345","346","347","348","349","350","351","352","353","354"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchWrite() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [TempList, setTempList] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      console.log(userArr)\r\n      setTotalUser(userArr);\r\n    });\r\n\r\n    let arr = [];\r\n    firebase.database().ref(`research_temp/${userInfo.uid}`)\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        arr.push(el.val())          \r\n      })\r\n      arr = arr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      setTempList(arr)\r\n    })\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = uuid();\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  const finishDataSave = (values) => {\r\n    let uploadURL = [];            \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    let getImg = async () => {\r\n    let uploadTask = await firebase\r\n        .storage()\r\n        .ref(\"research\")\r\n        .child(`image/${uid}/${uuid()}`)          \r\n        .put(el.originFileObj, el.type);\r\n          uploadTask.ref.getDownloadURL()\r\n          .then(url => {\r\n            uploadURL.push({\r\n              name:el.originFileObj.name,\r\n              url:url\r\n            });\r\n            firebase.database().ref('research')\r\n            .child(uid)\r\n            .update({\r\n              image: uploadURL\r\n            });                       \r\n          });\r\n        }\r\n        getImg();\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.temp){\r\n      let uid = uuid();\r\n      firebase.database().ref(`research_temp/${userInfo.uid}`)\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n      btnToList.current && btnToList.current.click();\r\n    }else{\r\n      if(values.type != 2){\r\n        let listLength = values.option_list.length;\r\n        let count = 0;\r\n\r\n        values.option_list.map(el=>{\r\n          el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n          el.option_a = el.option_a ? el.option_a : \"\";\r\n          el.option_type = el.option_type ? el.option_type : \"\";\r\n          let urlArr = [];  \r\n          count++;    \r\n          const getOptionImgUrl = (photo) => {\r\n              if(!photo){\r\n                if(count == listLength){\r\n                  finishDataSave(values);\r\n                  btnToList.current && btnToList.current.click();\r\n                }\r\n              }else{\r\n              photo.map((list,idx)=>{\r\n              let getImg = async () => {\r\n              let uploadTask = await firebase\r\n                  .storage()\r\n                  .ref(\"research\")\r\n                  .child(`image/${uid}/${uuid()}`)          \r\n                  .put(list.originFileObj, list.type);\r\n                    uploadTask.ref.getDownloadURL()\r\n                    .then(url => {\r\n                      urlArr.push({\r\n                        uid:idx,\r\n                        status:\"done\",\r\n                        name:list.originFileObj.name,\r\n                        url:url\r\n                      });\r\n                      firebase.database().ref('research')\r\n                      .child(`${uid}/option/${idx}`)\r\n                      .update({\r\n                        option_photo: urlArr\r\n                      });                \r\n                      el.option_photo = urlArr ? urlArr : '';                \r\n                      if(count == listLength){\r\n                        finishDataSave(values);\r\n                        btnToList.current && btnToList.current.click();\r\n                      }\r\n                    });\r\n                  }\r\n                  getImg();              \r\n                })\r\n              }          \r\n            }\r\n          getOptionImgUrl(el.option_photo);\r\n          el.option_photo = el.option_photo ? el.option_photo : '';\r\n        })\r\n      }else{\r\n        finishDataSave(values);\r\n        btnToList.current && btnToList.current.click();\r\n      }\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n  const [TypeState, setTypeState] = useState()\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n  const [onMember, setonMember] = useState(false)\r\n  const onMemberChange = (e) => {\r\n    console.log(TotalUser)\r\n    setonMember(!onMember)\r\n  }\r\n\r\n\r\n  const onTempSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(document.forms.dynamic_form_nest_item)\r\n  }\r\n\r\n  const [TempState, setTempState] = useState(false)\r\n  const onTempPop = () => {\r\n    setTempState(!TempState)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\">\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"logo\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>          \r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember && TotalUser &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item> \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n        <Form.Item\r\n          name=\"temp\"\r\n          valuePropName=\"checked\"\r\n        >\r\n          <Checkbox>임시저장</Checkbox>\r\n        </Form.Item>\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\",position:\"relative\"}}>\r\n          {TempList &&\r\n            <>\r\n              <Button onClick={onTempPop}>\r\n                임시저장 목록({TempList.length})            \r\n              </Button>\r\n              {TempState &&\r\n                <OderModalPopup className=\"research-temp-list\">\r\n                  <ul>\r\n                  {TempList.map((el,idx)=>(\r\n                    <li>\r\n                      <Link className=\"flex-box between\" to={{\r\n                        pathname: `/research_temp`,\r\n                        state: {\r\n                          uid:el.uid,\r\n                          temp:true\r\n                        }\r\n                      }}>\r\n                        <span className=\"subject\">{el.title}</span>\r\n                        <span className=\"date\">{el.date}</span>\r\n                      </Link>\r\n                    </li>\r\n                  ))}\r\n                  </ul>\r\n                </OderModalPopup>\r\n              }\r\n            </>\r\n          }\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\",marginLeft:\"5px\"}}>\r\n            등록하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchWrite\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchView.js",["355","356","357","358","359","360","361","362","363","364","365","366","367","368","369"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../firebase\";\r\nimport { Form, Radio, Input, Button, Table, Space, Checkbox } from 'antd';\r\nimport { useSelector } from \"react-redux\";\r\nimport Signature from \"../Signature\";\r\nimport Loading from \"../Loading\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\n\r\n\r\n\r\nfunction ResearchView(props) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [ResultList, setResultList] = useState();\r\n  const [Ruser, setRuser] = useState();\r\n  const [Rerender, setRerender] = useState(true);\r\n  const [MyResearch, setMyResearch] = useState();\r\n\r\n  const [sigPadData, setSigPadData] = useState(null);\r\n\r\n  const onSigpad = (data) => {\r\n    setSigPadData(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(userInfo){\r\n\r\n      firebase\r\n      .database()\r\n      .ref(\"research\")\r\n      .child(`${props.location.state.uid}/result/${userInfo.uid}`)\r\n      .once(\"value\", (snapshot) => {\r\n        setMyResearch(snapshot.val());\r\n      });\r\n    }\r\n\r\n    async function getResearch(){\r\n    let r_user = []\r\n    await firebase.database().ref('users')\r\n    .once('value', (snapshot) => {\r\n      snapshot.forEach(el => {\r\n        if(el.val().role >= \"0\"){\r\n            r_user.push({\r\n            name: el.val().name,\r\n            part: el.val().part,\r\n            role: el.val().role\r\n          })\r\n        }\r\n      });\r\n      setRuser(r_user);\r\n    })  \r\n    await firebase.database().ref('research')\r\n    .child(props.location.state.uid)\r\n    .once(\"value\", (snapshot) => {\r\n      console.log(snapshot.val())\r\n      setResearchViewInfo(snapshot.val())      \r\n    });    \r\n\r\n    firebase.database().ref(`research/${props.location.state.uid}/result`)\r\n    .once(\"value\", (snapshot) => {      \r\n      let resultArr = [];\r\n      snapshot.forEach(el => {\r\n        resultArr.push(el.val())\r\n      })\r\n\r\n      r_user.map(el => {\r\n        resultArr.map(list => {\r\n          if(el.name == list.name && el.part == list.part){\r\n            const optionValues = Object.values(list.option);\r\n            el.option = optionValues ? optionValues : '';\r\n            el.sign = list.sign ? list.sign : '';\r\n          }\r\n        })\r\n      })\r\n      setResultList(r_user)\r\n    })};\r\n    getResearch();\r\n    return () => {      \r\n    }\r\n  }, [Rerender])\r\n\r\n  useEffect(() => {\r\n    if(!ResultList){\r\n      setTimeout(() => {\r\n        setRerender()\r\n      },1000)\r\n    }\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n\r\n  const [ResultOpen, setResultOpen] = useState(false);\r\n  const onResultOpen = () => {\r\n    setResultOpen(true);\r\n  }\r\n\r\n  const [Again, setAgain] = useState(false);\r\n  const onResearchAgain = () => {\r\n    setAgain(true)\r\n  }\r\n  \r\n\r\n  const onFinish = (values) => {\r\n    const optionValues = Object.values(values);\r\n    let result = {\r\n      name:userInfo.displayName,\r\n      part:userInfo.photoURL,\r\n      option:optionValues,\r\n      sign:sigPadData ? sigPadData : ''\r\n    };\r\n    firebase.database().ref(`research/${props.location.state.uid}/result/${userInfo.uid}`)\r\n    .update({...result})\r\n    setRerender(!Rerender)\r\n    setAgain(false)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: '이름',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: '부서',\r\n      dataIndex: 'part',\r\n      key: 'part',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '답변',\r\n      dataIndex: 'option',\r\n      key: 'option',\r\n      align: 'center',\r\n      render: data => data ? \r\n      data.map((el,idx)=>(\r\n        <>\r\n        <p style={{textAlign:\"left\",lineHeight:\"1.6\",marginBottom:\"0\"}} key={idx}>{idx+1}. {el} </p>\r\n        </>\r\n      )) : ''       \r\n      ,\r\n    },\r\n    {\r\n      title: '서명',\r\n      dataIndex: 'sign',\r\n      key: 'sign',\r\n      align: 'center',\r\n      render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n    },\r\n  ]\r\n\r\n  const [Refesh, setRefesh] = useState(false)\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setRefesh(true)\r\n    },2000)\r\n    return () => {\r\n    }\r\n  }, [])\r\n  const onRerender = () => {\r\n    setRerender(!Rerender)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {ResultList && \r\n        <>\r\n        <Form\r\n        name=\"validate_other\"\r\n        onFinish={onFinish}\r\n        >\r\n          <dl className=\"board-view-basic\">\r\n            <dt>{ResearchViewInfo.title}</dt>\r\n            <dd className=\"flex-box\">\r\n              기한 :&nbsp; \r\n              {ResearchViewInfo.limit_start > 0 &&\r\n              <>\r\n              <div>\r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).full_}&nbsp; \r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).hour}: \r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).min}\r\n              </div>\r\n              &nbsp;~&nbsp;\r\n              <div>\r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).full_}&nbsp; \r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).hour}: \r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).min}\r\n              </div>\r\n              </>\r\n              }\r\n              {ResearchViewInfo.limit_start === 0 && <>무기한</>}\r\n            </dd>\r\n            <dd>\r\n              {ResearchViewInfo.etc}\r\n              <div style={{marginTop:\"10px\"}}>\r\n                {ResearchViewInfo.image && ResearchViewInfo.image.map((el,idx) => (\r\n                  <div className=\"img\">\r\n                    <img key={idx} src={el.url} />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </dd>            \r\n            {MyResearch && !Again ? (\r\n              <div className=\"my-answer\">\r\n                <h4>참여완료</h4>\r\n                <div>내 답변 : <span>{MyResearch.option}</span></div>\r\n                <Button style={{marginTop:\"10px\"}} onClick={onResearchAgain}>다시 참여하기</Button>\r\n              </div>\r\n            ):(\r\n            <dd>\r\n              {ResearchViewInfo.type == 1 &&\r\n                <Form.Item name=\"select_op\" label=\"선택항목\">\r\n                  <Radio.Group >\r\n                    {ResearchViewInfo.option.map((el,idx) => (\r\n                      <>\r\n                        <Radio key={idx} value={el.option}>{el.option}</Radio>\r\n                      </>\r\n                    ))}\r\n                  </Radio.Group>\r\n                </Form.Item>\r\n              }\r\n              {ResearchViewInfo.type == 2 && \r\n                <Form.Item name=\"select_op\">\r\n                  <div className=\"flex-box\">\r\n                    <span className=\"tit\">답변</span>\r\n                    <Input />\r\n                  </div>\r\n              </Form.Item>\r\n              }\r\n              {ResearchViewInfo.type == 3 && \r\n                ResearchViewInfo.option.map((el,idx)=>(\r\n                  <>\r\n                    <div style={{marginBottom:\"10px\"}}>\r\n                      <span className=\"tit\">{idx+1}. {el.option_q}</span>\r\n                      <div className=\"flex-box\" style={{marginBottom:\"10px\"}}>\r\n                      {el.option_photo && el.option_photo.map((img,_idx) => (\r\n                        <div style={{margin:\"0 5px\"}}>\r\n                          <img src={img.url} />\r\n                        </div>\r\n                      ))}\r\n                      </div>\r\n                    </div>\r\n                    {el.option_a != '' ? (\r\n                      <>\r\n                      {el.option_type == '1' &&\r\n                      <Form.Item name={`select_op_${idx}`} label=\"선택항목\" style={{marginBottom:\"20px\"}}>\r\n                        <Checkbox.Group >\r\n                          {el.option_a.split(',').map((list,_idx)=>(\r\n                            <Checkbox key={_idx} value={list}>{list}</Checkbox>\r\n                          ))}\r\n                        </Checkbox.Group>\r\n                      </Form.Item>\r\n                      }\r\n                      {el.option_type == '2' &&\r\n                      <Form.Item name={`select_op_${idx}`} label=\"선택항목\" style={{marginBottom:\"20px\"}}>\r\n                        <Radio.Group >\r\n                          {el.option_a.split(',').map((list,_idx)=>(\r\n                            <Radio key={_idx} value={list}>{list}</Radio>\r\n                          ))}\r\n                        </Radio.Group>\r\n                      </Form.Item>\r\n                      }\r\n                      </>\r\n                    ):(\r\n                      <Form.Item name={`select_op_${idx}`} style={{marginBottom:\"20px\"}}>\r\n                          <div className=\"flex-box\">\r\n                            <span className=\"tit\">답변</span>\r\n                            <Input />\r\n                          </div>\r\n                      </Form.Item>\r\n                    )}\r\n                  </>\r\n                ))\r\n              }\r\n              <div className=\"flex-box\">\r\n                <span className=\"tit\">서명</span>\r\n                <Signature onSigpad={onSigpad} />\r\n              </div>\r\n            </dd>            \r\n            )\r\n            }\r\n              \r\n             \r\n            \r\n            <div className=\"btn-box\">\r\n              <Space align=\"center\">\r\n                {!Again && MyResearch ? (\r\n                  <></>\r\n                ):(\r\n                  <Button htmlType=\"submit\" type=\"primary\">참여하기</Button>\r\n                )}\r\n                {ResearchViewInfo && userInfo && !userInfo.auth.includes('insa') ? (\r\n                  <></>\r\n                  ):(\r\n                  <>\r\n                  <Button onClick={onResultOpen}>결과보기</Button>\r\n                  <Button>\r\n                    <Link to={{\r\n                      pathname: `/research_modify`,\r\n                      state: {\r\n                        uid:ResearchViewInfo.uid\r\n                      }\r\n                    }}\r\n                      >수정\r\n                    </Link>\r\n                  </Button>\r\n                  </>\r\n                )}\r\n                <Button>\r\n                  <Link to=\"/research\">목록으로</Link>\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </dl>\r\n        </Form>\r\n        \r\n      \r\n      {Ruser && ResultList && ResultOpen &&\r\n        <>\r\n        <Table pagination={false} align=\"center\" columns={columns} dataSource={ResultList} />        \r\n        </>\r\n      }\r\n      </>\r\n      }\r\n      {!ResultList && \r\n        <>     \r\n          {!Refesh &&\r\n          <Loading />\r\n          }\r\n          {Refesh &&\r\n            <Button className=\"pos-center\" type=\"button\" onClick={onRerender}>새로고침</Button>\r\n          }\r\n        </>\r\n      }  \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchView\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchModify.js",["370","371","372","373","374","375","376","377","378","379","380"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchModify(props) {\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [onMember, setOnMember] = useState(false)  \r\n  const [TypeState, setTypeState] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      setTotalUser(userArr);\r\n    });\r\n    firebase.database().ref(`research/${props.location.state.uid}`)\r\n    .once(\"value\", snapshot => {\r\n      let res = snapshot.val();\r\n      if(snapshot.val() && snapshot.val().image){\r\n        let uploadArr = [];\r\n        snapshot.val().image.map((el,idx)=>{\r\n          uploadArr.push({\r\n            uid:idx,\r\n            name:el.name,\r\n            status:'done',\r\n            url:el.url\r\n          })\r\n        })\r\n        res.upload = uploadArr\r\n      }      \r\n      setOnMember(res.member)\r\n      setTypeState(res.type)\r\n      setResearchViewInfo(res)\r\n    })\r\n\r\n    return () => {      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = props.location.state.uid;\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  let newUid = uuid();\r\n  const finishDataSave = (values) => {\r\n    \r\n    let uploadURL = values.upload ? values.upload : [];   \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    if(el.originFileObj){\r\n      let getImg = async () => {\r\n      let uploadTask = await firebase\r\n          .storage()\r\n          .ref(\"research\")\r\n          .child(`image/${uid}/${newUid}`)          \r\n          .put(el.originFileObj, el.type);\r\n            uploadTask.ref.getDownloadURL()\r\n            .then(url => {\r\n              uploadURL.push({                \r\n                name:el.originFileObj.name,\r\n                url:url\r\n              });\r\n              firebase.database().ref('research')\r\n              .child(uid)\r\n              .update({\r\n                image: uploadURL\r\n              });                       \r\n            });\r\n          }\r\n        getImg();\r\n      }else{\r\n        uploadURL = \"\"\r\n        firebase.database().ref('research')\r\n        .child(uid)\r\n        .update({\r\n          image: uploadURL\r\n        }); \r\n      }\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.type != 2){\r\n      let listLength = values.option_list.length;\r\n      let count = 0;\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n            let path = el._location.path_;\r\n            firebase.storage().ref(`${path}`).delete()\r\n            .then(()=>{\r\n            }).catch(error=>console.error(error))\r\n          })\r\n        })\r\n      let urlArr = [];\r\n      values.option_list && values.option_list.map(el=>{\r\n        el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n        el.option_a = el.option_a ? el.option_a : \"\";\r\n        el.option_type = el.option_type ? el.option_type : \"\";\r\n        count++;    \r\n        const getOptionImgUrl = (photo) => {\r\n            if(!photo){\r\n              if(count == listLength){\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n            }else{\r\n            photo.map((list,idx)=>{\r\n              if(list.originFileObj){\r\n                let getImg = async () => {\r\n                let uploadTask = await firebase\r\n                .storage()\r\n                .ref(\"research\")\r\n                .child(`image/${uid}/${uuid()}`)          \r\n                .put(list.originFileObj, list.type);\r\n                  uploadTask.ref.getDownloadURL()\r\n                  .then(url => {\r\n                    urlArr.push({\r\n                      uid:idx,\r\n                      status:\"done\",\r\n                      name:list.originFileObj.name,\r\n                      url:url\r\n                    });\r\n                    firebase.database().ref('research')\r\n                    .child(`${uid}/option/${idx}`)\r\n                    .update({\r\n                      option_photo: urlArr\r\n                    });                \r\n                    el.option_photo = urlArr ? urlArr : '';                \r\n                    if(count == listLength){\r\n                      finishDataSave(values);\r\n                      btnToList.current && btnToList.current.click();\r\n                    }\r\n                  });\r\n                }\r\n                getImg();              \r\n              }else{\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n              })\r\n            }          \r\n          }\r\n        getOptionImgUrl(el.option_photo);\r\n        el.option_photo = el.option_photo ? el.option_photo : '';\r\n      })\r\n    }else{\r\n      finishDataSave(values);\r\n      btnToList.current && btnToList.current.click();\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    console.log(e)\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n\r\n  const onMemberChange = (e) => {\r\n    setOnMember(!onMember)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      {ResearchViewInfo &&\r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\"\r\n        initialValues={{\r\n          title:ResearchViewInfo.title,\r\n          type:ResearchViewInfo.type,\r\n          upload:ResearchViewInfo.upload,\r\n          alba:ResearchViewInfo.alba,\r\n          intern:ResearchViewInfo.intern,\r\n          secret:ResearchViewInfo.secret,\r\n          member:ResearchViewInfo.member,\r\n          member_check:ResearchViewInfo.member_check,\r\n          option_list:ResearchViewInfo.option,\r\n          etc:ResearchViewInfo.etc,\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"option_upload\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser && TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item>  \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\"}}>\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\"}}>\r\n            수정하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchModify\r\n","D:\\프로젝트\\react\\react-order\\src\\redux\\actions\\user_action.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\Research\\ResearchTemp.js",["381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchTemp(props) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [onMember, setOnMember] = useState(false)  \r\n  const [TypeState, setTypeState] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      setTotalUser(userArr);\r\n    });\r\n    firebase.database().ref(`research_temp/${userInfo.uid}/${props.location.state.uid}`)\r\n    .once(\"value\", snapshot => {\r\n      let res = snapshot.val();\r\n      if(snapshot.val() && snapshot.val().image){\r\n        let uploadArr = [];\r\n        snapshot.val().image.map((el,idx)=>{\r\n          uploadArr.push({\r\n            uid:idx,\r\n            name:el.name,\r\n            status:'done',\r\n            url:el.url\r\n          })\r\n        })\r\n        res.upload = uploadArr\r\n      }      \r\n      setOnMember(res.member)\r\n      setTypeState(res.type)\r\n      setResearchViewInfo(res)\r\n    })\r\n\r\n    return () => {      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = uuid();\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  let newUid = uuid();\r\n  const finishDataSave = (values) => {\r\n    \r\n    let uploadURL = values.upload ? values.upload : [];   \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    if(el.originFileObj){\r\n      let getImg = async () => {\r\n      let uploadTask = await firebase\r\n          .storage()\r\n          .ref(\"research\")\r\n          .child(`image/${uid}/${newUid}`)          \r\n          .put(el.originFileObj, el.type);\r\n            uploadTask.ref.getDownloadURL()\r\n            .then(url => {\r\n              uploadURL.push({                \r\n                name:el.originFileObj.name,\r\n                url:url\r\n              });\r\n              firebase.database().ref('research')\r\n              .child(uid)\r\n              .update({\r\n                image: uploadURL\r\n              });                       \r\n            });\r\n          }\r\n        getImg();\r\n      }else{\r\n        uploadURL = \"\"\r\n        firebase.database().ref('research')\r\n        .child(uid)\r\n        .update({\r\n          image: uploadURL\r\n        }); \r\n      }\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.type != 2){\r\n      let listLength = values.option_list.length;\r\n      let count = 0;\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n            let path = el._location.path_;\r\n            firebase.storage().ref(`${path}`).delete()\r\n            .then(()=>{\r\n            }).catch(error=>console.error(error))\r\n          })\r\n        })\r\n      let urlArr = [];\r\n      values.option_list && values.option_list.map(el=>{\r\n        el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n        el.option_a = el.option_a ? el.option_a : \"\";\r\n        el.option_type = el.option_type ? el.option_type : \"\";\r\n        count++;    \r\n        const getOptionImgUrl = (photo) => {\r\n            if(!photo){\r\n              if(count == listLength){\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n            }else{\r\n            photo.map((list,idx)=>{\r\n              if(list.originFileObj){\r\n                let getImg = async () => {\r\n                let uploadTask = await firebase\r\n                .storage()\r\n                .ref(\"research\")\r\n                .child(`image/${uid}/${uuid()}`)          \r\n                .put(list.originFileObj, list.type);\r\n                  uploadTask.ref.getDownloadURL()\r\n                  .then(url => {\r\n                    urlArr.push({\r\n                      uid:idx,\r\n                      status:\"done\",\r\n                      name:list.originFileObj.name,\r\n                      url:url\r\n                    });\r\n                    firebase.database().ref('research')\r\n                    .child(`${uid}/option/${idx}`)\r\n                    .update({\r\n                      option_photo: urlArr\r\n                    });                \r\n                    el.option_photo = urlArr ? urlArr : '';                \r\n                    if(count == listLength){\r\n                      finishDataSave(values);\r\n                      btnToList.current && btnToList.current.click();\r\n                    }\r\n                  });\r\n                }\r\n                getImg();              \r\n              }else{\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n              })\r\n            }          \r\n          }\r\n        getOptionImgUrl(el.option_photo);\r\n        el.option_photo = el.option_photo ? el.option_photo : '';\r\n      })\r\n    }else{\r\n      finishDataSave(values);\r\n      btnToList.current && btnToList.current.click();\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    console.log(e)\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n\r\n  const onMemberChange = (e) => {\r\n    setOnMember(!onMember)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      {ResearchViewInfo &&\r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\"\r\n        initialValues={{\r\n          title:ResearchViewInfo.title,\r\n          type:ResearchViewInfo.type,\r\n          upload:ResearchViewInfo.upload,\r\n          alba:ResearchViewInfo.alba,\r\n          intern:ResearchViewInfo.intern,\r\n          secret:ResearchViewInfo.secret,\r\n          member:ResearchViewInfo.member,\r\n          member_check:ResearchViewInfo.member_check,\r\n          option_list:ResearchViewInfo.option,\r\n          etc:ResearchViewInfo.etc,\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"option_upload\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser && TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item>  \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\"}}>\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\"}}>\r\n            등록하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchTemp\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\hair\\Hair.js",["392","393"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Form, DatePicker, Input, Button, Table, Select, message, Spin } from 'antd';\r\nimport Signature from \"../Signature\";\r\nimport { getFormatDate, commaNumber } from '../CommonFunc';\r\nimport uuid from \"react-uuid\";\r\nimport moment from 'moment';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nconst curDate = getFormatDate(new Date());\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nfunction Hair() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [sigPadData, setSigPadData] = useState(null);\r\n  const [MyHairData, setMyHairData] = useState();\r\n  const [Rerender, setRerender] = useState(false);\r\n  const [SearchDate, setSearchDate] = useState([curDate,curDate]);\r\n\r\n  const [HairInfo, setHairInfo] = useState();\r\n\r\n  const formRef = useRef();\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    firebase.database().ref('hair/info')\r\n    .on('value', (snapshot) => {\r\n      setHairInfo(snapshot.val())        \r\n    });\r\n\r\n    let hairArr = [];\r\n    let startDate = SearchDate[0].full.substr(0,6);\r\n    let endDate = SearchDate[1].full.substr(0,6);\r\n    firebase\r\n    .database()\r\n    .ref(`hair/list/${userInfo.uid}`)\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        let str = el.val().date.full.toString().substr(0,6);\r\n        if(startDate <= str && str <= endDate){\r\n          hairArr.push(el.val())\r\n        }\r\n      })      \r\n      hairArr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      hairArr.sort((a,b)=>{\r\n        return b.date.full - a.date.full\r\n      })\r\n      setMyHairData(hairArr);\r\n    });\r\n    return () => {\r\n      firebase.database().ref(`users/${userInfo.uid}`).off();\r\n    }\r\n  }, [Rerender,SearchDate]);\r\n  \r\n  const onSigpad = (data) => {\r\n    setSigPadData(data);\r\n  }  \r\n\r\n  const [Loading, setLoading] = useState(false);\r\n\r\n  const onFinish = (values)=> {     \r\n\r\n    setLoading(true)\r\n    const uid = uuid();\r\n    values.date = getFormatDate(values.date._d);\r\n    values.signature = sigPadData;\r\n    console.log(sigPadData)\r\n    if(!values.signature){\r\n      window.alert('서명은 필수입니다.');\r\n      setLoading(false)\r\n      return;\r\n    }else if(values.signature.length < 2000){\r\n      window.alert('서명이 너무 짧습니다.');\r\n      setLoading(false)\r\n      return;\r\n    }\r\n    const yearMonth = String(values.date.year) + String(values.date.month)\r\n    firebase.storage().ref(`hair/${yearMonth}/${uid}`)\r\n    .putString(values.signature,'data_url')\r\n    .then((res)=>{\r\n      res.ref.getDownloadURL()\r\n      .then(url => {\r\n        firebase\r\n        .database()\r\n        .ref(\"hair/list\")\r\n        .child(`${userInfo.uid}/${uid}`)\r\n        .update({\r\n          ...values,\r\n          signature:url,\r\n          part: userInfo.photoURL,\r\n          name: userInfo.displayName,\r\n          sosok: userInfo.sosok,\r\n          timestamp: new Date().getTime(),\r\n          uid:uid,\r\n          user_uid:userInfo.uid\r\n        })\r\n        setRerender(!Rerender);\r\n        message.success('등록되었습니다.');    \r\n        formRef.current.resetFields();    \r\n        setSigPadData('');\r\n        setLoading(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  const onDelete = (uid,date) => {\r\n    let yearMonth = getFormatDate(new Date(date));\r\n    yearMonth = String(yearMonth.year) + String(yearMonth.month)\r\n\r\n    let curDate = Math.floor(new Date().getTime()/1000);\r\n    let thisDate = Math.floor(date/1000);\r\n    if(curDate>thisDate+259200){\r\n      window.alert('삭제는 작성 후 3일까지 가능합니다.');\r\n      return;\r\n    }\r\n    let agree = window.confirm('삭제하면 복구가 불가능합니다. 삭제하시겠습니까?');\r\n    if(agree){\r\n      firebase.database().ref(`hair/list/${userInfo.uid}/${uid}`).remove();\r\n      setRerender(!Rerender)\r\n      firebase.storage().ref(`hair/${yearMonth}/${uid}`).delete()\r\n      message.success('삭제되었습니다.');\r\n    }\r\n  }\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const onModify = (uid,date) => {\r\n    firebase.database().ref(`hair/list/${userInfo.uid}/${uid}`)\r\n    .once(\"value\", (snapshot => {\r\n      setModifyData(snapshot.val());\r\n      return;\r\n    }))\r\n    let curDate = Math.floor(new Date().getTime()/1000);\r\n    let thisDate = Math.floor(date/1000);\r\n    if(curDate>thisDate+259200){\r\n      window.alert('수정은 작성 후 3일까지 가능합니다.');\r\n      return;\r\n    }\r\n    setModifyPop(true)\r\n  }\r\n  const modifyOff = () => {\r\n    setModifyData('');\r\n    setModifyPop(false)\r\n  }\r\n\r\n  const onSubmitModify = (e) => {\r\n    e.preventDefault();\r\n    let date = e.target.date.value;\r\n    let year = date.substr(0,4);\r\n    let month = date.substr(5,2);\r\n    month = parseInt(month) - 1;\r\n    let day = date.substr(8,2);\r\n    date = getFormatDate(new Date(year,month,day))\r\n    firebase\r\n    .database()\r\n    .ref(\"hair/list\")\r\n    .child(`${userInfo.uid}/${ModifyData.uid}`)\r\n    .update({\r\n      date:date,\r\n      price: e.target.price.value,\r\n      relation: e.target.querySelector('.ant-select-selection-item').title,\r\n      service: e.target.service.value,\r\n    });\r\n    setRerender(!Rerender)\r\n    modifyOff()\r\n    message.success('수정되었습니다.');\r\n  }\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    let arr = [];\r\n    arr.push(getFormatDate(date[0]._d))\r\n    arr.push(getFormatDate(date[1]._d))\r\n    setSearchDate(arr)\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current > moment();\r\n  }\r\n\r\n  const contentDesc = () => {\r\n    let content;\r\n    content = HairInfo\r\n    return {__html: content}\r\n  }\r\n\r\n\r\n  \r\n    const columns = [\r\n      {\r\n        title: '이용날짜',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        align: 'center',\r\n        render: data => data ? data.full_ : '',\r\n      },\r\n      {\r\n        title: '이용자와의 관계',\r\n        dataIndex: 'relation',\r\n        key: 'relation',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '서비스명',\r\n        dataIndex: 'service',\r\n        key: 'service',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: '가격',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n        align: 'center',        \r\n        render: data => data ? `${commaNumber(data)}` : ''\r\n      },\r\n      {\r\n        title: '서명',\r\n        dataIndex: 'signature',\r\n        key: 'signature',\r\n        align: 'center',\r\n        render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n      },\r\n      {\r\n        title: '관리',\r\n        dataIndex: ['uid','timestamp'],\r\n        key: 'uid',\r\n        align: 'center',\r\n        render: (text,row) => row['uid'] ? (\r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={()=>{onModify(row['uid'],row['timestamp'])}}>수정</Button>\r\n            <Button onClick={()=>{onDelete(row['uid'],row['timestamp'])}}>삭제</Button>\r\n          </>\r\n          ) : '',\r\n      }\r\n      \r\n    ]\r\n\r\n\r\n    \r\n  return (\r\n    <>\r\n      {HairInfo && \r\n          <div className=\"item-info-box\" style={{marginBottom:\"20px\"}}>\r\n            <pre dangerouslySetInnerHTML={contentDesc()}></pre>\r\n          </div>\r\n        }\r\n      <Form ref={formRef} name=\"dynamic_form_nest_item\" className=\"hiar-form\" onFinish={onFinish} autoComplete=\"off\">\r\n        <div className=\"flex-box\">\r\n          <Form.Item \r\n          name=\"date\"\r\n          label=\"이용날짜\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <DatePicker />\r\n          </Form.Item>\r\n          <Form.Item \r\n          name=\"relation\"\r\n          label=\"관계\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Select defaultValue=\"선택\" style={{ width: 120 }}>\r\n              <Option value=\"본인\">본인</Option>\r\n              <Option value=\"배우자\">배우자</Option>\r\n              <Option value=\"자녀\">자녀</Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </div>\r\n        <div className=\"flex-box\">\r\n          <Form.Item \r\n          name=\"service\"\r\n          label=\"서비스명\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item \r\n          name=\"price\"\r\n          label=\"가격\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Input \r\n              prefix=\"￦\" \r\n              type=\"number\"\r\n              style={{maxWidth:\"120px\"}} \r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <Form.Item \r\n        className=\"signature\"\r\n        name=\"signature\"\r\n        label=\"서명\"\r\n        >\r\n          <Signature onSigpad={onSigpad} />\r\n        </Form.Item>\r\n        <div className=\"btn-box\">\r\n          <Spin spinning={Loading}>\r\n            <Button type=\"primary\" htmlType=\"submit\">등록하기</Button>          \r\n          </Spin>\r\n        </div>\r\n      </Form>\r\n\r\n      {MyHairData &&\r\n        <>\r\n        <RangePicker \r\n          picker=\"month\" \r\n          style={{margin:\"20px 0 10px 0\"}}\r\n          defaultValue={[moment(),moment()]}\r\n          disabledDate={disabledDate} onChange={onSelectDate}\r\n        />\r\n        <Table \r\n        pagination={{\r\n          pageSize:10\r\n        }}\r\n        align=\"center\" columns={columns} dataSource={MyHairData} />        \r\n        </>\r\n      } \r\n      {\r\n        ModifyPop && ModifyData &&\r\n        <>\r\n          <OderModalPopup className=\"call_modify\" style={{\r\n            top:\"50%\",\r\n            left:\"50%\",\r\n            transform:\"translate(-50%,-50%)\",\r\n            position:\"fixed\",\r\n          }}>\r\n            <form className=\"order-form-box\" onSubmit={onSubmitModify}>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">이용날짜</span>\r\n                <DatePicker name=\"date\" defaultValue={moment(ModifyData.date.full_)} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">관계</span>\r\n                <Select name=\"relation\" defaultValue={ModifyData.relation} style={{ width: 120 }}>\r\n                  <Option value=\"본인\">본인</Option>\r\n                  <Option value=\"배우자\">배우자</Option>\r\n                  <Option value=\"자녀\">자녀</Option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">서비스명</span>\r\n                <Input name=\"service\" defaultValue={ModifyData.service} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">가격</span>\r\n                <Input prefix=\"￦\" type=\"number\" name=\"price\" defaultValue={ModifyData.price} />\r\n              </div>\r\n              <div className=\"btn-box\">\r\n                <Button type=\"primary\" htmlType=\"submit\">수정하기</Button>\r\n                <Button onClick={modifyOff} style={{marginLeft:\"5px\"}}>닫기</Button>\r\n              </div>\r\n            </form>\r\n          </OderModalPopup>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Hair\r\n","D:\\프로젝트\\react\\react-order\\src\\redux\\reducers\\user_reducer.js",[],"D:\\프로젝트\\react\\react-order\\src\\firebaseConfig.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\OrderModal.js",["394","395","396","397","398","399","400"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Input, Checkbox, Spin, Select,message } from \"antd\";\nimport { PlusOutlined, MinusOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../firebase\";\nimport moment from \"moment\";\nimport { getFormatDate } from \"./CommonFunc\";\nimport \"moment/locale/ko\";\nimport uuid from \"react-uuid\";\nexport const OderModalPopup = styled.div`\n  width: auto;\n  min-width:290px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  position: absolute;\n  z-index: 150;\n  border-radius: 10px;\n  background: #fff;\n  transform: translate(-50%, -70%);\n  left: ${(props) => props.posx}px;\n  top: ${(props) => props.posy}px;\n  animation: fade_up 0.3s both;\n  box-shadow: 0px 0px 7px 0px rgba(0, 0, 0, 0.25);\n  .modal-loading {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n  @keyframes fade_up {\n    from {\n      opacity: 0;\n      transform: translate(-50%, -60%);\n    }\n    to {\n      opacity: 1;\n      transform: translate(-50%, -70%);\n    }\n  }  \n  @media all and (max-width: 640px) {\n    width: 80%;\n    max-width: 300px;\n    left: 50%;\n    transform: translate(-50%, -100%);\n  }\n  .num {\n    width: 40px;\n    text-align: center;\n    margin: 0 -1px;\n  }\n  .tit {\n    display: inline-block;\n    margin-right: 5px;\n    flex-shrink: 0;\n  }\n  .btn-box {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    button {\n      width: 100px;\n    }\n  }\n`;\nconst { Option } = Select;\n\nfunction OrderModal({ posx, posy, onFinished, OrderItem }) {\n  const userInfo = useSelector((state) => state.user.currentUser);\n  const [UserDb, setUserDb] = useState();\n  const [UserPhone, setUserPhone] = useState()\n  useEffect(() => {\n    if (userInfo) {\n      firebase\n      .database()\n      .ref(\"users\")\n      .child(userInfo.uid)\n      .once(\"value\", (snapshot) => {\n        setUserDb(snapshot.val());\n      });\n    }\n    firebase\n    .database()\n    .ref(`users/${userInfo.uid}`)\n    .once(\"value\")\n    .then((snapshot) => {            \n      setUserPhone(snapshot.val().call_number)\n    });\n  }, [])\n  const [Amount, setAmount] = useState(1);\n  const plusAmount = () => {\n    if (Amount < 10) {\n      setAmount((pre) => pre + 1);\n    } else {\n      alert(\"최대 주문량은 10개 입니다.\");\n    }\n  };\n  const minusAmount = () => {\n    if (Amount > 1) {\n      setAmount((pre) => pre - 1);\n    } else {\n      alert(\"최소 주문량은 1개 입니다.\");\n    }\n  };\n  const onCancel = () => {\n    onFinished();\n  };\n\n  const [radioValue, setradioValue] = useState();\n  const radioChange = (e) => {\n    setradioValue(e.target.value);\n  };\n  const [radioValue2, setradioValue2] = useState('저지방');\n  const radioChange2 = (e) => {\n    setradioValue2(e.target.value);\n  };  \n\n  const [AddCheck, setAddCheck] = useState();\n  function onChange(checkedValues) {\n    setAddCheck(checkedValues);\n  }\n\n  const [AddCheck2, setAddCheck2] = useState();\n  function onChange2(checkedValues) {\n    setAddCheck2(checkedValues);\n  }\n\n  let hotRadio;\n  if (OrderItem.hot === \"hot & ice\") {\n    hotRadio = (\n      <>\n        <input\n          type=\"radio\"\n          name=\"hot\"\n          id=\"hot\"\n          value=\"hot\"\n          onChange={radioChange}\n        />\n        <label className=\"radio_hot\" htmlFor=\"hot\">\n          hot\n        </label>\n        <input\n          type=\"radio\"\n          id=\"ice\"\n          name=\"hot\"\n          value=\"ice\"\n          onChange={radioChange}\n        />\n        <label className=\"radio_ice\" htmlFor=\"ice\">\n          ice\n        </label>\n      </>\n    );\n  }\n  if (OrderItem.hot === \"hot only\") {\n    hotRadio = (\n      <>\n        <input\n          type=\"radio\"\n          id=\"hot\"\n          name=\"hot\"\n          value=\"hot\"\n          checked\n          onChange={radioChange}\n        />\n        <label className=\"radio_hot\" htmlFor=\"hot\">\n          hot only\n        </label>\n      </>\n    );\n  }\n  if (OrderItem.hot === \"ice only\") {\n    hotRadio = (\n      <>\n        <input\n          type=\"radio\"\n          id=\"ice\"\n          name=\"hot\"\n          value=\"ice\"\n          checked\n          onChange={radioChange}\n        />\n        <label className=\"radio_ice\" htmlFor=\"ice\">\n          ice only\n        </label>\n      </>\n    );\n  }\n\n  // submit\n  const [ProdOption, setProdOption] = useState();\n  const onOptionChange = (e) => {\n    setProdOption(e);\n  }\n  const [submitLoading, setsubmitLoading] = useState(false);\n  const onSubmitOrder = async (e) => {\n    e.preventDefault();    \n    if(userInfo?.auth && userInfo.auth.includes('disable')){\n      message.error(\"주문이 불가능 합니다.\")\n      return;\n    }    \n    if(OrderItem.jaego === 0){\n      message.error(\"재고가 부족합니다.\")\n      return\n    }\n    if(OrderItem.option && !ProdOption){\n      message.error(\"옵션을 선택해 주세요\")\n      return;\n    }\n       \n    setsubmitLoading(true);\n    const nowTime = moment().format(\"YYYY-MM-DD HH:mm:ss|dddd\");\n    const timeStamp = new Date().getTime();\n    const curTime = getFormatDate(new Date());\n    \n    if(OrderItem.limit && UserDb.limit){\n      if(UserDb.limit.hasOwnProperty(OrderItem.name)){\n        let time = UserDb.limit[OrderItem.name].timestamp\n        time = getFormatDate(new Date(time));        \n        if(curTime.full === time.full){\n          message.error(\"하루에 한번만 주문 가능합니다.\");\n          onFinished();\n          setsubmitLoading(false);\n          return;\n        }else{\n          firebase\n          .database()\n          .ref(\"users\")\n          .child(`${userInfo.uid}/limit/${OrderItem.name}`)\n          .update({\n            timestamp:timeStamp,      \n          })\n        } \n      }else{\n        firebase\n        .database()\n        .ref(\"users\")\n        .child(`${userInfo.uid}/limit/${OrderItem.name}`)\n        .update({\n          timestamp:timeStamp,      \n        })  \n      }\n    }else if(OrderItem.limit){\n      firebase\n      .database()\n      .ref(\"users\")\n      .child(`${userInfo.uid}/limit/${OrderItem.name}`)\n      .update({\n        timestamp:timeStamp,      \n      })           \n    }\n\n    if (e.target.hot && !e.target.hot.value) {\n        message.error(\"온도를 선택해주세요\");\n        setsubmitLoading(false);\n        return;\n    }\n    let addPrice = 0;\n\n    if (AddCheck2) {\n      if (AddCheck2.includes(\"샷1\")) {\n        addPrice += 500;\n      }\n      if (AddCheck2.includes(\"샷2\")) {\n        addPrice += 1000;\n      }\n    }\n    if (AddCheck) {\n      addPrice += 500;\n    }\n    let values = {\n      order_uid: userInfo.uid,\n      order_email: userInfo.email,\n      order_name: userInfo.displayName,\n      order_part: userInfo.photoURL,\n      order_time: nowTime,\n      order_etc: e.target.etc.value,\n      order_state: 0,\n      order_phone:UserPhone,\n      prod_uid: OrderItem.uid,\n      prod_name: OrderItem.name,\n      prod_option: ProdOption ? ProdOption : \"\",\n      prod_img: OrderItem.image,\n      price: OrderItem.price * e.target.amount.value + addPrice,\n      amount: parseInt(e.target.amount.value),\n      kal: parseInt(OrderItem.kal),\n      hot: e.target.hot ? e.target.hot.value : \"\",\n      milk: e.target.milk ? e.target.milk.value : \"\",\n      add: AddCheck ? AddCheck : null,\n      add2: AddCheck2 ? AddCheck2 : null,\n      category: OrderItem.category,\n      timestamp: timeStamp,      \n    };\n\n    try {\n      await firebase\n      .database()\n      .ref(\"products\")\n      .child(`${OrderItem.uid}`)\n      .transaction((pre) => {\n        if(pre.jaego){\n          pre.jaego--;\n          return pre;\n        }\n      });\n      await firebase\n        .database()\n        .ref(\"products\")\n        .child(`${OrderItem.uid}/count`)\n        .transaction((pre) => {\n          return pre + 1;\n        });\n      await firebase\n        .database()\n        .ref(\"users\")\n        .child(`${userInfo.uid}/favorite/${OrderItem.name}`)\n        .child(\"count\")\n        .transaction((pre) => {\n          return pre + 1;\n        });\n       \n      await firebase\n        .database()\n        .ref(\"order\")\n        .child(uuid())\n        .set({\n          ...values,\n        });\n      await firebase\n        .database()\n        .ref(\"order_count\")\n        .transaction((pre) => {\n          return pre + 1;\n        });\n        message.success('주문에 성공했습니다 :)');  \n      onFinished();\n      setsubmitLoading(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <>\n      <OderModalPopup\n        className=\"ani-fadein du-1\"\n        posx={posx}\n        posy={posy}\n        style={{ padding: \"12px 15px 15px 15px\" }}\n      >\n        <form className=\"order-form-box\" onSubmit={onSubmitOrder}>\n          <h4>{OrderItem.name}</h4>\n          <div className=\"flex-box a-center\">\n            <span className=\"tit\">수량</span>\n            {/* <Button\n              onClick={minusAmount}\n              icon={<MinusOutlined />}\n              type=\"default\"\n            ></Button> */}\n            <Input className=\"num\" name=\"amount\" style={{border:\"none\"}} value={Amount} />\n            {/* <Button\n              onClick={plusAmount}\n              icon={<PlusOutlined />}\n              type=\"default\"\n            ></Button> */}\n          </div>\n          {OrderItem.option &&\n          <div className=\"flex-box a-center\">\n            <span className=\"tit\">옵션</span>\n            <Select onChange={onOptionChange} name=\"option\" style={{width:\"100%\"}}>\n            {OrderItem.option.split(',').map((el,idx) => (\n              <Option value={el} key={idx}>{el}</Option>\n            ))}\n            </Select>\n          </div>\n          }\n          {hotRadio &&\n          <div className=\"flex-box a-center\">\n            <span className=\"tit\"></span>\n            {hotRadio}\n          </div>\n          }\n            {OrderItem.milk &&\n            <div className=\"flex-box a-center\">\n              <span className=\"tit\"></span>\n                    <input\n                    type=\"radio\"\n                    name=\"milk\"\n                    id=\"basic\"\n                    value=\"저지방\"\n                    defaultChecked\n                    onChange={radioChange2}\n                    />\n                    <label htmlFor=\"basic\">\n                    저지방\n                    </label>\n              {/* {OrderItem.m_soldout && (\n                  <>\n                  <input\n                    type=\"radio\"\n                    id=\"none\"\n                    name=\"milk\"\n                    value=\"무지방\"\n                    onChange={radioChange2}\n                  />\n                  <label htmlFor=\"none\">\n                  무지방\n                  </label>\n                </>\n              )} */}\n              {OrderItem.m_soldout2 && (\n                <>\n                  <input\n                    type=\"radio\"\n                    id=\"free\"\n                    name=\"milk\"\n                    value=\"락토프리\"\n                    onChange={radioChange2}\n                  />\n                  <label htmlFor=\"free\">\n                  락토프리\n                  </label>\n                </>\n              )}\n            </div>\n            }\n          {OrderItem.add && (\n            <div className=\"flex-box\">\n              <span className=\"tit\" style={{ marginTop: \"3px\" }}>\n                추가\n              </span>\n              {OrderItem && (\n                <div\n                  className=\"order-check-box\"\n                  style={{ flexDirection: \"column\" }}\n                >\n                  <Checkbox.Group style={{ width: \"100%\" }} onChange={onChange}>\n                    {OrderItem.b_soldout && OrderItem.add.includes(\"버블\") && (\n                      <>\n                        <Checkbox value=\"버블\">버블</Checkbox>\n                      </>\n                    )}\n                    {!OrderItem.b_soldout && OrderItem.add.includes(\"버블\") && (\n                      <>\n                        <Checkbox value=\"버블\" disabled>\n                          버블품절\n                        </Checkbox>\n                      </>\n                    )}\n                  </Checkbox.Group>\n                  {OrderItem.add.includes(\"샷\") && (\n                    <>\n                      <div\n                        className=\"flex-box a-center\"\n                        style={{ marginTop: \"5px\" }}\n                      >\n                        <Checkbox.Group style={{ width: \"100%\" }} onChange={onChange2}>                          \n                          {OrderItem.add.includes(\"연하게\") && (        \n                              <Checkbox value=\"연하게\">연하게</Checkbox>\n                          )}\n                          <Checkbox value=\"샷1\">1샷 추가</Checkbox>\n                          <Checkbox value=\"샷2\">2샷 추가</Checkbox>\n                        </Checkbox.Group>                        \n                      </div>\n                    </>\n                  )}                  \n                </div>\n              )}\n            </div>\n          )}\n          <div className=\"flex-box a-center\">\n            <span className=\"tit\">기타</span>\n            <Input name=\"etc\" type=\"text\" />\n          </div>\n          <div className=\"btn-box\">\n            <Button\n              disabled={submitLoading}\n              htmlType=\"submit\"\n              type=\"primary\"\n              style={{ marginRight: \"5px\" }}\n            >\n              주문\n            </Button>\n            <Button onClick={onCancel} type=\"default\">\n              취소\n            </Button>\n          </div>\n        </form>\n        {submitLoading && (\n          <>\n            <div\n              className=\"bg-box\"\n              style={{\n                position: \"absolute\",\n                width: \"100%\",\n                height: \"100%\",\n                background: \"rgba(255,255,255,0.5)\",\n                borderRadius: \"10px\",\n              }}\n            ></div>\n            <Spin className=\"modal-loading\" tip=\"Loading...\"></Spin>\n          </>\n        )}\n      </OderModalPopup>\n    </>\n  );\n}\n\nexport default OrderModal;\n","D:\\프로젝트\\react\\react-order\\src\\component\\Timer.js",["401"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Timer = ({ mm, ss, onTimeOut }) => {\r\n  const [minutes, setMinutes] = useState(parseInt(mm));\r\n  const [seconds, setSeconds] = useState(parseInt(ss));\r\n\r\n  useEffect(() => {\r\n    const countdown = setInterval(() => {\r\n      if (parseInt(seconds) > 0) {\r\n        setSeconds(parseInt(seconds) - 1);\r\n      }\r\n      if (parseInt(minutes) <= 0 && parseInt(seconds) <= 1) {\r\n        setMinutes(0);\r\n        setSeconds(0);\r\n        onTimeOut();\r\n      }\r\n      if (parseInt(seconds) === 0) {\r\n        if (parseInt(minutes) === 0) {\r\n            clearInterval(countdown);            \r\n        } else {\r\n          setMinutes(parseInt(minutes) - 1);\r\n          setSeconds(59);\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(countdown);\r\n  }, [minutes, seconds]);\r\n\r\n  return (\r\n    <>\r\n      {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\ModifyModal.js",["402"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Checkbox, Switch } from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport styled from \"styled-components\";\r\nimport uuid from \"react-uuid\";\r\nexport const FileLabel2 = styled.label`\r\n  display: flex;\r\n  width: 60px;\r\n  height: 60px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  flex-shrink: 0;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  color: #888;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\nexport const ModalPopup = styled.div`\r\n  width: 100%;\r\n  max-width: 350px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  position: fixed;\r\n  z-index: 100;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n  transform: translate(-50px, -100%);\r\n  left: ${(props) => props.posx}px;\r\n  top: ${(props) => props.posy}px;\r\n  @media all and (max-width: 640px) {\r\n    width: 80%;\r\n    max-width: 400px;\r\n    left: 50%;\r\n    transform: translate(-50%, -100%);\r\n  }\r\n`;\r\nfunction ModifyModal({ puid, pimg, onFinished, posx, posy }) {\r\n  const [radioValue, setradioValue] = useState();\r\n  const [radioValue2, setradioValue2] = useState();\r\n  const [ProdItem, setProdItem] = useState([]);\r\n\r\n  const [Soldout, setSoldout] = useState();\r\n  const SoldoutToggle = () => {\r\n    setSoldout(!Soldout);\r\n  };\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"products\")\r\n      .child(puid)\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        setProdItem(snapshot.val());\r\n        setradioValue(snapshot.val().category);\r\n        setradioValue2(snapshot.val().hot);\r\n        setSoldout(snapshot.val().soldout);\r\n      });\r\n  }, [puid]);\r\n\r\n  const onSubmitProd2 = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    let values = {\r\n      name: e.target.name.value,\r\n      option: e.target.option.value,\r\n      price: e.target.price.value,\r\n      kal: e.target.kal.value,\r\n      category: e.target.category.value,\r\n      hot: e.target.hot.value,\r\n      limit: e.target.limit.value,\r\n      add: AddCheck ? AddCheck : null,\r\n      milk: MilkCheck ? MilkCheck : null,\r\n      limit: LimitCheck ? LimitCheck : false,\r\n      sort_num: e.target.sort_num.value\r\n        ? parseInt(e.target.sort_num.value)\r\n        : 9999,\r\n      soldout: Soldout ? Soldout : false,\r\n    };\r\n    if (isNaN(values.price)) {\r\n      alert(\"가격은 숫자만 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (ImgFile2) {\r\n      var file = ImgFile2;\r\n      var metadata = ImgFile2.type;\r\n    }\r\n    try {\r\n      if (ImgFile2) {\r\n        let uploadTaskSnapshot = await firebase\r\n          .storage()\r\n          .ref(\"products\")\r\n          .child(`prod_image/${uuid()}`)\r\n          .put(file, metadata);\r\n        let downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .child(puid)\r\n          .update({\r\n            ...values,\r\n            image: downloadURL,\r\n          });\r\n      } else {\r\n        let downloadURL = pimg;\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .child(puid)\r\n          .update({\r\n            ...values,\r\n            image: downloadURL,\r\n          });\r\n      }\r\n      alert(\"상품을 수정했습니다.\");\r\n      onFinished();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const [ImgFile2, setImgFile2] = useState();\r\n  const [ProdImg2, setProdImg2] = useState();\r\n  const handleChange2 = (e) => {\r\n    setImgFile2(e.target.files[0]);\r\n    let reader = new FileReader();\r\n    reader.onload = function (event) {\r\n      setProdImg2(event.target.result);\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    setProdImg2(e.target.files[0]);\r\n  };\r\n\r\n  const radioChange = (e) => {\r\n    setradioValue(e.target.value);\r\n  };\r\n  const radioChange2 = (e) => {\r\n    setradioValue2(e.target.value);\r\n  };\r\n\r\n  const [AddCheck, setAddCheck] = useState();\r\n  function onChange(checkedValues) {\r\n    setAddCheck(checkedValues);\r\n  }\r\n  const [MilkCheck, setMilkCheck] = useState();\r\n  function onChange2(checkedValues) {\r\n    setMilkCheck(checkedValues);\r\n  }  \r\n\r\n  const [LimitCheck, setLimitCheck] = useState();\r\n  function onChange3(e) {\r\n    setLimitCheck(e.target.checked);\r\n  }  \r\n\r\n  const onCancel = () => {\r\n    onFinished();\r\n  };\r\n  if (ProdItem) {\r\n    return (\r\n      <>\r\n        <ModalPopup posx={posx} posy={posy}>\r\n          <form className=\"admin-modify-form\" onSubmit={onSubmitProd2}>\r\n            <div className=\"input-box\">\r\n              <input\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                id=\"imgFile2\"\r\n                onChange={handleChange2}\r\n              />\r\n              <FileLabel2 htmlFor=\"imgFile2\" style={{ marginRight: \"5px\" }}>\r\n                {ProdImg2 && <img src={`${ProdImg2}`} alt=\"\" />}\r\n                {!ProdImg2 && <img src={`${ProdItem.image}`} alt=\"\" />}\r\n              </FileLabel2>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot1\"\r\n                name=\"hot\"\r\n                value=\"hot & ice\"\r\n                checked={radioValue2 === \"hot & ice\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot1\">hot & ice</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot2\"\r\n                name=\"hot\"\r\n                value=\"hot only\"\r\n                checked={radioValue2 === \"hot only\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot2\">hot only</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot3\"\r\n                name=\"hot\"\r\n                value=\"ice only\"\r\n                checked={radioValue2 === \"ice only\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot3\">ice only</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot4\"\r\n                name=\"hot\"\r\n                value=\"etc\"\r\n                checked={radioValue2 === \"etc\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot4\">etc</label>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate1\"\r\n                name=\"category\"\r\n                value=\"커피\"\r\n                checked={radioValue === \"커피\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate1\">커피</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate2\"\r\n                name=\"category\"\r\n                value=\"라떼\"\r\n                checked={radioValue === \"라떼\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate2\">라떼</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate3\"\r\n                name=\"category\"\r\n                value=\"에이드\"\r\n                checked={radioValue === \"에이드\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate3\">에이드</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate4\"\r\n                name=\"category\"\r\n                value=\"차\"\r\n                checked={radioValue === \"차\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate4\">차</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate5\"\r\n                name=\"category\"\r\n                value=\"프로틴\"\r\n                checked={radioValue === \"프로틴\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate5\">에이드</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate6\"\r\n                name=\"category\"\r\n                value=\"스낵\"\r\n                checked={radioValue === \"스낵\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate6\">스낵</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate7\"\r\n                name=\"category\"\r\n                value=\"주스\"\r\n                checked={radioValue === \"주스\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate7\">주스</label>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_name\">\r\n                이름\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_name\"\r\n                name=\"name\"\r\n                defaultValue={ProdItem.name}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_option\">\r\n                옵션\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_option\"\r\n                name=\"option\"\r\n                defaultValue={ProdItem.option}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_price\">\r\n                가격\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_price\"\r\n                name=\"price\"\r\n                defaultValue={ProdItem.price}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_kal\">\r\n                칼로리\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_kal\"\r\n                name=\"kal\"\r\n                defaultValue={ProdItem.kal}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_sort_num\">\r\n                순서\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_sort_num\"\r\n                name=\"sort_num\"\r\n                defaultValue={ProdItem.sort_num ? ProdItem.sort_num : \"\"}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_limit\">\r\n                제한\r\n              </label>\r\n              <Checkbox\r\n                id=\"_limit\"\r\n                name=\"limit\"\r\n                onChange={onChange3}\r\n                value={LimitCheck}\r\n              />\r\n            </div>\r\n            <Checkbox.Group onChange={onChange}>\r\n              <Checkbox value=\"버블\" style={{ lineHeight: \"32px\" }}>\r\n                버블\r\n              </Checkbox>\r\n              <Checkbox value=\"샷\" style={{ lineHeight: \"32px\" }}>\r\n                샷\r\n              </Checkbox>\r\n              <Checkbox value=\"연하게\" style={{ lineHeight: \"32px\" }}>\r\n                연하게\r\n              </Checkbox>\r\n            </Checkbox.Group>\r\n            <Checkbox.Group onChange={onChange2}>\r\n              <Checkbox value=\"우유\" style={{ lineHeight: \"32px\" }}>\r\n                우유\r\n              </Checkbox>\r\n            </Checkbox.Group>\r\n            {(Soldout === true || Soldout === \"\") && (\r\n              <Switch\r\n                style={{ width: \"60px\" }}\r\n                onChange={SoldoutToggle}\r\n                checkedChildren=\"판매\"\r\n                unCheckedChildren=\"품절\"\r\n                defaultChecked\r\n              />\r\n            )}\r\n            {!Soldout && (\r\n              <Switch\r\n                style={{ width: \"60px\" }}\r\n                onChange={SoldoutToggle}\r\n                checkedChildren=\"판매\"\r\n                unCheckedChildren=\"품절\"\r\n              />\r\n            )}\r\n            <div className=\"btn-box\">\r\n              <Button\r\n                htmlType=\"submit\"\r\n                type=\"primary\"\r\n                style={{ marginRight: \"7px\" }}\r\n              >\r\n                수정하기\r\n              </Button>\r\n              <Button onClick={onCancel} type=\"default\">\r\n                취소\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </ModalPopup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModifyModal;\r\n","D:\\프로젝트\\react\\react-order\\src\\redux\\actions\\types.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\Signature.js",["403","404"],"import React, { useState, useEffect } from \"react\";\r\nimport SignaturePad from \"signature_pad\";\r\nimport {Button} from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\n\r\nlet sigPad = null;\r\nfunction Signature({onSigpad}) {\r\n\r\n  useEffect(() => {\r\n    let canvas  = document.getElementById(\"signature-pad\");\r\n    sigPad = new SignaturePad(canvas, {\r\n      backgroundColor: \"rgb(255, 255, 255)\",\r\n      onEnd: () => {\r\n        onSigpad(sigPad.toDataURL(\"image/svg+xml\")); \r\n      }\r\n    });\r\n\r\n    function resizeCanvas() {\r\n      let ratio =  Math.max(window.devicePixelRatio || 1, 1);\r\n      canvas.width = canvas.offsetWidth * ratio;\r\n      canvas.height = canvas.offsetHeight * ratio;\r\n      canvas.getContext(\"2d\").scale(ratio, ratio);\r\n      sigPad.clear();\r\n  }\r\n  \r\n  window.onresize = resizeCanvas;\r\n  resizeCanvas();\r\n\r\n    \r\n    return () => {};\r\n  }, []);  \r\n  const handleRestSignature = () => {\r\n    sigPad.clear();\r\n    onSigpad();\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"signature-box\">\r\n        <canvas\r\n          id=\"signature-pad\"\r\n          className=\"signature-pad\"\r\n        />\r\n        <Button className=\"clear\" onClick={handleRestSignature}>\r\n          <antIcon.AiOutlineDelete />\r\n          clear\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Signature\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\ImgUpload.js",[],"D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\Chair.js",["405","406","407","408","409","410","411","412","413","414"],"import React,{useEffect,useState} from 'react';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Popover, Popconfirm, message, Button, DatePicker, Statistic } from 'antd';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as imIcon from \"react-icons/im\";\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport moment from 'moment';\r\nimport { constant } from 'lodash';\r\nimport axios from 'axios'\r\nconst { Countdown } = Statistic;\r\n\r\nfunction Chair() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const welDb = firebase.database(wel);\r\n  const [CurDate, setCurDate] = useState(getFormatDate(new Date()))\r\n  const [TimeData, setTimeData] = useState();\r\n\r\n  const timeTable = (time,chair,start1,start2,end1,end2) => {\r\n    const first = new Date(SearchDate.year,SearchDate.og_month,SearchDate.og_day,start1,start2);\r\n    const last = new Date(SearchDate.year,SearchDate.og_month,SearchDate.og_day,end1,end2);\r\n    let timeArr = [];\r\n    let copy = timeArr.concat()\r\n    let n = 0;\r\n    let chairArr = [];\r\n    for(let i=1;i<=chair;i++){\r\n      chairArr.push({\r\n        room_num:i\r\n      })\r\n    }\r\n    while(first.getTime() < last.getTime()){\r\n      let obj = {\r\n        timeNum:n+1,\r\n        time:getFormatDate(first),\r\n        room:chairArr\r\n      }\r\n      first.setMinutes(first.getMinutes()+time)\r\n      timeArr.push(obj);\r\n      n++;\r\n    }    \r\n    return timeArr;\r\n  }\r\n  \r\n  const [Rerender, setRerender] = useState(false);\r\n  const onRerender = () => {\r\n    setRerender(!Rerender);\r\n  }\r\n  const [ListData, setListData] = useState()\r\n \r\n  const getListOff = () => {\r\n    welDb.ref(`chair/list/${CurDate.full}`).off()\r\n  }\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState()\r\n  useEffect(() => {\r\n    welDb.ref('chair/notice')\r\n    .once('value', data => {\r\n      setDefaultNotice(data.val())\r\n    })\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setCurDate(getFormatDate(new Date()))\r\n    }, 2000);\r\n    return () => {\r\n    }\r\n  }, [])\r\n  \r\n  const [SearchDate, setSearchDate] = useState(CurDate)\r\n\r\n  const [MyReservation, setMyReservation] = useState()\r\n  useEffect(() => {\r\n    //시간설정\r\n    welDb.ref('chair/time_set')\r\n    .once('value', data => {\r\n      const startTime = data.val() ? data.val().start : \"\";\r\n      const endTime = data.val() ? data.val().end : \"\";\r\n      const interval = data.val() ? data.val().interval : \"\";\r\n      // 사용자 목록\r\n      welDb.ref(`chair/user/${userInfo.uid}/list`)\r\n      .on('value', data => {\r\n        let userArr = [];\r\n        data.forEach(el=>{\r\n          for(let i in el.val()){\r\n            if(el.val()[i].reserve_time > Date.now()){\r\n              let room = el.val()[i].room === 'room1' ? <imIcon.ImMan /> :\r\n                         el.val()[i].room === 'room2' ? <imIcon.ImWoman /> : <imIcon.ImManWoman />\r\n              let obj = {\r\n                date: getFormatDate(new Date(el.val()[i].reserve_time)),\r\n                timestamp: el.val()[i].timestamp,\r\n                timeNum: el.val()[i].timeNum,\r\n                roomNum:el.val()[i].room,\r\n                room: room\r\n              }\r\n              userArr.push(obj)\r\n            }\r\n          }        \r\n        })\r\n        setMyReservation(userArr)\r\n      })\r\n  \r\n      // 예약목록\r\n      let arr = [];\r\n      welDb.ref(`chair/list/${SearchDate.full}`)\r\n      .on('value', data => {\r\n        let timeArr = timeTable(interval,3,startTime[0],startTime[1],endTime[0],endTime[1]); //시간표 생성\r\n        let arr2 = JSON.parse(JSON.stringify(timeArr));\r\n        data.forEach(el=>{\r\n          arr.push(el.val())\r\n        });\r\n        timeArr.map((time,idx)=>{\r\n          let reservCount = 0;\r\n          arr.map(user=>{\r\n            if(user.timeNum === time.timeNum){\r\n              for(let key in user){ \r\n                if(key != 'timeNum' && user[key]){                \r\n                  arr2[idx][key] = user[key]\r\n                  arr2[idx].room[user[key].room-1] = {\r\n                    ...arr2[idx].room[user[key].room-1],\r\n                    num: 'room'+user[key].room,\r\n                    check:true\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          arr2[idx].reservCount = Object.keys(arr2[idx]).length-3;\r\n        })\r\n        setListData(arr2)\r\n\r\n\r\n    })\r\n\r\n    })\r\n    \r\n    return () => {\r\n      getListOff()\r\n    }\r\n  }, [Rerender])\r\n\r\n\r\n  const reservation = (num,time,chair) => {\r\n    const type = chair === 1 ? '남' : chair === 2 ? '여' : '공용';    \r\n    const dateTime = time.full + String(time.hour) + String(time.min)\r\n    let room = 'room'+chair;\r\n    const user = {\r\n      name: userInfo.displayName,\r\n      part: userInfo.photoURL,\r\n      user_uid: userInfo.uid,\r\n      room: chair  \r\n    }\r\n\r\n    welDb.ref(`chair/user/${userInfo.uid}/list/${SearchDate.full}`)\r\n    .get()\r\n    .then(data=>{\r\n      if (data.exists()) {\r\n        message.error('예약은 하루에 한건만 가능합니다.');\r\n      }else{\r\n        \r\n            // 예약 목록\r\n            welDb.ref(`chair/list/${SearchDate.full}/${num}`)\r\n            .update({\r\n              [room]:user,\r\n              timeNum: num\r\n            })\r\n        \r\n            // 사용자 예약목록\r\n            welDb.ref(`chair/user/${userInfo.uid}/list/${SearchDate.full}/${num}`)\r\n            .update({\r\n              reserve_time:time.timestamp,\r\n              timestamp:new Date().getTime(),\r\n              timeNum: num,\r\n              room\r\n            })\r\n        \r\n            // 카운팅\r\n            welDb.ref(`chair/user/${userInfo.uid}/count`)\r\n            .transaction((pre) => {\r\n              pre++\r\n              return pre;\r\n            });\r\n\r\n            \r\n            axios.post('https://metree.co.kr/_sys/_xml/chair_api_add.php',{\r\n              name:userInfo.displayName,\r\n              call:userInfo.call_number,\r\n              date:dateTime,\r\n              type:`힐링룸(${type})`\r\n            })\r\n            .then(res=>{\r\n              message.success('예약 되었습니다.');\r\n            })\r\n            .catch(error => {\r\n              console.log(error) \r\n            });           \r\n\r\n      }\r\n    })\r\n  }\r\n\r\n  const onCancel = (date,num,room) => {     \r\n      const dateTime = date.full + String(date.hour) + String(date.min)\r\n      welDb.ref(`chair/list/${date.full}/${num}/${room}`).remove();\r\n      welDb.ref(`chair/user/${userInfo.uid}/list/${date.full}/${num}`).remove();\r\n      welDb.ref(`chair/user/${userInfo.uid}/count`)\r\n      .transaction((pre) => {\r\n        pre--\r\n        return pre;\r\n      });\r\n      \r\n      \r\n      axios.post('https://metree.co.kr/_sys/_xml/chair_api_del.php',{\r\n          name:userInfo.displayName,\r\n          call:userInfo.call_number,\r\n          date:dateTime\r\n        })\r\n        .then(res=>{\r\n          message.success('취소 되었습니다.');\r\n        })\r\n        .catch(error => {\r\n          console.log(error) \r\n        });\r\n        \r\n        \r\n\r\n      setRerender(!Rerender)\r\n  }\r\n\r\n  // 날짜선택\r\n  const onSelectDate = (date, dateString) => {\r\n    if(date){\r\n      setSearchDate(getFormatDate(date._d));\r\n      setRerender(!Rerender)\r\n    }\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current >= moment().add(7,'days').endOf('day');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {DefaultNotice &&\r\n      <div className=\"item-info-box\" style={{marginBottom:\"20px\"}}>\r\n          <pre>{DefaultNotice}</pre>\r\n      </div>\r\n      }\r\n      <div className=\"flex-box a-center\" style={{marginBottom:\"20px\"}}>\r\n      <h3 className=\"title\" style={{marginRight:\"10px\"}}>날짜선택</h3>\r\n        <DatePicker \r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          disabledDate={disabledDate}\r\n          style={{marginBottom:\"10px\"}}\r\n          onChange={onSelectDate} \r\n        />\r\n      </div>      \r\n      {MyReservation && MyReservation.length > 0 &&\r\n        <>\r\n          <h3 className=\"title\">예정중인 내 예약목록</h3>\r\n          <ul className=\"my-reserv-list\">\r\n          {MyReservation.map((el,idx)=>(\r\n            <li key={idx}>\r\n              <div className=\"box\">\r\n                <div className=\"r-day\">\r\n                  <span className=\"room\">{el.room}</span>\r\n                  <span className=\"date fon-barlow\">\r\n                    {\r\n                      el.date.full === CurDate.full ? \r\n                      '오늘 ' :\r\n                      `${el.date.full_} `\r\n                    } \r\n                    {el.date.hour}:{el.date.min}\r\n                    </span>\r\n                </div>\r\n                <div className=\"right\">\r\n                  <div className=\"count-box\">\r\n                    <antIcon.AiOutlineHourglass className=\"ic-time\" />\r\n                    <Countdown \r\n                      className=\"countdown\"\r\n                      value={el.date.timestamp}\r\n                      format=\"H시간 m분 s초\"\r\n                      onFinish={onRerender}\r\n                    />\r\n                  </div>\r\n                  <Popconfirm\r\n                    title=\"예약 취소 하시겠습니까?\"\r\n                    onConfirm={()=>{onCancel(el.date,el.timeNum,el.roomNum)}}\r\n                  >                  \r\n                    <Button className=\"btn-del\"><antIcon.AiOutlineRollback /><span className=\"no-mo\">예약취소</span></Button>\r\n                  </Popconfirm>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n          </ul>\r\n        </>\r\n      }\r\n      {ListData &&\r\n        <>\r\n          <h3 className=\"title\" style={{marginTop:\"25px\"}}>예약하기</h3>\r\n          <ul className=\"flex-box reserv-info\">\r\n            <li>\r\n              <imIcon.ImMan /> 남자전용\r\n            </li>\r\n            <li>\r\n              <imIcon.ImWoman /> 여자전용\r\n            </li>\r\n            <li>\r\n              <imIcon.ImManWoman /> 남여공용\r\n            </li>\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-reserv\" /> 예약중\r\n            </li>\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-my\" /> 내예약\r\n            </li>\r\n          </ul>\r\n          <ul className=\"reserv-time-list\">\r\n          {ListData.map((el,idx)=>(\r\n            <li \r\n              key={idx} \r\n              className={\r\n                el.time.timestamp > CurDate.timestamp &&\r\n                el.user && el.user.user_uid === userInfo.uid ? 'my-reserve' :\r\n                el.time.timestamp > CurDate.timestamp && el.user ? 'reserv' :\r\n                el.time.timestamp < CurDate.timestamp ? 'timeover' : ''\r\n              }\r\n            >\r\n              <div\r\n                className={el.reservCount === 3 ? 'box full' : 'box'}\r\n              >                \r\n                <span className=\"time fon-barlow\">{el.time.hour}:{el.time.min}</span>\r\n                <div className=\"btn-box\">\r\n                {\r\n                  el.room.map(list=>(\r\n                    <>             \r\n                    <Popconfirm\r\n                      title={\r\n                        list.room_num === 1 ? `남자방에 예약하시겠습니까?` :\r\n                        list.room_num === 2 ? `여자방에 예약하시겠습니까?` :\r\n                        `공용방에 예약하시겠습니까?`\r\n                      }\r\n                      disabled={el.time.timestamp < CurDate.timestamp || list.check ? true : false}\r\n                      onConfirm={()=>{reservation(el.timeNum,el.time,list.room_num)}}\r\n                    >\r\n                      <Button className={\r\n                        el[list.num] && el[list.num].user_uid === userInfo.uid ? 'my-reserv' :\r\n                        list.check ? 'btn-reserv' : '' \r\n                    }>\r\n                        {list.check ?\r\n                          ( <Popover \r\n                              content={`${el[list.num].name}(${el[list.num].part})`}\r\n                              trigger=\"click\"\r\n                              title=\"예약\"\r\n                            >                     \r\n                              <antIcon.AiOutlineBell style={{fontSize:\"16px\"}} />\r\n                            </Popover>\r\n                          ):\r\n                          (\r\n                            <>\r\n                              {\r\n                                list.room_num === 1 ? \r\n                                <imIcon.ImMan /> :\r\n                                list.room_num === 2 ?\r\n                                <imIcon.ImWoman /> :\r\n                                <imIcon.ImManWoman />\r\n                              }\r\n                            </>\r\n                          )\r\n                        }\r\n                        \r\n                      </Button>\r\n                    </Popconfirm>  \r\n                    </>\r\n                  ))\r\n                }                \r\n                </div> \r\n              </div>  \r\n            </li>\r\n          ))}\r\n          </ul>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Chair\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\GuestHome.js",["415","416","417","418","419","420","421","422","423","424","425","426"],"D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\ChairAdmin.js",["427"],"import React, { useState, useEffect } from 'react';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport { message, Button, Input, TimePicker } from 'antd';\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport moment from 'moment';\r\nconst { TextArea } = Input;\r\n\r\nfunction ChairAdmin() {\r\n  const welDb = firebase.database(wel);\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState()\r\n  const [DefaultTimeSet, setDefaultTimeSet] = useState()\r\n  useEffect(() => {\r\n    welDb.ref('chair/time_set')\r\n    .once('value', data => {\r\n      setDefaultTimeSet(data.val())\r\n    })\r\n    \r\n    welDb.ref('chair/notice')\r\n    .once('value', data => {\r\n      setDefaultNotice(data.val())\r\n    })\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n  const [Notice, setNotice] = useState()\r\n  const onNotice = (e) => {\r\n    setNotice(e.target.value)\r\n  }\r\n  const onNoticeSubmit = () => {\r\n    welDb.ref('chair')\r\n    .update({\r\n      notice:Notice\r\n    })\r\n\r\n  }\r\n\r\n  const [TimeInterval, setTimeInterval] = useState()\r\n  const onTimeInterval = (e) => {\r\n    setTimeInterval(e.target.value)\r\n  }\r\n  \r\n  const [TimeRange, setTimeRange] = useState();\r\n  const [DateRange, setDateRange] = useState();\r\n  const onTimeRange = (e) => {\r\n    if(e){\r\n      let time = {\r\n        start:[new Date(e[0]._d).getHours(),new Date(e[0]._d).getMinutes()],\r\n        end:[new Date(e[1]._d).getHours(),new Date(e[1]._d).getMinutes()],\r\n      }     \r\n      let date = {\r\n        start: getFormatDate(new Date(e[0]._d)),\r\n        end: getFormatDate(new Date(e[1]._d)),\r\n      }\r\n      setTimeRange(time)\r\n      setDateRange(date)\r\n    }else{\r\n      setTimeRange(\"\")\r\n    }\r\n  }\r\n\r\n  const onTimeSubmit = () => {    \r\n    if(!TimeInterval && !DefaultTimeSet){\r\n      message.error('시간간격을 입력해 주세요');\r\n      return\r\n    }\r\n    if(!TimeRange && !DefaultTimeSet){\r\n      message.error('시작시작과 끝나는시간을 입력해 주세요');\r\n      return;\r\n    }\r\n    welDb.ref('chair/time_set')\r\n    .update({\r\n      interval: TimeInterval ? parseInt(TimeInterval) : DefaultTimeSet.interval,\r\n      start: TimeRange ? TimeRange.start : DefaultTimeSet.start,\r\n      end: TimeRange ? TimeRange.end : DefaultTimeSet.end,\r\n      date_start: DateRange ? DateRange.start : DefaultTimeSet.date_start,\r\n      date_end: DateRange ? DateRange.end : DefaultTimeSet.date_end,\r\n    })\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">공지사항</h3>\r\n      <div className=\"flex-box\">\r\n        {DefaultNotice &&\r\n          <TextArea style={{height:\"60px\"}} onChange={onNotice} defaultValue={DefaultNotice} /> \r\n        }\r\n        {\r\n          !DefaultNotice &&\r\n          <TextArea style={{height:\"60px\"}} onChange={onNotice} />\r\n        }   \r\n        <Button onClick={onNoticeSubmit} type=\"primary\" style={{marginLeft:\"5px\",height:\"60px\"}}>적용</Button>\r\n      </div>\r\n      {DefaultTimeSet &&\r\n        <>\r\n          <h3 className=\"title\" style={{marginTop:\"20px\"}}>시간 설정</h3>\r\n          <Input type=\"number\" \r\n            style={{width:\"50px\"}} \r\n            onChange={onTimeInterval}\r\n            defaultValue={DefaultTimeSet.interval}\r\n          /> 분 간격 \r\n          <TimePicker.RangePicker \r\n            style={{marginLeft:\"5px\"}} \r\n            format=\"HH:mm\" \r\n            onChange={onTimeRange} \r\n            defaultValue={[moment(DefaultTimeSet.date_start.hour+ ':' +DefaultTimeSet.date_start.min,'HH:mm'),moment(DefaultTimeSet.date_end.hour+ ':' +DefaultTimeSet.date_end.min,'HH:mm')]}\r\n          />\r\n          <Button onClick={onTimeSubmit} type=\"primary\" style={{marginLeft:\"5px\"}}>적용</Button>\r\n          <p style={{marginTop:\"5px\",fontSize:\"12px\"}}>\r\n            * 시간설정이 변경되면 현재 예약중인 시간이 변경 될 수 있습니다.\r\n          </p>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChairAdmin\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\StylerAdmin.js",["428"],"import React, { useState, useEffect } from 'react';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport { message, Button, Input, TimePicker } from 'antd';\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport moment from 'moment';\r\nconst { TextArea } = Input;\r\n\r\nfunction StylerAdmin() {\r\n  const welDb = firebase.database(wel);\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState()\r\n  const [DefaultTimeSet, setDefaultTimeSet] = useState()\r\n  useEffect(() => {\r\n    welDb.ref('styler/time_set')\r\n    .once('value', data => {\r\n      setDefaultTimeSet(data.val())\r\n    })\r\n    \r\n    welDb.ref('styler/notice')\r\n    .once('value', data => {\r\n      setDefaultNotice(data.val())\r\n    })\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n  const [Notice, setNotice] = useState()\r\n  const onNotice = (e) => {\r\n    setNotice(e.target.value)\r\n  }\r\n  const onNoticeSubmit = () => {\r\n    welDb.ref('styler')\r\n    .update({\r\n      notice:Notice\r\n    })\r\n    .then(()=> message.success('적용되었습니다.'))\r\n\r\n  }\r\n\r\n  const [TimeInterval, setTimeInterval] = useState()\r\n  const onTimeInterval = (e) => {\r\n    setTimeInterval(e.target.value)\r\n  }\r\n  \r\n  const [TimeRange, setTimeRange] = useState();\r\n  const [DateRange, setDateRange] = useState();\r\n  const onTimeRange = (e) => {\r\n    if(e){\r\n      let time = {\r\n        start:[new Date(e[0]._d).getHours(),new Date(e[0]._d).getMinutes()],\r\n        end:[new Date(e[1]._d).getHours(),new Date(e[1]._d).getMinutes()],\r\n      }     \r\n      let date = {\r\n        start: getFormatDate(new Date(e[0]._d)),\r\n        end: getFormatDate(new Date(e[1]._d)),\r\n      }\r\n      setTimeRange(time)\r\n      setDateRange(date)\r\n    }else{\r\n      setTimeRange(\"\")\r\n    }\r\n  }\r\n\r\n  const onTimeSubmit = () => {    \r\n    if(!TimeInterval && !DefaultTimeSet){\r\n      message.error('시간간격을 입력해 주세요');\r\n      return\r\n    }\r\n    if(!TimeRange && !DefaultTimeSet){\r\n      message.error('시작시작과 끝나는시간을 입력해 주세요');\r\n      return;\r\n    }\r\n    welDb.ref('styler/time_set')\r\n    .update({\r\n      interval: TimeInterval ? parseInt(TimeInterval) : DefaultTimeSet.interval,\r\n      start: TimeRange ? TimeRange.start : DefaultTimeSet.start,\r\n      end: TimeRange ? TimeRange.end : DefaultTimeSet.end,\r\n      date_start: DateRange ? DateRange.start : DefaultTimeSet.date_start,\r\n      date_end: DateRange ? DateRange.end : DefaultTimeSet.date_end,\r\n    })\r\n    .then(()=> message.success('적용되었습니다.'))\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">공지사항</h3>\r\n      <div className=\"flex-box\">\r\n        {DefaultNotice &&\r\n          <TextArea style={{height:\"60px\"}} onChange={onNotice} defaultValue={DefaultNotice} /> \r\n        }\r\n        {\r\n          !DefaultNotice &&\r\n          <TextArea style={{height:\"60px\"}} onChange={onNotice} />\r\n        }   \r\n        <Button onClick={onNoticeSubmit} type=\"primary\" style={{marginLeft:\"5px\",height:\"60px\"}}>적용</Button>\r\n      </div>\r\n      <h3 className=\"title\" style={{marginTop:\"20px\"}}>시간 설정</h3>\r\n      {DefaultTimeSet &&\r\n        <Input type=\"number\" \r\n          style={{width:\"50px\"}} \r\n          onChange={onTimeInterval}\r\n          defaultValue={DefaultTimeSet.interval}\r\n        />\r\n      }\r\n      {!DefaultTimeSet &&\r\n        <Input type=\"number\" \r\n          style={{width:\"50px\"}} \r\n          onChange={onTimeInterval}\r\n        /> \r\n      }\r\n      분 간격       \r\n      {DefaultTimeSet && \r\n        <TimePicker.RangePicker \r\n          style={{marginLeft:\"5px\"}} \r\n          format=\"HH:mm\" \r\n          onChange={onTimeRange} \r\n          defaultValue={[moment(DefaultTimeSet.date_start.hour+ ':' +DefaultTimeSet.date_start.min,'HH:mm'),moment(DefaultTimeSet.date_end.hour+ ':' +DefaultTimeSet.date_end.min,'HH:mm')]}\r\n        />\r\n      }\r\n      {!DefaultTimeSet &&\r\n        <TimePicker.RangePicker \r\n          style={{marginLeft:\"5px\"}} \r\n          format=\"HH:mm\" \r\n          onChange={onTimeRange} \r\n        />\r\n      }\r\n      <Button onClick={onTimeSubmit} type=\"primary\" style={{marginLeft:\"5px\"}}>적용</Button>\r\n      <p style={{marginTop:\"5px\",fontSize:\"12px\"}}>\r\n        * 시간설정이 변경되면 현재 예약중인 시간이 변경 될 수 있습니다.\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StylerAdmin\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\welfare\\Styler.js",["429","430","431","432","433","434","435","436","437","438","439","440","441","442","443"],"import React,{useEffect,useState} from 'react';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Popover, Popconfirm, message, Button, DatePicker, Statistic } from 'antd';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as imIcon from \"react-icons/im\";\r\nimport * as riIcon from \"react-icons/ri\";\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport moment from 'moment';\r\nimport { constant } from 'lodash';\r\nimport axios from 'axios'\r\nconst { Countdown } = Statistic;\r\n\r\nfunction Styler() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const welDb = firebase.database(wel);\r\n  const [CurDate, setCurDate] = useState(getFormatDate(new Date()))\r\n  const [TimeData, setTimeData] = useState();\r\n\r\n  const timeTable = (time,styler,start1,start2,end1,end2) => {\r\n    const first = new Date(SearchDate.year,SearchDate.og_month,SearchDate.og_day,start1,start2);\r\n    const last = new Date(SearchDate.year,SearchDate.og_month,SearchDate.og_day,end1,end2);\r\n    let timeArr = [];\r\n    let copy = timeArr.concat()\r\n    let n = 0;\r\n    let stylerArr = [];\r\n    for(let i=1;i<=styler;i++){\r\n      stylerArr.push({\r\n        room_num:i\r\n      })\r\n    }\r\n    while(first.getTime() < last.getTime()){\r\n      let obj = {\r\n        timeNum:n+1,\r\n        time:getFormatDate(first),\r\n        room:stylerArr\r\n      }\r\n      first.setMinutes(first.getMinutes()+time)\r\n      timeArr.push(obj);\r\n      n++;\r\n    }    \r\n    return timeArr;\r\n  }\r\n  \r\n  const [Rerender, setRerender] = useState(false);\r\n  const onRerender = () => {\r\n    setRerender(!Rerender);\r\n  }\r\n  const [ListData, setListData] = useState()\r\n \r\n  const getListOff = () => {\r\n    welDb.ref(`styler/list/${CurDate.full}`).off()\r\n  }\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState()\r\n  useEffect(() => {\r\n    welDb.ref('styler/notice')\r\n    .once('value', data => {\r\n      setDefaultNotice(data.val())\r\n    })\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setCurDate(getFormatDate(new Date()))\r\n    }, 2000);\r\n    return () => {\r\n    }\r\n  }, [])\r\n  \r\n  const [SearchDate, setSearchDate] = useState(CurDate)\r\n\r\n  const [MyReservation, setMyReservation] = useState()\r\n  useEffect(() => {\r\n    //시간설정\r\n    welDb.ref('styler/time_set')\r\n    .once('value', data => {\r\n      const startTime = data.val() ? data.val().start : \"\";\r\n      const endTime = data.val() ? data.val().end : \"\";\r\n      const interval = data.val() ? data.val().interval : \"\";\r\n      // 사용자 목록\r\n      welDb.ref(`styler/user/${userInfo.uid}/list`)\r\n      .on('value', data => {        \r\n        let userArr = [];\r\n        data.forEach(el=>{\r\n          for(let i in el.val()){\r\n            if(el.val()[i].reserve_time > Date.now()){\r\n              console.log(el.val()[i])\r\n              let room = el.val()[i].room_num <= 3 ? 1 :\r\n              2\r\n              let obj = {\r\n                date: getFormatDate(new Date(el.val()[i].reserve_time)),\r\n                timestamp: el.val()[i].timestamp,\r\n                timeNum: el.val()[i].timeNum,\r\n                roomNum:el.val()[i].room,\r\n                room: room\r\n              }\r\n              userArr.push(obj)\r\n            }\r\n          }        \r\n        })\r\n        setMyReservation(userArr)\r\n      })\r\n  \r\n      // 예약목록\r\n      let arr = [];      \r\n      welDb.ref(`styler/list/${SearchDate.full}`)\r\n      .on('value', data => {\r\n        let timeArr = timeTable(interval,6,startTime[0],startTime[1],endTime[0],endTime[1]); //시간표 생성\r\n        let arr2 = JSON.parse(JSON.stringify(timeArr));\r\n        data.forEach(el=>{\r\n          arr.push(el.val())\r\n        });\r\n        timeArr.map((time,idx)=>{\r\n          arr.map(user=>{\r\n            if(user.timeNum === time.timeNum){\r\n              for(let key in user){ \r\n                if(key != 'timeNum' && user[key]){                \r\n                  arr2[idx][key] = user[key]\r\n                  arr2[idx].room[user[key].room-1] = {\r\n                    ...arr2[idx].room[user[key].room-1],\r\n                    num: 'room'+user[key].room,\r\n                    check:true\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          arr2[idx].reservCount = Object.keys(arr2[idx]).length-3;\r\n        })\r\n        setListData(arr2)\r\n      })\r\n\r\n\r\n    })\r\n    \r\n    return () => {\r\n      welDb.ref(`styler/list/${SearchDate.full}`).off()\r\n    }\r\n  }, [Rerender])\r\n\r\n\r\n  const reservation = (num,time,styler) => {\r\n    let room = 'room'+styler;\r\n    const user = {\r\n      name: userInfo.displayName,\r\n      part: userInfo.photoURL,\r\n      user_uid: userInfo.uid,\r\n      room: styler  \r\n    }\r\n\r\n    welDb.ref(`styler/user/${userInfo.uid}/list/${SearchDate.full}`)\r\n    .get()\r\n    .then(data=>{\r\n      if (data.exists()) {\r\n        message.error('예약은 하루에 한건만 가능합니다.');\r\n      }else{\r\n\r\n        welDb.ref(`styler/list/${SearchDate.full}/${num}`)\r\n        .get()\r\n        .then(data=>{\r\n          let able = true;\r\n          for(let i=1; i<styler; i++){\r\n            let num = 'room'+i;\r\n            console.log(data.val())\r\n            if(!data.val() || data.val() && !data.val()[num]){\r\n              message.error('예약은 순서대로 해주세요.');\r\n              able = false;\r\n              return;\r\n            }\r\n          }\r\n          if(able){\r\n            // 예약 목록\r\n            welDb.ref(`styler/list/${SearchDate.full}/${num}`)\r\n            .update({\r\n              [room]:user,\r\n              timeNum: num\r\n            })\r\n        \r\n            // 사용자 예약목록\r\n            welDb.ref(`styler/user/${userInfo.uid}/list/${SearchDate.full}/${num}`)\r\n            .update({\r\n              reserve_time:time.timestamp,\r\n              timestamp:new Date().getTime(),\r\n              timeNum: num,\r\n              room,\r\n              room_num:styler\r\n            })\r\n        \r\n            // 카운팅\r\n            welDb.ref(`styler/user/${userInfo.uid}/count`)\r\n            .transaction((pre) => {\r\n              pre++\r\n              return pre;\r\n            });\r\n            welDb.ref(`styler/count`)\r\n            .transaction((pre) => {\r\n              pre++\r\n              return pre;\r\n            });            \r\n            message.success('예약 되었습니다.');\r\n          }\r\n        })\r\n         \r\n\r\n      }\r\n    })\r\n  }\r\n\r\n  const onCancel = (date,num,room) => {     \r\n      const dateTime = date.full + String(date.hour) + String(date.min)\r\n      welDb.ref(`styler/list/${date.full}/${num}/${room}`).remove()\r\n      .then(()=>{\r\n      })\r\n      welDb.ref(`styler/user/${userInfo.uid}/list/${date.full}/${num}`).remove();\r\n      welDb.ref(`styler/user/${userInfo.uid}/count`)\r\n      .transaction((pre) => {\r\n        pre--\r\n        return pre;\r\n      });\r\n      welDb.ref(`styler/count`)\r\n      .transaction((pre) => {\r\n        pre--\r\n        return pre;\r\n      });\r\n      \r\n      message.success('취소 되었습니다.');\r\n\r\n      setRerender(!Rerender)\r\n  }\r\n\r\n  // 날짜선택\r\n  const onSelectDate = (date, dateString) => {\r\n    if(date){\r\n      setSearchDate(getFormatDate(date._d));\r\n      setRerender(!Rerender)\r\n    }\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current >= moment().endOf('day');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {DefaultNotice &&\r\n      <div className=\"item-info-box\" style={{marginBottom:\"20px\"}}>\r\n          <pre>{DefaultNotice}</pre>\r\n      </div>\r\n      }\r\n      <div className=\"flex-box a-center\" style={{marginBottom:\"20px\"}}>\r\n      <h3 className=\"title\" style={{marginRight:\"10px\"}}>날짜선택</h3>\r\n        <DatePicker \r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          disabledDate={disabledDate}\r\n          style={{marginBottom:\"10px\"}}\r\n          onChange={onSelectDate} \r\n        />\r\n      </div>      \r\n      {MyReservation && MyReservation.length > 0 &&\r\n        <>\r\n          <h3 className=\"title\">예정중인 내 예약목록</h3>\r\n          <ul className=\"my-reserv-list styler\">\r\n          {MyReservation.map((el,idx)=>(\r\n            <li key={idx}>\r\n              <div className=\"box\">\r\n                <div className=\"r-day\">\r\n                  <span className=\"room\">{el.room}</span>\r\n                  <span className=\"date fon-barlow\">\r\n                    {\r\n                      el.date.full === CurDate.full ? \r\n                      '오늘 ' :\r\n                      `${el.date.full_} `\r\n                    } \r\n                    {el.date.hour}:{el.date.min}\r\n                    </span>\r\n                </div>\r\n                <div className=\"right\">\r\n                  <div className=\"count-box\">\r\n                    <antIcon.AiOutlineHourglass className=\"ic-time\" />\r\n                    <Countdown \r\n                      className=\"countdown\"\r\n                      value={el.date.timestamp}\r\n                      format=\"H시간 m분 s초\"\r\n                      onFinish={onRerender}\r\n                    />\r\n                  </div>\r\n                  <Popconfirm\r\n                    title=\"예약 취소 하시겠습니까?\"\r\n                    onConfirm={()=>{onCancel(el.date,el.timeNum,el.roomNum)}}\r\n                  >                  \r\n                    <Button className=\"btn-del\"><antIcon.AiOutlineRollback /><span className=\"no-mo\">예약취소</span></Button>\r\n                  </Popconfirm>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n          </ul>\r\n        </>\r\n      }\r\n      {ListData &&\r\n        <>\r\n          <h3 className=\"title\" style={{marginTop:\"25px\"}}>예약하기</h3>\r\n          <ul className=\"flex-box reserv-info\">            \r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-reserv\" /> 예약중\r\n            </li>\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-my\" /> 내예약\r\n            </li>\r\n          </ul>\r\n          <ul className=\"reserv-time-list styler\">\r\n          {ListData.map((el,idx)=>(\r\n            <li \r\n              key={idx} \r\n              className={\r\n                el.time.timestamp > CurDate.timestamp &&\r\n                el.user && el.user.user_uid === userInfo.uid ? 'my-reserve' :\r\n                el.time.timestamp > CurDate.timestamp && el.user ? 'reserv' :\r\n                el.time.timestamp < CurDate.timestamp ? 'timeover' : ''\r\n              }\r\n            >\r\n              <div\r\n                className={el.reservCount === 6 ? 'box full' : 'box'}\r\n              >                \r\n                <span className=\"time fon-barlow\">{el.time.hour}:{el.time.min}</span>\r\n                <div className=\"btn-box\">\r\n                {\r\n                  el.room.map(list=>(\r\n                    <>             \r\n                    <Popconfirm\r\n                      title={\r\n                        list.room_num <= 3 ? `1번기기에 예약하시겠습니까?` :\r\n                        `2번기기에 예약하시겠습니까?`\r\n                      }\r\n                      disabled={el.time.timestamp < CurDate.timestamp || list.check ? true : false}\r\n                      onConfirm={()=>{reservation(el.timeNum,el.time,list.room_num)}}\r\n                    >\r\n                      <Button className={\r\n                        el[list.num] && el[list.num].user_uid === userInfo.uid ? 'my-reserv' :\r\n                        list.check ? 'btn-reserv' : '' \r\n                    }>\r\n                        {list.check ?\r\n                          ( <Popover \r\n                              content={`${el[list.num].name}(${el[list.num].part})`}\r\n                              trigger=\"click\"\r\n                              title=\"예약\"\r\n                            >                     \r\n                              <antIcon.AiOutlineBell style={{fontSize:\"16px\"}} />\r\n                            </Popover>\r\n                          ):\r\n                          (\r\n                            <>\r\n                              {\r\n                                list.room_num === 1 ?\r\n                                <><riIcon.RiNumber1 /></>:\r\n                                list.room_num === 2 ?\r\n                                <><riIcon.RiNumber1 /></>:\r\n                                list.room_num === 3 ?\r\n                                <><riIcon.RiNumber1 /></>:\r\n                                list.room_num === 4 ?\r\n                                <><riIcon.RiNumber2 /></>:\r\n                                list.room_num === 5 ?\r\n                                <><riIcon.RiNumber2 /></>:\r\n                                list.room_num === 6 ?\r\n                                <><riIcon.RiNumber2 /></>: ''\r\n                                \r\n                              }\r\n                            </>\r\n                          )\r\n                        }\r\n                        \r\n                      </Button>\r\n                    </Popconfirm>  \r\n                    </>\r\n                  ))\r\n                }                \r\n                </div> \r\n              </div>  \r\n            </li>\r\n          ))}\r\n          </ul>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Styler\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\inven\\Inventory.js",["444","445","446"],"import React,{ useState, useEffect, useRef } from 'react';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport { getFormatDate } from '../CommonFunc';\r\nimport { Button,Popconfirm,message,InputNumber,Modal,Form,Input,DatePicker,Table } from 'antd'\r\nimport * as bsIcon from \"react-icons/bs\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport { useSelector } from \"react-redux\";\r\nimport uuid from \"react-uuid\";\r\nimport moment from 'moment';\r\n\r\nfunction Inventory() {\r\n  const nowDate = getFormatDate(new Date());\r\n  const curDate = nowDate.full;\r\n  const curMonth = curDate.substr(0,curDate.length-2)\r\n  const db = firebase.database(wel);\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [InvenData, setInvenData] = useState();\r\n  const formRef = useRef();\r\n\r\n  const [SearchMonth, setSearchMonth] = useState(curMonth);\r\n  const onSearchMonth = (date, dateString) => {\r\n    let regex = /-/g\r\n    let month = dateString.replace(regex,\"\")\r\n    setSearchMonth(month)\r\n  } \r\n\r\n  const columns = [\r\n    {\r\n      title: '등록일자',\r\n      dataIndex: ['date','date_'],\r\n      key: 'date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => b.date.timestamp - a.date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      defaultSortOrder: 'ascend',\r\n      render: (text,row) => `${row['date'].full_} ${row['date'].hour}:${row['date'].min}`\r\n    },\r\n    {\r\n      title: '입출고일자',\r\n      dataIndex: ['real_date'],\r\n      key: 'real_date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => b.real_date.timestamp - a.real_date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      defaultSortOrder: 'ascend',\r\n      render: (text,row) => `${row['real_date'].full_}`\r\n    },\r\n    {\r\n      title: '입출고',\r\n      dataIndex: 'type',\r\n      key: 'type',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '사용자',\r\n      dataIndex: ['name','part'],\r\n      key: 'name',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: (text,row) => `${row['name']}`\r\n    },\r\n    {\r\n      title: '품명',\r\n      dataIndex: 'prod',\r\n      key: 'prod',\r\n      align: 'center',  \r\n      width: 120,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '수량',\r\n      dataIndex: 'val',\r\n      key: 'val',\r\n      align: 'center',  \r\n      width: 40,    \r\n      render: data => data\r\n    },  \r\n    {\r\n      title: '비고',\r\n      dataIndex: 'comment',\r\n      key: 'comment',\r\n      align: 'center',  \r\n      width: 200,    \r\n      render: data => data\r\n    }, \r\n    {\r\n      title: '출납 후 재고',\r\n      dataIndex: 'ea',\r\n      key: 'ea',\r\n      align: 'center',  \r\n      width: 80,    \r\n      render: (text,row) => <>\r\n        <span>{row['ea']}</span>\r\n      </>\r\n    },\r\n    {\r\n      title: '삭제',\r\n      dataIndex: ['ea','val','real_date','prod_uid','uid','key'],\r\n      key: 'ea',\r\n      align: 'center',  \r\n      width: 80,    \r\n      render: (text,row) => <>\r\n        <Popconfirm\r\n          title={`삭제하시겠습니까?`}\r\n          onConfirm={()=>onLogDelete(row['ea'],row['val'],row['real_date'],row['prod_uid'],row['uid'],row['key'])}\r\n          onCancel={cancel}\r\n          okText=\"네\"\r\n          cancelText=\"아니오\"\r\n        >\r\n          <Button onClick={()=>onLogDelete(row['ea'],row['val'],row['real_date'],row['prod_uid'],row['uid'],row['key'])}><antIcon.AiOutlineDelete style={{marginTop:\"4px\"}} /></Button>\r\n        </Popconfirm>\r\n      </>\r\n    },\r\n  ]\r\n\r\n  const [ProdItem, setProdItem] = useState();\r\n\r\n  useEffect(() => {    \r\n    db.ref('inventory/list')\r\n    .on('value',snapshot => {\r\n      let arr = [];\r\n      snapshot.forEach(el => {\r\n        arr.push(el.val())\r\n      })\r\n      setInvenData(arr)\r\n    })\r\n\r\n    db.ref(`inventory/user/${SearchMonth}/${userInfo.uid}`)\r\n    .on(\"value\", snapshot => {\r\n      let arr = [];\r\n      snapshot.forEach(item=>{\r\n        let obj = item.val();\r\n        arr.push(obj)\r\n      })     \r\n      console.log(arr)\r\n      setProdItem(arr)\r\n    })\r\n    return () => {\r\n      db.ref('inventory/list').off()\r\n    }\r\n  }, [])\r\n\r\n  const cancel = function cancel(e) {\r\n    message.error('취소되었습니다.');\r\n  }\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    setModifyUid('');\r\n  }; \r\n  const onModify = (uid,name,ea) => {\r\n    let obj = {\r\n      uid,\r\n      name,\r\n      ea\r\n    }\r\n    setModifyUid(obj)\r\n    setIsModalVisible(true);\r\n  }\r\n  const [ModifyUid, setModifyUid] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);  \r\n  const onModifySubmit = (values) => {\r\n    const agree = window.confirm('출고 하시겠습니까?\\n(수량확인 부탁드립니다)')\r\n    if(!agree){return}\r\n    let ea = parseInt(ModifyUid.ea) - parseInt(values.val);\r\n    if(ea < 0){\r\n      message.error('재고가 부족합니다.');\r\n      return\r\n    }\r\n    let date = values.real_date ? getFormatDate(new Date(values.real_date)) : getFormatDate(new Date());\r\n    values.real_date = date;\r\n    values.comment = values.comment ? values.comment : '';\r\n    const uid = uuid();\r\n    let obj = {\r\n      ...values,\r\n      ea,\r\n      type:\"출고\",\r\n      prod_uid:ModifyUid.uid,\r\n      prod:ModifyUid.name,\r\n      name:userInfo.displayName,\r\n      part:userInfo.photoURL,\r\n      sosok:userInfo.sosok,\r\n      uid:userInfo.uid,\r\n      key:uid,\r\n      date:getFormatDate(new Date()),\r\n    }\r\n\r\n    db.ref(`inventory/log/${curDate}/${uid}`)\r\n    .update({...obj})\r\n\r\n    db.ref(`inventory/list/${ModifyUid.uid}`)\r\n    .child('ea')\r\n    .transaction((pre) => {\r\n      let curValue = pre;\r\n      curValue = parseInt(pre) - parseInt(values.val);\r\n      return curValue;\r\n    });\r\n\r\n    let monthDate = curDate.substr(0,curDate.length-2)\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${ModifyUid.uid}`)\r\n    .update({\r\n      prod:ModifyUid.name\r\n    })\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${ModifyUid.uid}/output`)\r\n    .transaction(pre=>{\r\n      if(pre == 'undefined'){\r\n        db.ref(`inventory/log_month/${monthDate}/${ModifyUid.uid}/output`)\r\n        .update(parseInt(values.val))\r\n      }else{\r\n        return pre + parseInt(values.val);\r\n      }\r\n    }) \r\n\r\n    db\r\n    .ref(`inventory/log_date/${ModifyUid.uid}/${curDate}`)\r\n    .update({\r\n      prod:ModifyUid.name,\r\n      ea          \r\n    });\r\n\r\n    db\r\n    .ref(`inventory/user/${monthDate}/${userInfo.uid}/${uid}`)\r\n    .update({\r\n      ...obj\r\n    })\r\n\r\n    message.success(\"출고완료\");\r\n    formRef.current.resetFields();\r\n    setIsModalVisible(false);\r\n    setModifyUid(\"\");\r\n\r\n  }\r\n\r\n\r\n  const onLogDelete = (ea,val,date,prod,uid,key) => {\r\n    console.log(ea,val,date.full,prod,uid,key)\r\n    let monthDate = date.full.substr(0,date.full.length-2)\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${prod}/output`)\r\n    .transaction(pre=>{\r\n      return pre - parseInt(val);\r\n    }) \r\n\r\n    db\r\n    .ref(`inventory/list/${prod}/ea`)\r\n    .transaction(pre=>{\r\n      return pre - parseInt(val);\r\n    }) \r\n\r\n    db\r\n    .ref(`inventory/log_date/${prod}/${date.full}/ea`)\r\n    .transaction(pre=>{\r\n      return pre - parseInt(val);\r\n    })\r\n\r\n    db\r\n    .ref(`inventory/user/${monthDate}/${uid}/${key}`)\r\n    .remove()\r\n\r\n    db\r\n    .ref(`inventory/log/${date.full}/${key}`)\r\n    .remove()\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {InvenData && \r\n      <ul className=\"inven-list-box\">\r\n        {InvenData.map((el,idx)=>(\r\n          <li key={idx}>\r\n            <div className=\"list-con\">\r\n              <div className=\"left\">\r\n                {el.image ? <div className=\"img-box\"><img src={el.image} /></div>\r\n                  : <div className=\"img-box no-img\"><bsIcon.BsImage /></div>\r\n                }\r\n                <dl className=\"txt-box\">\r\n                  <dt>{el.name}</dt>\r\n                  <dd>{el.etc}</dd>\r\n                </dl>\r\n              </div>\r\n              <div className=\"right\">\r\n                <span className=\"ea\">재고 : {el.ea}</span>\r\n                  <div className=\"input-box\">\r\n                    <Button type=\"primary\" onClick={()=>onModify(el.uid,el.name,el.ea)}>사용</Button>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>      \r\n      }\r\n\r\n      <div className=\"flex-box a-center\" style={{marginTop:\"30px\",marginBottom:\"10px\"}}>\r\n        <h3 className=\"title\" style={{marginBottom:\"0\",marginRight:\"10px\"}}>비품 출고 내역</h3>\r\n        <DatePicker defaultValue={moment(SearchMonth,'YYYY-MM')} onChange={onSearchMonth} picker=\"month\" style={{marginRight:\"5px\"}} />\r\n        <span style={{fontSize:\"12px\",color:\"#888\"}}>*월별 검색</span>\r\n      </div>\r\n      {ProdItem &&\r\n        <Table \r\n          columns={columns} \r\n          dataSource={ProdItem}\r\n        />      \r\n      }\r\n\r\n      {ModifyUid && \r\n      <Modal title={`${ModifyUid.name}`} \r\n       visible={isModalVisible}\r\n       onCancel={handleCancel}\r\n       centered\r\n       footer={false}\r\n      >\r\n        <Form \r\n          className=\"admin-prod-form\" \r\n          onFinish={onModifySubmit}\r\n          ref={formRef}\r\n        >   \r\n          <Form.Item\r\n            name=\"real_date\"\r\n            label=\"실출고일\"\r\n          >  \r\n            <DatePicker style={{marginRight:\"5px\"}} />       \r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"val\"\r\n            label=\"수량\"            \r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"재고개수를 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber min={1} max={999} style={{width:\"50px\"}} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"comment\"\r\n            label=\"비고\"\r\n          >\r\n            <Input style={{maxWidth:\"100%\"}} />\r\n          </Form.Item>\r\n          <div\r\n            className=\"btn-box\"\r\n            style={{ width: \"100%\", maxWidth: \"100%\", textAlign: \"center\" }}\r\n          >\r\n            <Button\r\n              htmlType=\"submit\"\r\n              type=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              출고하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Inventory\r\n","D:\\프로젝트\\react\\react-order\\src\\component\\Admin\\InvenAdmin.js",["447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464"],"import React,{ useState, useEffect, useRef } from 'react';\r\nimport {Form, Button, Input, Radio, Checkbox, Row, Divider, Switch, message, Table, Upload, Modal, InputNumber, Popconfirm, DatePicker } from \"antd\";\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport ImgUpload from './ImgUpload';\r\nimport firebase, {wel} from \"../../firebase\";\r\nimport styled from \"styled-components\";\r\nimport uuid from \"react-uuid\";\r\nimport moment from 'moment';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFormatDate, getArr,getMax } from '../CommonFunc';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { once } from 'lodash';\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction InvenAdmin() {\r\n  const nowDate = getFormatDate(new Date());\r\n  const curDate = nowDate.full;\r\n  const curMonth = curDate.substr(0,curDate.length-2)\r\n  const db = firebase.database(wel);\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ProdItem, setProdItem] = useState();\r\n  const formRef = useRef();\r\n\r\n  const [Render, setRender] = useState(false)\r\n\r\n  const [submitDate, setsubmitDate] = useState(nowDate);\r\n  const onSubmitDate = (date, dateString) => {\r\n    let res;\r\n    res = date ? getFormatDate(new Date(date._d)) : getFormatDate(new Date());\r\n    setsubmitDate(res);\r\n  }\r\n  const [DateStart, setDateStart] = useState(curDate);\r\n  const [DateEnd, setDateEnd] = useState(curDate);\r\n  const onSearchDate = (date, dateString) => {\r\n    let start;\r\n    let end;\r\n    start = date ? getFormatDate(new Date(date[0]._d)).full : '';\r\n    end = date ? getFormatDate(new Date(date[1]._d)).full : '';\r\n    setDateStart(start);\r\n    setDateEnd(end);\r\n    setTimeout(()=>setRender(!Render),100)\r\n    \r\n  }  \r\n  \r\n  const [SearchMonth, setSearchMonth] = useState(curMonth);\r\n  const onSearchMonth = (date, dateString) => {\r\n    let regex = /-/g\r\n    let month = dateString.replace(regex,\"\")\r\n    setSearchMonth(month)\r\n  } \r\n\r\n\r\n  const excelHeaders = [\r\n    {label: \"등록일자\", key:\"date_\"},\r\n    {label: \"입출고일자\", key:\"real_date_\"},\r\n    {label: \"입출고\", key:\"type\"},\r\n    {label: \"사용자\", key:\"name\"},\r\n    {label: \"품명\", key:\"prod\"},\r\n    {label: \"수량\", key:\"val\"},\r\n    {label: \"출납 후 재고\", key:\"ea\"}\r\n  ]\r\n\r\n  const excelHeaders2 = [    \r\n    {label: \"품명\", key:\"prod\"},\r\n    {label: \"재고\", key:\"ea\"}\r\n  ]\r\n\r\n  const excelHeaders3 = [    \r\n    {label: \"품명\", key:\"prod\"},\r\n    {label: \"입고\", key:\"input\"},\r\n    {label: \"출고\", key:\"output\"}\r\n  ]\r\n  \r\n  const [ModifyUid, setModifyUid] = useState(\"\");\r\n  const [ModifyData, setModifyData] = useState()\r\n  useEffect(() => {\r\n    db.ref(\"inventory/list\")\r\n    .on(\"value\", snapshot => {\r\n      let arr = [];\r\n      snapshot.forEach(item=>{\r\n        let obj = item.val();\r\n        arr.push(obj)\r\n      })     \r\n      setProdItem(arr)\r\n    })\r\n    \r\n    return () => {\r\n      db.ref(\"inventory/list\").off()\r\n    }\r\n  }, [Render])\r\n\r\n  useEffect(() => {\r\n    ModifyUid &&\r\n    db.ref(\"inventory/list\")\r\n    .child(ModifyUid)\r\n    .once(\"value\")\r\n    .then(item=>{\r\n      setModifyData(item.val())\r\n    })\r\n    return () => {\r\n      db.ref(\"inventory/list\").off()\r\n    }\r\n  }, [ModifyUid])\r\n\r\n  const [ThisLogUid, setThisLogUid] = useState();\r\n  const [ThisLogData, setThisLogData] = useState();\r\n  const onLogList = (uid,prod,ea) => {\r\n    setIsLogVisible(true);\r\n    let obj = {\r\n      uid,prod,ea\r\n    }\r\n    setThisLogUid(obj)\r\n  }\r\n  useEffect(() => {\r\n    ThisLogUid &&\r\n    db.ref(\"inventory/log\")\r\n    .orderByKey()\r\n    .startAt(DateStart)\r\n    .endAt(DateEnd)\r\n    .once(\"value\")\r\n    .then(snapshot=>{\r\n      let arr = [];\r\n      snapshot.val() && snapshot.forEach((el)=>{\r\n        let obj = getArr(el.val())\r\n        obj = obj.filter(list=> list.prod_uid === ThisLogUid.uid)\r\n        let arr2 = [];\r\n        obj.map(list=>{\r\n          var obj2 = {\r\n            ...list,\r\n            date_: `${list.date.full_} ${list.date.hour}:${list.date.min}`,\r\n            real_date_:`${list.real_date.full_}`,\r\n            name:`${list.name}(${list.part})`\r\n          }\r\n          arr2.push(obj2)\r\n        }) \r\n        arr.push(...arr2)\r\n      })\r\n      console.log(arr)\r\n      setThisLogData(arr)\r\n    })\r\n    return () => {\r\n      \r\n    }\r\n  }, [ThisLogUid])\r\n\r\n  // 일변 재고조회\r\n  const [EaDate, setEaDate] = useState(curDate);\r\n  const SearchEaDate = (date, dateString) => {\r\n    let regex = /-/g;\r\n    let day = dateString.replace(regex,\"\")\r\n    setEaDate(day)\r\n  } \r\n  const [EaData, setEaData] = useState()\r\n  useEffect(() => {\r\n    let arr = [];\r\n    db.ref(\"inventory/log_date\")\r\n    .once('value', snapshot => {\r\n      snapshot.forEach(el=>{        \r\n        let obj = el.val();\r\n        let keys = Object.keys(obj);\r\n        if(keys.includes(EaDate)){\r\n          arr.push(obj[EaDate])\r\n        }else{\r\n          let idx = getMax(keys,EaDate)\r\n          if(idx){\r\n            arr.push(obj[idx])\r\n          }\r\n        }\r\n      })\r\n      setEaData(arr)\r\n    })\r\n\r\n    return () => {\r\n    }\r\n  }, [EaDate])\r\n  const date_columns = [\r\n    {\r\n      title: '품명',\r\n      dataIndex: 'prod',\r\n      key: 'prod',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '재고',\r\n      dataIndex: 'ea',\r\n      key: 'ea',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data ? data : 0\r\n    } \r\n  ]\r\n\r\n\r\n  // 전체조회(월별)\r\n  const [TotalLogData, setTotalLogData] = useState()\r\n  useEffect(() => {\r\n    let arr = [];\r\n    db.ref(\"inventory/log_month\")\r\n    .orderByKey()\r\n    .equalTo(SearchMonth)\r\n    .on(\"value\", snapshot => {\r\n      snapshot.val() && snapshot.forEach((el)=>{\r\n        let obj = getArr(el.val())\r\n        arr.push(...obj)\r\n      })\r\n      setTotalLogData(arr)\r\n    })\r\n    return () => {\r\n      db.ref(\"inventory/log_month\").off();\r\n    }\r\n  }, [SearchMonth,Render])\r\n  const total_columns = [\r\n    {\r\n      title: '년월',\r\n      dataIndex: 'prod',\r\n      key: 'prod',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => `${SearchMonth.substr(0,SearchMonth.length-2)}-${SearchMonth.substr(4,SearchMonth.length-2)}`\r\n    },\r\n    {\r\n      title: '품명',\r\n      dataIndex: 'prod',\r\n      key: 'prod',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '입고',\r\n      dataIndex: 'input',\r\n      key: 'input',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data ? data : 0\r\n    },\r\n    {\r\n      title: '출고',\r\n      dataIndex: 'output',\r\n      key: 'output',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data ? data : 0\r\n    }  \r\n  ]\r\n  \r\n  const [LogListData, setLogListData] = useState()\r\n  useEffect(() => {\r\n    db.ref(`inventory/log`)\r\n    .orderByKey()\r\n    .startAt(DateStart)\r\n    .endAt(DateEnd)\r\n    .on(\"value\", snapshot => {\r\n      let arr = [];\r\n      snapshot.val() && snapshot.forEach((el)=>{\r\n        let obj = getArr(el.val())\r\n        let arr2 = [];\r\n        obj.map(list=>{\r\n          let obj2 = {\r\n            ...list,\r\n            date_: `${list.date.full_} ${list.date.hour}:${list.date.min}`,\r\n            real_date_:`${list.real_date.full_}`,\r\n            name:`${list.name}(${list.part})`\r\n          }\r\n          arr2.push(obj2)\r\n        })\r\n        arr.push(...arr2)\r\n        setLogListData(arr)\r\n      })\r\n    })\r\n    return () => {\r\n      db.ref(\"inventory/list\").off()\r\n    }\r\n  }, [Render])\r\n  \r\n\r\n  const onPlus = (uid,prod,ea) => {\r\n    let val = document.querySelector(`#plus_${uid}`).value;\r\n    if(!val){\r\n      message.error('입고할 개수를 입력해 주세요.');\r\n      return\r\n    }\r\n    let rest = parseInt(ea) + parseInt(val)\r\n    val &&\r\n    db.ref(`inventory/log/${submitDate.full}/${uuid()}`)\r\n    .update({\r\n      prod,\r\n      prod_uid:uid,\r\n      ea:rest,\r\n      type:'입고',\r\n      name:userInfo.displayName,\r\n      part:userInfo.photoURL,\r\n      sosok:userInfo.sosok,\r\n      uid:userInfo.uid,\r\n      val,\r\n      real_date:submitDate,\r\n      comment:LogMessege,\r\n      date:getFormatDate(new Date())\r\n    })\r\n    val && \r\n    db.ref(`inventory/list/${uid}/ea`)\r\n    .transaction(pre=>{\r\n      return pre + parseInt(val);\r\n    })\r\n\r\n    let monthDate = submitDate.full.substr(0,submitDate.full.length-2)\r\n    val && \r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${uid}`)\r\n    .update({\r\n      prod\r\n    })\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${uid}/input`)\r\n    .transaction(pre=>{\r\n      if(pre == 'undefined'){\r\n        db.ref(`inventory/log_month/${monthDate}/${uid}/input`)\r\n        .update(parseInt(val))\r\n      }else{\r\n        return pre + parseInt(val);\r\n      }      \r\n    })\r\n\r\n    db\r\n    .ref(`inventory/log_date/${uid}/${submitDate.full}`)\r\n    .update({\r\n      prod,\r\n      ea:rest\r\n    });\r\n\r\n    message.success('업데이트 완료');\r\n    setLogMessege('')\r\n    setRender(!Render)\r\n  }\r\n  const onMinus = (uid,prod,ea) => {    \r\n    let val = document.querySelector(`#minus_${uid}`).value;\r\n    if(!val){\r\n      message.error('출고할 개수를 입력해 주세요.');\r\n      return\r\n    }\r\n    if(ea < val){\r\n      message.error('남은 재고개수보다 많습니다.');\r\n      return;\r\n    }\r\n    let rest = parseInt(ea) - parseInt(val);\r\n    val &&    \r\n    db.ref(`inventory/log/${submitDate.full}/${uuid()}`)\r\n    .update({\r\n      ea:rest,\r\n      prod,\r\n      prod_uid:uid,\r\n      type:'출고',\r\n      name:userInfo.displayName,\r\n      part:userInfo.photoURL,\r\n      sosok:userInfo.sosok,\r\n      uid:userInfo.uid,\r\n      real_date:submitDate,\r\n      comment:LogMessege,\r\n      val,\r\n      date:getFormatDate(new Date())\r\n    });\r\n\r\n    let monthDate = submitDate.full.substr(0,submitDate.full.length-2)\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${uid}`)\r\n    .update({\r\n      prod\r\n    })\r\n    db\r\n    .ref(`inventory/log_month/${monthDate}/${uid}/output`)\r\n    .transaction(pre=>{\r\n      if(pre == 'undefined'){\r\n        db.ref(`inventory/log_month/${monthDate}/${uid}/output`)\r\n        .update(parseInt(val))\r\n      }else{\r\n        return pre + parseInt(val);\r\n      }\r\n    })    \r\n    db.ref(`inventory/list/${uid}/ea`)\r\n    .transaction(pre=>{\r\n      return pre - parseInt(val);\r\n    })\r\n\r\n    db\r\n    .ref(`inventory/log_date/${uid}/${submitDate.full}`)\r\n    .update({\r\n      prod,\r\n      ea:rest\r\n    });\r\n    message.success('업데이트 완료');\r\n    setLogMessege('')\r\n    setRender(!Render)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: '사진',\r\n      dataIndex: 'image',\r\n      key: 'image',\r\n      align: 'center',\r\n      width: 150,      \r\n      render: data => data ? <img style={{maxHeight:\"50px\"}} src={data} /> : ''\r\n    },\r\n    {\r\n      title: '품명',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      align: 'center',  \r\n      width: 200,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '재고',\r\n      dataIndex: 'ea',\r\n      key: 'ea',\r\n      align: 'center',      \r\n      render: (text,row) => <>\r\n        <span>{row['ea']}</span>\r\n      </>\r\n    },\r\n    {\r\n      title: '장소',\r\n      dataIndex: 'place',\r\n      key: 'place',\r\n      align: 'center',      \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '비고',\r\n      dataIndex: 'etc',\r\n      key: 'etc',\r\n      align: 'center',      \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '관리',\r\n      dataIndex: ['uid','name','ea'],\r\n      key: 'uid',\r\n      align: 'center',      \r\n      render: (text,row) => <>\r\n        <InputNumber id={`plus_${row['uid']}`} min={1} max={999} style={{width:\"50px\"}} />\r\n        <Button style={{marginRight:\"5px\",marginLeft:\"-1px\"}} onClick={()=>onPlus(row['uid'],row['name'],row['ea'])}>입고</Button>\r\n        <InputNumber id={`minus_${row['uid']}`} min={1} max={999} style={{width:\"50px\"}} />\r\n        <Button style={{marginRight:\"5px\",marginLeft:\"-1px\"}} onClick={()=>onMinus(row['uid'],row['name'],row['ea'])}>출고</Button>\r\n        <Button onClick={()=>onModify(row['uid'])}>내용수정</Button>\r\n        <Button style={{marginLeft:\"5px\"}} onClick={()=>onLogList(row['uid'],row['name'],row['ea'])}>내역</Button>\r\n        <Popconfirm\r\n          title={`${row['name']}을(를) 삭제하시겠습니까?`}\r\n          onConfirm={()=>onDelete(row['uid'])}\r\n          onCancel={cancel}\r\n          okText=\"네\"\r\n          cancelText=\"아니오\"\r\n        >\r\n          <Button style={{marginLeft:\"5px\"}}>삭제</Button>\r\n        </Popconfirm>\r\n      </>\r\n    }\r\n  ]\r\n\r\n  const cancel = (e) => {\r\n    message.error('취소되었습니다.');\r\n  }\r\n\r\n  const columns2 = [\r\n    {\r\n      title: '등록일자',\r\n      dataIndex: ['date','date_'],\r\n      key: 'date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => b.date.timestamp - a.date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      defaultSortOrder: 'ascend',\r\n      render: (text,row) => `${row['date'].full_} ${row['date'].hour}:${row['date'].min}`\r\n    },\r\n    {\r\n      title: '입출고일자',\r\n      dataIndex: ['real_date','real_date_'],\r\n      key: 'real_date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => b.real_date.timestamp - a.real_date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      defaultSortOrder: 'ascend',\r\n      render: (text,row) => `${row['real_date_']}`\r\n    },\r\n    {\r\n      title: '입출고',\r\n      dataIndex: 'type',\r\n      key: 'type',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '사용자',\r\n      dataIndex: ['name','part'],\r\n      key: 'name',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: (text,row) => `${row['name']}`\r\n    },\r\n    {\r\n      title: '품명',\r\n      dataIndex: 'prod',\r\n      key: 'prod',\r\n      align: 'center',  \r\n      width: 120,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '수량',\r\n      dataIndex: 'val',\r\n      key: 'val',\r\n      align: 'center',  \r\n      width: 40,    \r\n      render: data => data\r\n    },  \r\n    {\r\n      title: '비고',\r\n      dataIndex: 'comment',\r\n      key: 'comment',\r\n      align: 'center',  \r\n      width: 200,    \r\n      render: data => data\r\n    }, \r\n    {\r\n      title: '출납 후 재고',\r\n      dataIndex: 'ea',\r\n      key: 'ea',\r\n      align: 'center',  \r\n      width: 80,    \r\n      render: (text,row) => <>\r\n        <span>{row['ea']}</span>\r\n      </>\r\n    },\r\n  ]\r\n\r\n  const columns3 = [\r\n    {\r\n      title: '등록일자',\r\n      dataIndex: 'date',\r\n      key: 'date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => a.date.timestamp - b.date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      render: data => `${data.full_} ${data.hour}:${data.min}`\r\n    },\r\n    {\r\n      title: '입출고일자',\r\n      dataIndex: 'real_date',\r\n      key: 'real_date',\r\n      align: 'center',  \r\n      width: 100,    \r\n      sorter: {\r\n        compare: (a, b) => a.real_date.timestamp - b.real_date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      render: data => data.full_\r\n    },\r\n    {\r\n      title: '입출고',\r\n      dataIndex: 'type',\r\n      key: 'type',\r\n      align: 'center',  \r\n      width: 100,    \r\n      render: data => data\r\n    },\r\n    {\r\n      title: '사용자',\r\n      dataIndex: ['name','part'],\r\n      key: 'name',\r\n      align: 'center',  \r\n      width: 120,    \r\n      render: (text,row) => `${row['name']}`\r\n    },\r\n    {\r\n      title: '수량',\r\n      dataIndex: 'val',\r\n      key: 'val',\r\n      align: 'center',  \r\n      width: 50,    \r\n      render: data => data\r\n    },  \r\n    {\r\n      title: '비고',\r\n      dataIndex: 'comment',\r\n      key: 'comment',\r\n      align: 'center',  \r\n      width: 200,    \r\n      render: data => data\r\n    }, \r\n    {\r\n      title: '출납 후 재고',\r\n      dataIndex: 'ea',\r\n      key: 'ea',\r\n      align: 'center',  \r\n      width: 80,    \r\n      render: (text,row) => <>\r\n        <span>{row['ea']}</span>\r\n      </>\r\n    },\r\n  ]\r\n\r\n  const [ProdRegist, setProdRegist] = useState(false);\r\n  const ProdRegistToggle = () => {\r\n    setProdRegist(!ProdRegist);\r\n  };  \r\n\r\n\r\n  const normFile = (e) => {\r\n  \r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n  \r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSubmitProd = async (values) => {\r\n    values.etc = values.etc ? values.etc : '';\r\n    values.upload = values.upload ? values.upload : ''\r\n    let upload = '';\r\n    if(values.upload){\r\n      upload = values.upload[0]\r\n    }\r\n    let regex = /[^0-9]/g;\r\n    if(values.ea.match(regex)){\r\n      message.error('재고는 숫자만 입력해 주세요');\r\n      return\r\n    }\r\n    try {\r\n      let downloadURL;\r\n      const uid = uuid();\r\n      if(upload != ''){\r\n        const file = upload.originFileObj;\r\n        const metadata = upload.type;\r\n        let uploadTaskSnapshot = await firebase\r\n        .storage()\r\n        .ref(\"inventory\")\r\n        .child(`prod_image/${uid}`)\r\n        .put(file, metadata);\r\n        downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n      }else{\r\n        delete values.upload\r\n      }\r\n        db\r\n        .ref(`inventory/list`)\r\n        .child(uid)\r\n        .set({\r\n          ...values,\r\n          ea:parseInt(values.ea),\r\n          uid,\r\n          date: getFormatDate(new Date()),\r\n          image: downloadURL ? downloadURL : '',\r\n        });\r\n        db\r\n        .ref(`inventory/log/${submitDate.full}/${uuid()}`)\r\n        .update({\r\n          type:'입고',\r\n          prod:values.name,\r\n          prod_uid:uid,\r\n          name:userInfo.displayName,\r\n          part:userInfo.photoURL,\r\n          sosok:userInfo.sosok,\r\n          uid:userInfo.uid,\r\n          val:parseInt(values.ea),\r\n          ea:parseInt(values.ea),\r\n          real_date:submitDate,\r\n          date:getFormatDate(new Date())          \r\n        });\r\n\r\n        let monthDate = submitDate.full.substr(0,submitDate.full.length-2)\r\n        db\r\n        .ref(`inventory/log_month/${monthDate}/${uid}`)\r\n        .update({\r\n          prod:values.name,\r\n          prod_uid:uid,\r\n          input:parseInt(values.ea),\r\n          output:0                 \r\n        });\r\n        \r\n        db\r\n        .ref(`inventory/log_date/${uid}/${submitDate.full}`)\r\n        .update({\r\n          prod:values.name,\r\n          ea:parseInt(values.ea)           \r\n        });\r\n\r\n        message.success(\"상품을 등록했습니다.\");\r\n        formRef.current.resetFields();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n  const [isModalVisible, setIsModalVisible] = useState(false);  \r\n  const [isLogVisible, setIsLogVisible] = useState(false);  \r\n\r\n  const onCountCheck = (e) => {\r\n    let str = e.target.value;\r\n    let regex = /[^0-9]/g;\r\n    if(str.match(regex)){\r\n      message.error('숫자만 입력해 주세요');\r\n    }\r\n  }\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    setIsLogVisible(false);\r\n    setModifyUid('');\r\n    setThisLogUid('');\r\n    setThisLogData('');\r\n  };  \r\n  const onModify = (uid) => {\r\n    setModifyUid(uid)\r\n    setIsModalVisible(true);\r\n  }  \r\n  const onDelete = (uid) => {\r\n    const storageRef = firebase.storage().ref(`inventory/prod_image/${uid}`);\r\n\r\n    const onResolve = (url) => {\r\n      db.ref('inventory/list')\r\n      .child(uid)\r\n      .remove();\r\n      message.success('삭제에 성공했습니다.');\r\n      storageRef.delete()\r\n    }\r\n    const onReject = (error) => {\r\n      db.ref('inventory/list')\r\n      .child(uid)\r\n      .remove();\r\n      message.success('삭제에 성공했습니다.');\r\n    }\r\n\r\n    storageRef.getDownloadURL()\r\n    .then(onResolve,onReject);\r\n\r\n  }\r\n\r\n\r\n  const onModifySubmit = (values) => {\r\n    const uid = ModifyData.uid;\r\n    db\r\n    .ref(\"inventory/list\")\r\n    .child(uid)\r\n    .update({\r\n      ...values\r\n    });\r\n    message.success(\"업데이트에 성공했습니다.\");\r\n    setIsModalVisible(false);\r\n  }\r\n\r\n  const [LogMessege, setLogMessege] = useState('')\r\n  const onMessege = (e) => {\r\n    setLogMessege(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\r\n          비품등록\r\n        </h3>\r\n        <Switch\r\n          onChange={ProdRegistToggle}\r\n          checkedChildren=\"on\"\r\n          unCheckedChildren=\"off\"\r\n        />\r\n      </div>            \r\n      {ProdRegist && (\r\n        <Form ref={formRef} className=\"admin-prod-form\" onFinish={onSubmitProd}>     \r\n          <Form.Item \r\n            name=\"upload\"\r\n            label=\"Upload\"\r\n            valuePropName=\"fileList\"\r\n            getValueFromEvent={normFile}\r\n          >\r\n            <Upload \r\n               listType=\"picture\"\r\n            >\r\n              <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n            </Upload>\r\n          </Form.Item>     \r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"상품명\"            \r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"상품명을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"ea\"\r\n            label=\"재고개수\"            \r\n            onChange={onCountCheck}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"재고개수를 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"place\"\r\n            label=\"장소\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"재고개수를 입력해 주세요\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"etc\"\r\n            label=\"비고\"\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <div\r\n            style={{ width: \"100%\", maxWidth: \"250px\", textAlign: \"center\" }}\r\n          >\r\n            <Button\r\n              htmlType=\"submit\"\r\n              style={{ width: \"100%\" }}\r\n              type=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              등록하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n      <Divider />     \r\n      <div style={{marginBottom:\"20px\"}}>\r\n        <RangePicker defaultValue={[moment(DateStart,'YYYY-MM-DD'),moment(DateEnd,'YYYY-MM-DD')]} onChange={onSearchDate} style={{marginRight:\"5px\"}} />\r\n        <span style={{fontSize:\"12px\",color:\"#888\"}}>*날짜 검색</span>\r\n      </div>\r\n      <div className=\"flex-box a-center\" style={{marginBottom:\"10px\"}}>\r\n        <h3 className=\"title\" style={{marginBottom:\"0\",marginRight:\"10px\"}}>비품 리스트</h3>\r\n        <DatePicker defaultValue={moment(DateStart,'YYYY-MM-DD')} onChange={onSubmitDate} style={{marginRight:\"5px\"}} />\r\n        <span style={{fontSize:\"12px\",color:\"#888\"}}>*실 입출고시간이 있는경우 선택</span>\r\n      </div>\r\n      <div className=\"flex-box a-center\" style={{marginBottom:\"10px\"}}>\r\n        <span style={{flexShrink:\"0\",marginRight:\"5px\"}}>입출고시 추가 메세지</span>\r\n        <Input onChange={onMessege} value={LogMessege} />   \r\n      </div>\r\n      {ProdItem &&\r\n        <Table \r\n          columns={columns} \r\n          dataSource={ProdItem}\r\n        />      \r\n      }\r\n      <Modal title=\"수정\" \r\n       visible={isModalVisible}\r\n       onCancel={handleCancel}\r\n       centered\r\n       footer={false}\r\n      >\r\n        {ModifyData &&\r\n          <Form \r\n            className=\"admin-prod-form\" \r\n            onFinish={onModifySubmit}\r\n            initialValues={{\r\n              'name': ModifyData.name,\r\n              'ea': ModifyData.ea,\r\n              'etc': ModifyData.etc\r\n            }}\r\n          >\r\n                  \r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"상품명\"  \r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"상품명을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>          \r\n          <Form.Item\r\n            name=\"etc\"\r\n            label=\"비고\"\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <div\r\n            className=\"btn-box\"\r\n            style={{ width: \"100%\", textAlign: \"center\" }}\r\n          >\r\n            <Button\r\n              htmlType=\"submit\"\r\n              type=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              수정하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n        }\r\n      </Modal>\r\n      {ThisLogUid &&\r\n        <Modal title={`${ThisLogUid.prod} 입출고 내역`} \r\n        visible={isLogVisible}\r\n        onCancel={handleCancel}\r\n        centered\r\n        width={1000}\r\n        footer={false}\r\n        >\r\n          {ThisLogData && ThisLogData.length > 0 &&\r\n            <>\r\n              <Button style={{marginBottom:\"10px\"}}>\r\n                <CSVLink \r\n                  headers={excelHeaders} \r\n                  data={ThisLogData} \r\n                  filename={`metree-expendables-${DateStart}_${DateEnd}.csv`} \r\n                  target=\"_blank\"\r\n                >\r\n                  <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />엑셀 다운로드\r\n                </CSVLink>\r\n              </Button>\r\n              <Table \r\n                columns={columns3} \r\n                dataSource={ThisLogData}\r\n              />  \r\n            </>\r\n          }\r\n        </Modal>\r\n      }\r\n      <div className=\"flex-box a-center\" style={{marginTop:\"30px\",marginBottom:\"10px\"}}>\r\n        <h3 className=\"title\" style={{marginBottom:\"0\",marginRight:\"10px\"}}>비품 입출고 내역</h3>\r\n        {LogListData &&\r\n        <Button>\r\n          <CSVLink \r\n            headers={excelHeaders} \r\n            data={LogListData} \r\n            filename={`metree-expendables-${DateStart}_${DateEnd}.csv`} \r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n        }\r\n      </div>\r\n      {ProdItem &&\r\n        <Table \r\n          columns={columns2} \r\n          dataSource={LogListData}\r\n        />      \r\n      }\r\n\r\n      <div className=\"flex-box a-center\" style={{marginTop:\"30px\",marginBottom:\"10px\"}}>\r\n        <h3 className=\"title\" style={{marginBottom:\"0\",marginRight:\"10px\"}}>월간 입출고내역</h3>\r\n        {TotalLogData &&\r\n        <Button style={{marginRight:\"5px\"}}>\r\n          <CSVLink \r\n            headers={excelHeaders3} \r\n            data={TotalLogData} \r\n            filename={`metree-expendables-date-${EaDate}.csv`} \r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n        }\r\n        <DatePicker defaultValue={moment(SearchMonth,'YYYY-MM')} onChange={onSearchMonth} picker=\"month\" style={{marginRight:\"5px\"}} />\r\n        <span style={{fontSize:\"12px\",color:\"#888\"}}>*월별 검색</span>\r\n      </div>\r\n      {TotalLogData &&\r\n        <Table \r\n          columns={total_columns} \r\n          dataSource={TotalLogData}\r\n        />      \r\n      }\r\n\r\n      <div className=\"flex-box a-center\" style={{marginTop:\"30px\",marginBottom:\"10px\"}}>\r\n        <h3 className=\"title\" style={{marginBottom:\"0\",marginRight:\"10px\"}}>일별 재고</h3>\r\n        {EaData &&\r\n        <Button style={{marginRight:\"5px\"}}>\r\n          <CSVLink \r\n            headers={excelHeaders2} \r\n            data={EaData} \r\n            filename={`metree-expendables-date-${EaDate}.csv`} \r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n        }\r\n        <DatePicker defaultValue={moment(EaDate,'YYYY-MM-DD')} onChange={SearchEaDate} picker=\"date\" style={{marginRight:\"5px\"}} />\r\n        <span style={{fontSize:\"12px\",color:\"#888\"}}>*일별 검색</span>\r\n      </div>\r\n      {EaDate &&\r\n        <Table \r\n          columns={date_columns} \r\n          dataSource={EaData}\r\n        />      \r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default InvenAdmin\r\n\r\n",{"ruleId":"465","severity":1,"message":"466","line":89,"column":6,"nodeType":"467","endLine":89,"endColumn":8,"suggestions":"468"},{"ruleId":"469","severity":1,"message":"470","line":103,"column":11,"nodeType":"471","endLine":103,"endColumn":54},{"ruleId":"472","severity":1,"message":"473","line":103,"column":19,"nodeType":"474","messageId":"475","endLine":103,"endColumn":33},{"ruleId":"476","replacedBy":"477"},{"ruleId":"478","replacedBy":"479"},{"ruleId":"480","severity":1,"message":"481","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":19},{"ruleId":"480","severity":1,"message":"484","line":31,"column":7,"nodeType":"482","messageId":"483","endLine":31,"endColumn":15},{"ruleId":"480","severity":1,"message":"485","line":37,"column":5,"nodeType":"482","messageId":"483","endLine":37,"endColumn":9},{"ruleId":"480","severity":1,"message":"486","line":38,"column":5,"nodeType":"482","messageId":"483","endLine":38,"endColumn":10},{"ruleId":"480","severity":1,"message":"487","line":40,"column":5,"nodeType":"482","messageId":"483","endLine":40,"endColumn":18},{"ruleId":"480","severity":1,"message":"488","line":41,"column":5,"nodeType":"482","messageId":"483","endLine":41,"endColumn":8},{"ruleId":"489","severity":1,"message":"490","line":117,"column":23,"nodeType":"491","messageId":"492","endLine":117,"endColumn":25},{"ruleId":"489","severity":1,"message":"490","line":117,"column":46,"nodeType":"491","messageId":"492","endLine":117,"endColumn":48},{"ruleId":"489","severity":1,"message":"493","line":143,"column":24,"nodeType":"491","messageId":"492","endLine":143,"endColumn":26},{"ruleId":"494","severity":1,"message":"495","line":312,"column":33,"nodeType":"496","messageId":"497","endLine":312,"endColumn":35},{"ruleId":"494","severity":1,"message":"495","line":312,"column":70,"nodeType":"496","messageId":"497","endLine":312,"endColumn":72},{"ruleId":"494","severity":1,"message":"495","line":328,"column":33,"nodeType":"496","messageId":"497","endLine":328,"endColumn":35},{"ruleId":"494","severity":1,"message":"495","line":328,"column":69,"nodeType":"496","messageId":"497","endLine":328,"endColumn":71},{"ruleId":"494","severity":1,"message":"498","line":328,"column":69,"nodeType":"496","messageId":"497","endLine":328,"endColumn":71},{"ruleId":"494","severity":1,"message":"498","line":328,"column":84,"nodeType":"496","messageId":"497","endLine":328,"endColumn":86},{"ruleId":"494","severity":1,"message":"495","line":336,"column":33,"nodeType":"496","messageId":"497","endLine":336,"endColumn":35},{"ruleId":"494","severity":1,"message":"495","line":336,"column":69,"nodeType":"496","messageId":"497","endLine":336,"endColumn":71},{"ruleId":"494","severity":1,"message":"498","line":336,"column":69,"nodeType":"496","messageId":"497","endLine":336,"endColumn":71},{"ruleId":"494","severity":1,"message":"498","line":336,"column":84,"nodeType":"496","messageId":"497","endLine":336,"endColumn":86},{"ruleId":"494","severity":1,"message":"495","line":344,"column":33,"nodeType":"496","messageId":"497","endLine":344,"endColumn":35},{"ruleId":"494","severity":1,"message":"495","line":344,"column":70,"nodeType":"496","messageId":"497","endLine":344,"endColumn":72},{"ruleId":"494","severity":1,"message":"498","line":344,"column":70,"nodeType":"496","messageId":"497","endLine":344,"endColumn":72},{"ruleId":"494","severity":1,"message":"498","line":344,"column":90,"nodeType":"496","messageId":"497","endLine":344,"endColumn":92},{"ruleId":"494","severity":1,"message":"495","line":368,"column":37,"nodeType":"496","messageId":"497","endLine":368,"endColumn":39},{"ruleId":"494","severity":1,"message":"495","line":368,"column":73,"nodeType":"496","messageId":"497","endLine":368,"endColumn":75},{"ruleId":"494","severity":1,"message":"498","line":368,"column":73,"nodeType":"496","messageId":"497","endLine":368,"endColumn":75},{"ruleId":"494","severity":1,"message":"498","line":368,"column":88,"nodeType":"496","messageId":"497","endLine":368,"endColumn":90},{"ruleId":"494","severity":1,"message":"495","line":418,"column":37,"nodeType":"496","messageId":"497","endLine":418,"endColumn":39},{"ruleId":"494","severity":1,"message":"495","line":418,"column":74,"nodeType":"496","messageId":"497","endLine":418,"endColumn":76},{"ruleId":"494","severity":1,"message":"498","line":418,"column":74,"nodeType":"496","messageId":"497","endLine":418,"endColumn":76},{"ruleId":"494","severity":1,"message":"498","line":418,"column":94,"nodeType":"496","messageId":"497","endLine":418,"endColumn":96},{"ruleId":"499","severity":1,"message":"500","line":439,"column":41,"nodeType":"491","messageId":"501","endLine":439,"endColumn":42},{"ruleId":"480","severity":1,"message":"502","line":3,"column":19,"nodeType":"482","messageId":"483","endLine":3,"endColumn":22},{"ruleId":"465","severity":1,"message":"503","line":70,"column":6,"nodeType":"467","endLine":70,"endColumn":16,"suggestions":"504"},{"ruleId":"505","severity":1,"message":"506","line":126,"column":19,"nodeType":"471","endLine":126,"endColumn":46},{"ruleId":"480","severity":1,"message":"507","line":1,"column":10,"nodeType":"482","messageId":"483","endLine":1,"endColumn":17},{"ruleId":"489","severity":1,"message":"490","line":17,"column":15,"nodeType":"491","messageId":"492","endLine":17,"endColumn":17},{"ruleId":"465","severity":1,"message":"508","line":118,"column":6,"nodeType":"467","endLine":118,"endColumn":19,"suggestions":"509"},{"ruleId":"465","severity":1,"message":"510","line":132,"column":25,"nodeType":"511","endLine":132,"endColumn":49},{"ruleId":"465","severity":1,"message":"512","line":133,"column":25,"nodeType":"511","endLine":133,"endColumn":51},{"ruleId":"465","severity":1,"message":"513","line":134,"column":26,"nodeType":"511","endLine":134,"endColumn":53},{"ruleId":"514","severity":1,"message":"515","line":194,"column":35,"nodeType":"516","messageId":"517","endLine":194,"endColumn":37},{"ruleId":"465","severity":1,"message":"518","line":251,"column":6,"nodeType":"467","endLine":251,"endColumn":19,"suggestions":"519"},{"ruleId":"514","severity":1,"message":"515","line":335,"column":16,"nodeType":"516","messageId":"517","endLine":335,"endColumn":18},{"ruleId":"489","severity":1,"message":"490","line":367,"column":55,"nodeType":"491","messageId":"492","endLine":367,"endColumn":57},{"ruleId":"480","severity":1,"message":"520","line":10,"column":7,"nodeType":"482","messageId":"483","endLine":10,"endColumn":14},{"ruleId":"480","severity":1,"message":"521","line":35,"column":10,"nodeType":"482","messageId":"483","endLine":35,"endColumn":25},{"ruleId":"480","severity":1,"message":"522","line":35,"column":27,"nodeType":"482","messageId":"483","endLine":35,"endColumn":45},{"ruleId":"465","severity":1,"message":"510","line":50,"column":25,"nodeType":"511","endLine":50,"endColumn":49},{"ruleId":"465","severity":1,"message":"512","line":51,"column":25,"nodeType":"511","endLine":51,"endColumn":51},{"ruleId":"465","severity":1,"message":"513","line":52,"column":26,"nodeType":"511","endLine":52,"endColumn":53},{"ruleId":"514","severity":1,"message":"515","line":106,"column":24,"nodeType":"516","messageId":"517","endLine":106,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":107,"column":30,"nodeType":"516","messageId":"517","endLine":107,"endColumn":32},{"ruleId":"514","severity":1,"message":"515","line":176,"column":32,"nodeType":"516","messageId":"517","endLine":176,"endColumn":34},{"ruleId":"480","severity":1,"message":"523","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":25},{"ruleId":"480","severity":1,"message":"524","line":7,"column":9,"nodeType":"482","messageId":"483","endLine":7,"endColumn":21},{"ruleId":"480","severity":1,"message":"525","line":6,"column":13,"nodeType":"482","messageId":"483","endLine":6,"endColumn":20},{"ruleId":"514","severity":1,"message":"526","line":24,"column":38,"nodeType":"516","messageId":"527","endLine":24,"endColumn":40},{"ruleId":"514","severity":1,"message":"526","line":40,"column":40,"nodeType":"516","messageId":"527","endLine":40,"endColumn":42},{"ruleId":"489","severity":1,"message":"490","line":53,"column":9,"nodeType":"491","messageId":"492","endLine":53,"endColumn":11},{"ruleId":"480","severity":1,"message":"528","line":72,"column":10,"nodeType":"482","messageId":"483","endLine":72,"endColumn":18},{"ruleId":"514","severity":1,"message":"515","line":103,"column":34,"nodeType":"516","messageId":"517","endLine":103,"endColumn":36},{"ruleId":"514","severity":1,"message":"515","line":104,"column":30,"nodeType":"516","messageId":"517","endLine":104,"endColumn":32},{"ruleId":"489","severity":1,"message":"490","line":105,"column":24,"nodeType":"491","messageId":"492","endLine":105,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":111,"column":33,"nodeType":"516","messageId":"517","endLine":111,"endColumn":35},{"ruleId":"514","severity":1,"message":"515","line":112,"column":30,"nodeType":"516","messageId":"517","endLine":112,"endColumn":32},{"ruleId":"489","severity":1,"message":"490","line":113,"column":24,"nodeType":"491","messageId":"492","endLine":113,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":119,"column":34,"nodeType":"516","messageId":"517","endLine":119,"endColumn":36},{"ruleId":"514","severity":1,"message":"515","line":120,"column":30,"nodeType":"516","messageId":"517","endLine":120,"endColumn":32},{"ruleId":"489","severity":1,"message":"490","line":121,"column":24,"nodeType":"491","messageId":"492","endLine":121,"endColumn":26},{"ruleId":"465","severity":1,"message":"529","line":141,"column":6,"nodeType":"467","endLine":141,"endColumn":8,"suggestions":"530"},{"ruleId":"514","severity":1,"message":"515","line":165,"column":17,"nodeType":"516","messageId":"517","endLine":165,"endColumn":19},{"ruleId":"489","severity":1,"message":"493","line":224,"column":28,"nodeType":"491","messageId":"492","endLine":224,"endColumn":30},{"ruleId":"489","severity":1,"message":"490","line":236,"column":49,"nodeType":"491","messageId":"492","endLine":236,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":236,"column":78,"nodeType":"491","messageId":"492","endLine":236,"endColumn":80},{"ruleId":"489","severity":1,"message":"490","line":250,"column":64,"nodeType":"491","messageId":"492","endLine":250,"endColumn":66},{"ruleId":"489","severity":1,"message":"493","line":262,"column":24,"nodeType":"491","messageId":"492","endLine":262,"endColumn":26},{"ruleId":"489","severity":1,"message":"490","line":267,"column":24,"nodeType":"491","messageId":"492","endLine":267,"endColumn":26},{"ruleId":"489","severity":1,"message":"490","line":284,"column":51,"nodeType":"491","messageId":"492","endLine":284,"endColumn":53},{"ruleId":"489","severity":1,"message":"490","line":284,"column":80,"nodeType":"491","messageId":"492","endLine":284,"endColumn":82},{"ruleId":"489","severity":1,"message":"490","line":289,"column":37,"nodeType":"491","messageId":"492","endLine":289,"endColumn":39},{"ruleId":"489","severity":1,"message":"493","line":314,"column":26,"nodeType":"491","messageId":"492","endLine":314,"endColumn":28},{"ruleId":"489","severity":1,"message":"490","line":326,"column":49,"nodeType":"491","messageId":"492","endLine":326,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":326,"column":78,"nodeType":"491","messageId":"492","endLine":326,"endColumn":80},{"ruleId":"505","severity":1,"message":"506","line":352,"column":15,"nodeType":"471","endLine":352,"endColumn":45},{"ruleId":"480","severity":1,"message":"531","line":12,"column":14,"nodeType":"482","messageId":"483","endLine":12,"endColumn":25},{"ruleId":"532","severity":1,"message":"533","line":311,"column":48,"nodeType":"511","messageId":"534","endLine":311,"endColumn":63},{"ruleId":"514","severity":1,"message":"515","line":70,"column":23,"nodeType":"516","messageId":"517","endLine":70,"endColumn":25},{"ruleId":"514","severity":1,"message":"515","line":90,"column":26,"nodeType":"516","messageId":"517","endLine":90,"endColumn":28},{"ruleId":"514","severity":1,"message":"515","line":118,"column":26,"nodeType":"516","messageId":"517","endLine":118,"endColumn":28},{"ruleId":"514","severity":1,"message":"526","line":124,"column":38,"nodeType":"516","messageId":"527","endLine":124,"endColumn":40},{"ruleId":"465","severity":1,"message":"535","line":141,"column":8,"nodeType":"467","endLine":141,"endColumn":26,"suggestions":"536"},{"ruleId":"480","severity":1,"message":"537","line":8,"column":8,"nodeType":"482","messageId":"483","endLine":8,"endColumn":13},{"ruleId":"465","severity":1,"message":"538","line":216,"column":6,"nodeType":"467","endLine":216,"endColumn":18,"suggestions":"539"},{"ruleId":"480","severity":1,"message":"540","line":8,"column":8,"nodeType":"482","messageId":"483","endLine":8,"endColumn":12},{"ruleId":"489","severity":1,"message":"490","line":41,"column":26,"nodeType":"491","messageId":"492","endLine":41,"endColumn":28},{"ruleId":"514","severity":1,"message":"515","line":59,"column":21,"nodeType":"516","messageId":"517","endLine":59,"endColumn":23},{"ruleId":"514","severity":1,"message":"515","line":80,"column":27,"nodeType":"516","messageId":"517","endLine":80,"endColumn":29},{"ruleId":"480","severity":1,"message":"541","line":94,"column":15,"nodeType":"482","messageId":"483","endLine":94,"endColumn":18},{"ruleId":"514","severity":1,"message":"515","line":96,"column":26,"nodeType":"516","messageId":"517","endLine":96,"endColumn":28},{"ruleId":"532","severity":1,"message":"542","line":97,"column":64,"nodeType":"482","messageId":"534","endLine":97,"endColumn":69},{"ruleId":"514","severity":1,"message":"515","line":111,"column":29,"nodeType":"516","messageId":"517","endLine":111,"endColumn":31},{"ruleId":"514","severity":1,"message":"515","line":113,"column":22,"nodeType":"516","messageId":"517","endLine":113,"endColumn":24},{"ruleId":"465","severity":1,"message":"543","line":129,"column":6,"nodeType":"467","endLine":129,"endColumn":20,"suggestions":"544"},{"ruleId":"514","severity":1,"message":"515","line":239,"column":22,"nodeType":"516","messageId":"517","endLine":239,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":440,"column":43,"nodeType":"491","messageId":"492","endLine":440,"endColumn":45},{"ruleId":"480","severity":1,"message":"520","line":7,"column":7,"nodeType":"482","messageId":"483","endLine":7,"endColumn":14},{"ruleId":"494","severity":1,"message":"495","line":20,"column":33,"nodeType":"496","messageId":"497","endLine":20,"endColumn":35},{"ruleId":"494","severity":1,"message":"495","line":20,"column":81,"nodeType":"496","messageId":"497","endLine":20,"endColumn":83},{"ruleId":"494","severity":1,"message":"498","line":20,"column":81,"nodeType":"496","messageId":"497","endLine":20,"endColumn":83},{"ruleId":"494","severity":1,"message":"498","line":21,"column":40,"nodeType":"496","messageId":"497","endLine":21,"endColumn":42},{"ruleId":"494","severity":1,"message":"498","line":21,"column":74,"nodeType":"496","messageId":"497","endLine":21,"endColumn":76},{"ruleId":"494","severity":1,"message":"498","line":22,"column":42,"nodeType":"496","messageId":"497","endLine":22,"endColumn":44},{"ruleId":"465","severity":1,"message":"545","line":34,"column":6,"nodeType":"467","endLine":34,"endColumn":16,"suggestions":"546"},{"ruleId":"514","severity":1,"message":"515","line":44,"column":22,"nodeType":"516","messageId":"517","endLine":44,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":77,"column":35,"nodeType":"491","messageId":"492","endLine":77,"endColumn":37},{"ruleId":"489","severity":1,"message":"493","line":82,"column":35,"nodeType":"491","messageId":"492","endLine":82,"endColumn":37},{"ruleId":"480","severity":1,"message":"547","line":3,"column":32,"nodeType":"482","messageId":"483","endLine":3,"endColumn":36},{"ruleId":"489","severity":1,"message":"490","line":12,"column":22,"nodeType":"491","messageId":"492","endLine":12,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":12,"column":66,"nodeType":"491","messageId":"492","endLine":12,"endColumn":68},{"ruleId":"480","severity":1,"message":"548","line":112,"column":22,"nodeType":"482","messageId":"483","endLine":112,"endColumn":35},{"ruleId":"480","severity":1,"message":"549","line":120,"column":9,"nodeType":"482","messageId":"483","endLine":120,"endColumn":19},{"ruleId":"489","severity":1,"message":"490","line":144,"column":29,"nodeType":"491","messageId":"492","endLine":144,"endColumn":31},{"ruleId":"465","severity":1,"message":"550","line":158,"column":6,"nodeType":"467","endLine":158,"endColumn":27,"suggestions":"551"},{"ruleId":"489","severity":1,"message":"490","line":315,"column":19,"nodeType":"491","messageId":"492","endLine":315,"endColumn":21},{"ruleId":"489","severity":1,"message":"490","line":318,"column":19,"nodeType":"491","messageId":"492","endLine":318,"endColumn":21},{"ruleId":"489","severity":1,"message":"490","line":321,"column":19,"nodeType":"491","messageId":"492","endLine":321,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":363,"column":32,"nodeType":"471","endLine":363,"endColumn":74},{"ruleId":"489","severity":1,"message":"490","line":448,"column":27,"nodeType":"491","messageId":"492","endLine":448,"endColumn":29},{"ruleId":"489","severity":1,"message":"490","line":453,"column":27,"nodeType":"491","messageId":"492","endLine":453,"endColumn":29},{"ruleId":"489","severity":1,"message":"490","line":490,"column":27,"nodeType":"491","messageId":"492","endLine":490,"endColumn":29},{"ruleId":"489","severity":1,"message":"490","line":503,"column":27,"nodeType":"491","messageId":"492","endLine":503,"endColumn":29},{"ruleId":"465","severity":1,"message":"550","line":55,"column":6,"nodeType":"467","endLine":55,"endColumn":8,"suggestions":"552"},{"ruleId":"514","severity":1,"message":"515","line":73,"column":42,"nodeType":"516","messageId":"517","endLine":73,"endColumn":44},{"ruleId":"489","severity":1,"message":"493","line":142,"column":22,"nodeType":"491","messageId":"492","endLine":142,"endColumn":24},{"ruleId":"514","severity":1,"message":"515","line":146,"column":34,"nodeType":"516","messageId":"517","endLine":146,"endColumn":36},{"ruleId":"489","severity":1,"message":"490","line":154,"column":26,"nodeType":"491","messageId":"492","endLine":154,"endColumn":28},{"ruleId":"514","severity":1,"message":"515","line":159,"column":35,"nodeType":"516","messageId":"517","endLine":159,"endColumn":37},{"ruleId":"489","severity":1,"message":"490","line":180,"column":32,"nodeType":"491","messageId":"492","endLine":180,"endColumn":34},{"ruleId":"480","severity":1,"message":"553","line":232,"column":9,"nodeType":"482","messageId":"483","endLine":232,"endColumn":21},{"ruleId":"489","severity":1,"message":"490","line":264,"column":33,"nodeType":"491","messageId":"492","endLine":264,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":290,"column":33,"nodeType":"491","messageId":"492","endLine":290,"endColumn":35},{"ruleId":"514","severity":1,"message":"515","line":67,"column":21,"nodeType":"516","messageId":"517","endLine":67,"endColumn":23},{"ruleId":"514","severity":1,"message":"515","line":68,"column":28,"nodeType":"516","messageId":"517","endLine":68,"endColumn":30},{"ruleId":"489","severity":1,"message":"490","line":69,"column":22,"nodeType":"491","messageId":"492","endLine":69,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":69,"column":46,"nodeType":"491","messageId":"492","endLine":69,"endColumn":48},{"ruleId":"465","severity":1,"message":"554","line":81,"column":6,"nodeType":"467","endLine":81,"endColumn":16,"suggestions":"555"},{"ruleId":"465","severity":1,"message":"556","line":91,"column":6,"nodeType":"467","endLine":91,"endColumn":8,"suggestions":"557"},{"ruleId":"505","severity":1,"message":"506","line":150,"column":30,"nodeType":"471","endLine":150,"endColumn":72},{"ruleId":"505","severity":1,"message":"506","line":201,"column":21,"nodeType":"471","endLine":201,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":214,"column":38,"nodeType":"491","messageId":"492","endLine":214,"endColumn":40},{"ruleId":"489","severity":1,"message":"490","line":225,"column":38,"nodeType":"491","messageId":"492","endLine":225,"endColumn":40},{"ruleId":"489","severity":1,"message":"490","line":233,"column":38,"nodeType":"491","messageId":"492","endLine":233,"endColumn":40},{"ruleId":"505","severity":1,"message":"506","line":241,"column":27,"nodeType":"471","endLine":241,"endColumn":48},{"ruleId":"489","severity":1,"message":"493","line":246,"column":34,"nodeType":"491","messageId":"492","endLine":246,"endColumn":36},{"ruleId":"489","severity":1,"message":"490","line":248,"column":39,"nodeType":"491","messageId":"492","endLine":248,"endColumn":41},{"ruleId":"489","severity":1,"message":"490","line":257,"column":39,"nodeType":"491","messageId":"492","endLine":257,"endColumn":41},{"ruleId":"514","severity":1,"message":"515","line":41,"column":42,"nodeType":"516","messageId":"517","endLine":41,"endColumn":44},{"ruleId":"465","severity":1,"message":"558","line":58,"column":6,"nodeType":"467","endLine":58,"endColumn":8,"suggestions":"559"},{"ruleId":"514","severity":1,"message":"515","line":78,"column":42,"nodeType":"516","messageId":"517","endLine":78,"endColumn":44},{"ruleId":"489","severity":1,"message":"493","line":134,"column":20,"nodeType":"491","messageId":"492","endLine":134,"endColumn":22},{"ruleId":"514","severity":1,"message":"515","line":141,"column":22,"nodeType":"516","messageId":"517","endLine":141,"endColumn":24},{"ruleId":"514","severity":1,"message":"515","line":149,"column":54,"nodeType":"516","messageId":"517","endLine":149,"endColumn":56},{"ruleId":"489","severity":1,"message":"490","line":156,"column":24,"nodeType":"491","messageId":"492","endLine":156,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":161,"column":33,"nodeType":"516","messageId":"517","endLine":161,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":183,"column":30,"nodeType":"491","messageId":"492","endLine":183,"endColumn":32},{"ruleId":"489","severity":1,"message":"490","line":273,"column":33,"nodeType":"491","messageId":"492","endLine":273,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":299,"column":33,"nodeType":"491","messageId":"492","endLine":299,"endColumn":35},{"ruleId":"514","severity":1,"message":"515","line":43,"column":42,"nodeType":"516","messageId":"517","endLine":43,"endColumn":44},{"ruleId":"465","severity":1,"message":"560","line":60,"column":6,"nodeType":"467","endLine":60,"endColumn":8,"suggestions":"561"},{"ruleId":"514","severity":1,"message":"515","line":80,"column":42,"nodeType":"516","messageId":"517","endLine":80,"endColumn":44},{"ruleId":"489","severity":1,"message":"493","line":136,"column":20,"nodeType":"491","messageId":"492","endLine":136,"endColumn":22},{"ruleId":"514","severity":1,"message":"515","line":143,"column":22,"nodeType":"516","messageId":"517","endLine":143,"endColumn":24},{"ruleId":"514","severity":1,"message":"515","line":151,"column":54,"nodeType":"516","messageId":"517","endLine":151,"endColumn":56},{"ruleId":"489","severity":1,"message":"490","line":158,"column":24,"nodeType":"491","messageId":"492","endLine":158,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":163,"column":33,"nodeType":"516","messageId":"517","endLine":163,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":185,"column":30,"nodeType":"491","messageId":"492","endLine":185,"endColumn":32},{"ruleId":"489","severity":1,"message":"490","line":275,"column":33,"nodeType":"491","messageId":"492","endLine":275,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":301,"column":33,"nodeType":"491","messageId":"492","endLine":301,"endColumn":35},{"ruleId":"465","severity":1,"message":"550","line":57,"column":6,"nodeType":"467","endLine":57,"endColumn":27,"suggestions":"562"},{"ruleId":"505","severity":1,"message":"506","line":223,"column":32,"nodeType":"471","endLine":223,"endColumn":74},{"ruleId":"480","severity":1,"message":"563","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":22},{"ruleId":"480","severity":1,"message":"564","line":3,"column":24,"nodeType":"482","messageId":"483","endLine":3,"endColumn":37},{"ruleId":"465","severity":1,"message":"508","line":89,"column":6,"nodeType":"467","endLine":89,"endColumn":8,"suggestions":"565"},{"ruleId":"480","severity":1,"message":"566","line":91,"column":9,"nodeType":"482","messageId":"483","endLine":91,"endColumn":19},{"ruleId":"480","severity":1,"message":"567","line":98,"column":9,"nodeType":"482","messageId":"483","endLine":98,"endColumn":20},{"ruleId":"480","severity":1,"message":"568","line":109,"column":10,"nodeType":"482","messageId":"483","endLine":109,"endColumn":20},{"ruleId":"480","severity":1,"message":"569","line":113,"column":10,"nodeType":"482","messageId":"483","endLine":113,"endColumn":21},{"ruleId":"465","severity":1,"message":"570","line":27,"column":6,"nodeType":"467","endLine":27,"endColumn":24,"suggestions":"571"},{"ruleId":"572","severity":1,"message":"573","line":80,"column":7,"nodeType":"574","messageId":"492","endLine":80,"endColumn":12},{"ruleId":"480","severity":1,"message":"523","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":25},{"ruleId":"465","severity":1,"message":"575","line":31,"column":6,"nodeType":"467","endLine":31,"endColumn":8,"suggestions":"576"},{"ruleId":"480","severity":1,"message":"577","line":9,"column":10,"nodeType":"482","messageId":"483","endLine":9,"endColumn":18},{"ruleId":"480","severity":1,"message":"578","line":17,"column":10,"nodeType":"482","messageId":"483","endLine":17,"endColumn":18},{"ruleId":"480","severity":1,"message":"579","line":17,"column":20,"nodeType":"482","messageId":"483","endLine":17,"endColumn":31},{"ruleId":"480","severity":1,"message":"580","line":23,"column":9,"nodeType":"482","messageId":"483","endLine":23,"endColumn":13},{"ruleId":"465","severity":1,"message":"581","line":62,"column":6,"nodeType":"467","endLine":62,"endColumn":8,"suggestions":"582"},{"ruleId":"514","severity":1,"message":"515","line":114,"column":31,"nodeType":"516","messageId":"517","endLine":114,"endColumn":33},{"ruleId":"480","severity":1,"message":"583","line":115,"column":15,"nodeType":"482","messageId":"483","endLine":115,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":116,"column":23,"nodeType":"516","messageId":"517","endLine":116,"endColumn":25},{"ruleId":"489","severity":1,"message":"493","line":119,"column":24,"nodeType":"491","messageId":"492","endLine":119,"endColumn":26},{"ruleId":"465","severity":1,"message":"584","line":142,"column":6,"nodeType":"467","endLine":142,"endColumn":16,"suggestions":"585"},{"ruleId":"480","severity":1,"message":"586","line":1,"column":33,"nodeType":"482","messageId":"483","endLine":1,"endColumn":42},{"ruleId":"480","severity":1,"message":"547","line":2,"column":26,"nodeType":"482","messageId":"483","endLine":2,"endColumn":30},{"ruleId":"480","severity":1,"message":"587","line":2,"column":31,"nodeType":"482","messageId":"483","endLine":2,"endColumn":36},{"ruleId":"480","severity":1,"message":"531","line":2,"column":37,"nodeType":"482","messageId":"483","endLine":2,"endColumn":48},{"ruleId":"480","severity":1,"message":"588","line":5,"column":9,"nodeType":"482","messageId":"483","endLine":5,"endColumn":23},{"ruleId":"480","severity":1,"message":"589","line":6,"column":10,"nodeType":"482","messageId":"483","endLine":6,"endColumn":16},{"ruleId":"480","severity":1,"message":"590","line":10,"column":9,"nodeType":"482","messageId":"483","endLine":10,"endColumn":11},{"ruleId":"480","severity":1,"message":"591","line":11,"column":9,"nodeType":"482","messageId":"483","endLine":11,"endColumn":16},{"ruleId":"480","severity":1,"message":"592","line":26,"column":10,"nodeType":"482","messageId":"483","endLine":26,"endColumn":18},{"ruleId":"480","severity":1,"message":"593","line":27,"column":9,"nodeType":"482","messageId":"483","endLine":27,"endColumn":18},{"ruleId":"480","severity":1,"message":"594","line":30,"column":9,"nodeType":"482","messageId":"483","endLine":30,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":44,"column":19,"nodeType":"471","endLine":44,"endColumn":41},{"ruleId":"465","severity":1,"message":"581","line":25,"column":6,"nodeType":"467","endLine":25,"endColumn":8,"suggestions":"595"},{"ruleId":"465","severity":1,"message":"581","line":25,"column":6,"nodeType":"467","endLine":25,"endColumn":8,"suggestions":"596"},{"ruleId":"480","severity":1,"message":"597","line":6,"column":13,"nodeType":"482","messageId":"483","endLine":6,"endColumn":19},{"ruleId":"480","severity":1,"message":"577","line":10,"column":10,"nodeType":"482","messageId":"483","endLine":10,"endColumn":18},{"ruleId":"480","severity":1,"message":"537","line":11,"column":8,"nodeType":"482","messageId":"483","endLine":11,"endColumn":13},{"ruleId":"480","severity":1,"message":"578","line":18,"column":10,"nodeType":"482","messageId":"483","endLine":18,"endColumn":18},{"ruleId":"480","severity":1,"message":"579","line":18,"column":20,"nodeType":"482","messageId":"483","endLine":18,"endColumn":31},{"ruleId":"480","severity":1,"message":"580","line":24,"column":9,"nodeType":"482","messageId":"483","endLine":24,"endColumn":13},{"ruleId":"480","severity":1,"message":"598","line":51,"column":9,"nodeType":"482","messageId":"483","endLine":51,"endColumn":19},{"ruleId":"465","severity":1,"message":"581","line":63,"column":6,"nodeType":"467","endLine":63,"endColumn":8,"suggestions":"599"},{"ruleId":"514","severity":1,"message":"515","line":116,"column":31,"nodeType":"516","messageId":"517","endLine":116,"endColumn":33},{"ruleId":"514","severity":1,"message":"515","line":117,"column":23,"nodeType":"516","messageId":"517","endLine":117,"endColumn":25},{"ruleId":"489","severity":1,"message":"493","line":120,"column":24,"nodeType":"491","messageId":"492","endLine":120,"endColumn":26},{"ruleId":"465","severity":1,"message":"600","line":142,"column":6,"nodeType":"467","endLine":142,"endColumn":16,"suggestions":"601"},{"ruleId":"494","severity":1,"message":"498","line":168,"column":28,"nodeType":"496","messageId":"497","endLine":168,"endColumn":30},{"ruleId":"494","severity":1,"message":"498","line":168,"column":42,"nodeType":"496","messageId":"497","endLine":168,"endColumn":44},{"ruleId":"480","severity":1,"message":"602","line":213,"column":13,"nodeType":"482","messageId":"483","endLine":213,"endColumn":21},{"ruleId":"465","severity":1,"message":"603","line":149,"column":6,"nodeType":"467","endLine":149,"endColumn":8,"suggestions":"604"},{"ruleId":"489","severity":1,"message":"490","line":215,"column":14,"nodeType":"491","messageId":"492","endLine":215,"endColumn":16},{"ruleId":"505","severity":1,"message":"506","line":283,"column":54,"nodeType":"471","endLine":283,"endColumn":76},{"ruleId":"480","severity":1,"message":"605","line":2,"column":30,"nodeType":"482","messageId":"483","endLine":2,"endColumn":35},{"ruleId":"480","severity":1,"message":"606","line":2,"column":37,"nodeType":"482","messageId":"483","endLine":2,"endColumn":45},{"ruleId":"480","severity":1,"message":"607","line":2,"column":47,"nodeType":"482","messageId":"483","endLine":2,"endColumn":50},{"ruleId":"480","severity":1,"message":"608","line":5,"column":8,"nodeType":"482","messageId":"483","endLine":5,"endColumn":17},{"ruleId":"480","severity":1,"message":"609","line":7,"column":8,"nodeType":"482","messageId":"483","endLine":7,"endColumn":14},{"ruleId":"480","severity":1,"message":"610","line":13,"column":10,"nodeType":"482","messageId":"483","endLine":13,"endColumn":14},{"ruleId":"465","severity":1,"message":"611","line":91,"column":6,"nodeType":"467","endLine":91,"endColumn":14,"suggestions":"612"},{"ruleId":"465","severity":1,"message":"611","line":104,"column":6,"nodeType":"467","endLine":104,"endColumn":17,"suggestions":"613"},{"ruleId":"514","severity":1,"message":"515","line":128,"column":21,"nodeType":"516","messageId":"517","endLine":128,"endColumn":23},{"ruleId":"465","severity":1,"message":"614","line":145,"column":6,"nodeType":"467","endLine":145,"endColumn":18,"suggestions":"615"},{"ruleId":"465","severity":1,"message":"611","line":176,"column":6,"nodeType":"467","endLine":176,"endColumn":14,"suggestions":"616"},{"ruleId":"465","severity":1,"message":"611","line":214,"column":6,"nodeType":"467","endLine":214,"endColumn":26,"suggestions":"617"},{"ruleId":"514","severity":1,"message":"515","line":261,"column":21,"nodeType":"516","messageId":"517","endLine":261,"endColumn":23},{"ruleId":"465","severity":1,"message":"614","line":277,"column":6,"nodeType":"467","endLine":277,"endColumn":14,"suggestions":"618"},{"ruleId":"489","severity":1,"message":"490","line":319,"column":14,"nodeType":"491","messageId":"492","endLine":319,"endColumn":16},{"ruleId":"489","severity":1,"message":"490","line":375,"column":14,"nodeType":"491","messageId":"492","endLine":375,"endColumn":16},{"ruleId":"505","severity":1,"message":"506","line":405,"column":30,"nodeType":"471","endLine":405,"endColumn":75},{"ruleId":"489","severity":1,"message":"493","line":645,"column":17,"nodeType":"491","messageId":"492","endLine":645,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["619"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","no-native-reassign",["620"],"no-negated-in-lhs",["621"],"no-unused-vars","'clearUser' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'emailVerified' is assigned a value but never used.","'uid' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'old' is defined but never used.","React Hook useEffect has missing dependencies: 'EndDate', 'StartDate', and 'userInfo.uid'. Either include them or remove the dependency array.",["622"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'message' is defined but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["623"],"Assignments to the 'b_soldout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'm_soldout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'm_soldout2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'ProdItemCopy'. Either include it or remove the dependency array.",["624"],"'curDate' is assigned a value but never used.","'TodayLunchCheck' is assigned a value but never used.","'setTodayLunchCheck' is assigned a value but never used.","'useState' is defined but never used.","'signaturePad' is assigned a value but never used.","'antIcon' is defined but never used.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd","'UserList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'curWeekArr', 'nextWeekArr', 'prevWeekArr', and 'userInfo.uid'. Either include them or remove the dependency array.",["625"],"'InputNumber' is defined but never used.","no-self-assign","'values.sort_num' is assigned to itself.","selfAssignment","React Hook useEffect has missing dependencies: 'LastDay', 'SearchDate.full', and 'SearchDate.timestamp'. Either include them or remove the dependency array.",["626"],"'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'OrderList.length', 'Sound', and 'SoundSelect'. Either include them or remove the dependency array.",["627"],"'uuid' is defined but never used.","'res' is defined but never used.","'count' is assigned to itself.","React Hook useEffect has missing dependencies: 'Filter' and 'SearchDate.full'. Either include them or remove the dependency array.",["628"],"React Hook useEffect has missing dependencies: 'userInfo.auth' and 'userInfo.uid'. Either include them or remove the dependency array.",["629"],"'Form' is defined but never used.","'setModifyData' is assigned a value but never used.","'modifyUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo.uid'. Either include it or remove the dependency array.",["630"],["631"],"'onTempSubmit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.location.state.uid' and 'userInfo'. Either include them or remove the dependency array.",["632"],"React Hook useEffect has a missing dependency: 'ResultList'. Either include it or remove the dependency array.",["633"],"React Hook useEffect has a missing dependency: 'props.location.state.uid'. Either include it or remove the dependency array.",["634"],"React Hook useEffect has missing dependencies: 'props.location.state.uid' and 'userInfo.uid'. Either include them or remove the dependency array.",["635"],["636"],"'PlusOutlined' is defined but never used.","'MinusOutlined' is defined but never used.",["637"],"'plusAmount' is assigned a value but never used.","'minusAmount' is assigned a value but never used.","'radioValue' is assigned a value but never used.","'radioValue2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onTimeOut'. Either include it or remove the dependency array. If 'onTimeOut' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["638"],"no-dupe-keys","Duplicate key 'limit'.","ObjectExpression","React Hook useEffect has a missing dependency: 'onSigpad'. Either include it or remove the dependency array. If 'onSigpad' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["639"],"'constant' is defined but never used.","'TimeData' is assigned a value but never used.","'setTimeData' is assigned a value but never used.","'copy' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'welDb'. Either include it or remove the dependency array.",["640"],"'reservCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'SearchDate.full', 'getListOff', 'timeTable', 'userInfo.uid', and 'welDb'. Either include them or remove the dependency array.",["641"],"'useEffect' is defined but never used.","'Input' is defined but never used.","'OderModalPopup' is defined but never used.","'values' is defined but never used.","'db' is assigned a value but never used.","'typeBox' is assigned a value but never used.","'VisitPop' is assigned a value but never used.","'onVistPop' is assigned a value but never used.","'onVistPopOff' is assigned a value but never used.",["642"],["643"],"'imIcon' is defined but never used.","'getListOff' is assigned a value but never used.",["644"],"React Hook useEffect has missing dependencies: 'SearchDate.full', 'timeTable', 'userInfo.uid', and 'welDb'. Either include them or remove the dependency array.",["645"],"'dateTime' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'SearchMonth', 'db', and 'userInfo.uid'. Either include them or remove the dependency array.",["646"],"'Radio' is defined but never used.","'Checkbox' is defined but never used.","'Row' is defined but never used.","'ImgUpload' is defined but never used.","'styled' is defined but never used.","'once' is defined but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["647"],["648"],"React Hook useEffect has missing dependencies: 'DateEnd', 'DateStart', and 'db'. Either include them or remove the dependency array.",["649"],["650"],["651"],["652"],{"desc":"653","fix":"654"},"no-global-assign","no-unsafe-negation",{"desc":"655","fix":"656"},{"desc":"657","fix":"658"},{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"665","fix":"666"},{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"671","fix":"683"},{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"688","fix":"689"},{"desc":"690","fix":"691"},{"desc":"692","fix":"693"},{"desc":"690","fix":"694"},{"desc":"690","fix":"695"},{"desc":"690","fix":"696"},{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},"Update the dependencies array to be: [dispatch, history]",{"range":"713","text":"714"},"Update the dependencies array to be: [EndDate, ReRender, StartDate, userInfo.uid]",{"range":"715","text":"716"},"Update the dependencies array to be: [ModifyState, userInfo]",{"range":"717","text":"718"},"Update the dependencies array to be: [ProdItemCopy, searchInput]",{"range":"719","text":"720"},"Update the dependencies array to be: [curWeekArr, nextWeekArr, prevWeekArr, userInfo.uid]",{"range":"721","text":"722"},"Update the dependencies array to be: [SelectDay, Render, SearchDate.timestamp, SearchDate.full, LastDay]",{"range":"723","text":"724"},"Update the dependencies array to be: [OrderCount, OrderList.length, Sound, SoundSelect]",{"range":"725","text":"726"},"Update the dependencies array to be: [Ruser, Render, SearchDate.full, Filter]",{"range":"727","text":"728"},"Update the dependencies array to be: [ReRender, userInfo.auth, userInfo.uid]",{"range":"729","text":"730"},"Update the dependencies array to be: [Rerender, SearchDate, userInfo.uid]",{"range":"731","text":"732"},"Update the dependencies array to be: [userInfo.uid]",{"range":"733","text":"734"},"Update the dependencies array to be: [Rerender, props.location.state.uid, userInfo]",{"range":"735","text":"736"},"Update the dependencies array to be: [ResultList]",{"range":"737","text":"738"},"Update the dependencies array to be: [props.location.state.uid]",{"range":"739","text":"740"},"Update the dependencies array to be: [props.location.state.uid, userInfo.uid]",{"range":"741","text":"742"},{"range":"743","text":"732"},"Update the dependencies array to be: [userInfo]",{"range":"744","text":"745"},"Update the dependencies array to be: [minutes, onTimeOut, seconds]",{"range":"746","text":"747"},"Update the dependencies array to be: [onSigpad]",{"range":"748","text":"749"},"Update the dependencies array to be: [welDb]",{"range":"750","text":"751"},"Update the dependencies array to be: [Rerender, SearchDate.full, getListOff, timeTable, userInfo.uid, welDb]",{"range":"752","text":"753"},{"range":"754","text":"751"},{"range":"755","text":"751"},{"range":"756","text":"751"},"Update the dependencies array to be: [Rerender, SearchDate.full, timeTable, userInfo.uid, welDb]",{"range":"757","text":"758"},"Update the dependencies array to be: [SearchMonth, db, userInfo.uid]",{"range":"759","text":"760"},"Update the dependencies array to be: [Render, db]",{"range":"761","text":"762"},"Update the dependencies array to be: [ModifyUid, db]",{"range":"763","text":"764"},"Update the dependencies array to be: [DateEnd, DateStart, ThisLogUid, db]",{"range":"765","text":"766"},"Update the dependencies array to be: [EaDate, db]",{"range":"767","text":"768"},"Update the dependencies array to be: [SearchMonth, Render, db]",{"range":"769","text":"770"},"Update the dependencies array to be: [DateEnd, DateStart, Render, db]",{"range":"771","text":"772"},[3418,3420],"[dispatch, history]",[2353,2363],"[EndDate, ReRender, StartDate, userInfo.uid]",[3213,3226],"[ModifyState, userInfo]",[7273,7286],"[ProdItemCopy, searchInput]",[3946,3948],"[curWeekArr, nextWeekArr, prevWeekArr, userInfo.uid]",[4731,4749],"[SelectDay, Render, SearchDate.timestamp, SearchDate.full, LastDay]",[4983,4995],"[OrderCount, OrderList.length, Sound, SoundSelect]",[3731,3745],"[Ruser, Render, SearchDate.full, Filter]",[1136,1146],"[ReRender, userInfo.auth, userInfo.uid]",[5737,5758],"[Rerender, SearchDate, userInfo.uid]",[1663,1665],"[userInfo.uid]",[2400,2410],"[Rerender, props.location.state.uid, userInfo]",[2561,2563],"[ResultList]",[1838,1840],"[props.location.state.uid]",[1969,1971],"[props.location.state.uid, userInfo.uid]",[1838,1859],[2173,2175],"[userInfo]",[814,832],"[minutes, onTimeOut, seconds]",[863,865],"[onSigpad]",[1928,1930],"[welDb]",[4421,4431],"[Rerender, SearchDate.full, getListOff, timeTable, userInfo.uid, welDb]",[723,725],[726,728],[1979,1981],[4433,4443],"[Rerender, SearchDate.full, timeTable, userInfo.uid, welDb]",[4085,4087],"[SearchMonth, db, userInfo.uid]",[2899,2907],"[Render, db]",[3154,3165],"[ModifyUid, db]",[4224,4236],"[DateEnd, DateStart, ThisLogUid, db]",[4977,4985],"[EaDate, db]",[5802,5822],"[SearchMonth, Render, db]",[7383,7391],"[DateEnd, DateStart, Render, db]"]